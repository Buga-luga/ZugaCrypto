"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies/ema-crossover */ \"(app-pages-browser)/./src/services/strategies/ema-crossover.ts\");\n/* harmony import */ var _services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/sma-crossover */ \"(app-pages-browser)/./src/services/strategies/sma-crossover.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy, token, exchange } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSignalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Function to get interval in seconds\n    const getIntervalSeconds = (tf)=>{\n        switch(tf){\n            case \"1m\":\n                return 60;\n            case \"5m\":\n                return 300;\n            case \"15m\":\n                return 900;\n            case \"30m\":\n                return 1800;\n            case \"1h\":\n                return 3600;\n            case \"4h\":\n                return 14400;\n            case \"1d\":\n                return 86400;\n            default:\n                return 60;\n        }\n    };\n    // Function to safely remove a series\n    const safelyRemoveSeries = (chart, series)=>{\n        try {\n            if (series && chart) {\n                chart.removeSeries(series);\n            }\n        } catch (e) {\n            console.error(\"Error removing series:\", e);\n        }\n    };\n    // Function to check for crossover signals\n    const checkForSignal = (prevFast, prevSlow, currFast, currSlow, candle)=>{\n        if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n            const candleHeight = candle.high - candle.low;\n            // Buy signal: Fast crosses above Slow\n            if (prevFast <= prevSlow && currFast > currSlow) {\n                return {\n                    time: candle.time,\n                    position: \"belowBar\",\n                    color: \"#26a69a\",\n                    shape: \"arrowUp\",\n                    text: \"Buy \".concat(candle.close.toFixed(2)),\n                    size: 2,\n                    value: candle.low - candleHeight * 0.5\n                };\n            } else if (prevFast >= prevSlow && currFast < currSlow) {\n                return {\n                    time: candle.time,\n                    position: \"aboveBar\",\n                    color: \"#ef5350\",\n                    shape: \"arrowDown\",\n                    text: \"Sell \".concat(candle.close.toFixed(2)),\n                    size: 2,\n                    value: candle.high + candleHeight * 0.5\n                };\n            }\n        }\n        return null;\n    };\n    // Function to add strategy indicators\n    const addStrategyIndicators = (chart, data)=>{\n        console.log(\"Adding strategy indicators\");\n        // Clear any existing indicators\n        indicatorSeriesRefs.current.forEach((series)=>safelyRemoveSeries(chart, series));\n        indicatorSeriesRefs.current.clear();\n        if (markerSeriesRef.current) {\n            safelyRemoveSeries(chart, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n        }\n        if (strategy === \"none\") return;\n        const prices = data.map((d)=>d.close);\n        const fastPeriod = 9;\n        const slowPeriod = 21;\n        // Calculate MAs\n        const fastMA = strategy === \"ema_crossover\" ? (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_4__.calculateEMA)(prices, fastPeriod) : (0,_services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, fastPeriod);\n        const slowMA = strategy === \"ema_crossover\" ? (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_4__.calculateEMA)(prices, slowPeriod) : (0,_services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, slowPeriod);\n        // Add MA lines\n        const fastSeries = chart.addLineSeries({\n            color: \"#2962FF\",\n            lineWidth: 2,\n            title: \"Fast MA\",\n            priceFormat: {\n                type: \"price\",\n                precision: 2,\n                minMove: 0.01\n            }\n        });\n        const slowSeries = chart.addLineSeries({\n            color: \"#FF6B6B\",\n            lineWidth: 2,\n            title: \"Slow MA\",\n            priceFormat: {\n                type: \"price\",\n                precision: 2,\n                minMove: 0.01\n            }\n        });\n        // Store refs\n        indicatorSeriesRefs.current.set(\"Fast MA\", fastSeries);\n        indicatorSeriesRefs.current.set(\"Slow MA\", slowSeries);\n        // Create marker series\n        markerSeriesRef.current = chart.addLineSeries({\n            lastValueVisible: false,\n            priceLineVisible: false,\n            crosshairMarkerVisible: false,\n            lineVisible: false,\n            lineWidth: 1,\n            color: \"rgba(0, 0, 0, 0)\"\n        });\n        // Set MA data\n        const maData = data.map((candle, i)=>({\n                time: candle.time,\n                value: fastMA[i]\n            })).filter((d)=>!isNaN(d.value));\n        const slowData = data.map((candle, i)=>({\n                time: candle.time,\n                value: slowMA[i]\n            })).filter((d)=>!isNaN(d.value));\n        fastSeries.setData(maData);\n        slowSeries.setData(slowData);\n        // Find and set signals\n        const signals = [];\n        for(let i = 1; i < data.length; i++){\n            const signal = checkForSignal(fastMA[i - 1], slowMA[i - 1], fastMA[i], slowMA[i], data[i]);\n            if (signal) {\n                signals.push(signal);\n                console.log(\"\".concat(signal.text, \" signal at \").concat(new Date(signal.time * 1000).toLocaleString()));\n            }\n        }\n        if (signals.length > 0) {\n            console.log(\"Setting \".concat(signals.length, \" historical signals\"));\n            markerSeriesRef.current.setMarkers(signals);\n            // Set a data point for each signal to ensure proper positioning\n            markerSeriesRef.current.setData(signals.map((signal)=>({\n                    time: signal.time,\n                    value: signal.value\n                })));\n        }\n    };\n    // Modify the real-time signal check\n    const checkRealTimeSignal = (data)=>{\n        if (!markerSeriesRef.current || data.length < 2) return;\n        const prices = data.map((d)=>d.close);\n        const fastPeriod = 9;\n        const slowPeriod = 21;\n        const fastMA = strategy === \"ema_crossover\" ? (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_4__.calculateEMA)(prices, fastPeriod) : (0,_services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, fastPeriod);\n        const slowMA = strategy === \"ema_crossover\" ? (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_4__.calculateEMA)(prices, slowPeriod) : (0,_services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, slowPeriod);\n        const signal = checkForSignal(fastMA[fastMA.length - 2], slowMA[slowMA.length - 2], fastMA[fastMA.length - 1], slowMA[slowMA.length - 1], data[data.length - 1]);\n        if (signal) {\n            const existingMarkers = markerSeriesRef.current.markers() || [];\n            console.log(\"Adding real-time \".concat(signal.text, \" signal\"));\n            markerSeriesRef.current.setMarkers([\n                ...existingMarkers,\n                signal\n            ]);\n        }\n    };\n    // Effect for strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (chartRef.current && historicalDataRef.current.length > 0) {\n            addStrategyIndicators(chartRef.current, historicalDataRef.current);\n        }\n    }, [\n        strategy\n    ]);\n    // Main chart initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\"\n            },\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        });\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\"\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Remove TradingView logo elements\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created and after a delay\n        removeTradingViewLogo();\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        // Load initial data\n        const loadData = async ()=>{\n            try {\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n                // Initialize current candle from last historical candle\n                if (data.length > 0) {\n                    const lastCandle = data[data.length - 1];\n                    currentCandleRef.current = {\n                        time: lastCandle.time,\n                        open: lastCandle.close,\n                        high: lastCandle.close,\n                        low: lastCandle.close,\n                        close: lastCandle.close\n                    };\n                }\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadData();\n        // Real-time updates\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (!candlestickSeriesRef.current) return;\n            const intervalSeconds = getIntervalSeconds(timeframe);\n            const candleTimestamp = Math.floor(data.time / intervalSeconds) * intervalSeconds;\n            // If this is a new candle\n            if (!currentCandleRef.current || candleTimestamp !== currentCandleRef.current.time) {\n                // If we had a previous candle, add it to historical data and check for signals\n                if (currentCandleRef.current) {\n                    historicalDataRef.current = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    // Update strategies with the new historical data\n                    if (strategy !== \"none\" && chartRef.current) {\n                        addStrategyIndicators(chartRef.current, historicalDataRef.current);\n                    }\n                }\n                // Start new candle\n                currentCandleRef.current = {\n                    time: candleTimestamp,\n                    open: data.value,\n                    high: data.value,\n                    low: data.value,\n                    close: data.value\n                };\n            } else {\n                // Update current candle\n                currentCandleRef.current.high = Math.max(currentCandleRef.current.high, data.value);\n                currentCandleRef.current.low = Math.min(currentCandleRef.current.low, data.value);\n                currentCandleRef.current.close = data.value;\n                // Check for real-time signals with current candle\n                if (strategy !== \"none\" && chartRef.current && historicalDataRef.current.length > 0) {\n                    const updatedData = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    checkRealTimeSignal(updatedData);\n                }\n            }\n            // Update the chart with current candle\n            candlestickSeriesRef.current.update(currentCandleRef.current);\n        }, timeframe);\n        // Handle window resize\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            chart.remove();\n        };\n    }, [\n        timeframe\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: chartContainerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 386,\n        columnNumber: 10\n    }, this);\n}\n_s(CandlestickChart, \"b+lEihv/5eOeyLxDEr+YsOXIV6U=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NhbmRsZXN0aWNrQ2hhcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFMEM7QUFDTztBQUNnRDtBQUU5QjtBQUNBO0FBaUI1RCxTQUFTTyxpQkFBaUIsS0FBK0Q7UUFBL0QsRUFBRUMsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUF5QixHQUEvRDs7SUFDL0IsTUFBTUMsb0JBQW9CWCw2Q0FBTUEsQ0FBaUI7SUFDakQsTUFBTVksV0FBV1osNkNBQU1BLENBQW1CO0lBQzFDLE1BQU1hLHVCQUF1QmIsNkNBQU1BLENBQU07SUFDekMsTUFBTWMsc0JBQXNCZCw2Q0FBTUEsQ0FBbUIsSUFBSWU7SUFDekQsTUFBTUMsa0JBQWtCaEIsNkNBQU1BLENBQU07SUFDcEMsTUFBTWlCLG9CQUFvQmpCLDZDQUFNQSxDQUFRLEVBQUU7SUFDMUMsTUFBTWtCLG1CQUFtQmxCLDZDQUFNQSxDQUFNO0lBQ3JDLE1BQU1tQixnQkFBZ0JuQiw2Q0FBTUEsQ0FBZ0Q7SUFFNUUsc0NBQXNDO0lBQ3RDLE1BQU1vQixxQkFBcUIsQ0FBQ0M7UUFDMUIsT0FBUUE7WUFDTixLQUFLO2dCQUFNLE9BQU87WUFDbEIsS0FBSztnQkFBTSxPQUFPO1lBQ2xCLEtBQUs7Z0JBQU8sT0FBTztZQUNuQixLQUFLO2dCQUFPLE9BQU87WUFDbkIsS0FBSztnQkFBTSxPQUFPO1lBQ2xCLEtBQUs7Z0JBQU0sT0FBTztZQUNsQixLQUFLO2dCQUFNLE9BQU87WUFDbEI7Z0JBQVMsT0FBTztRQUNsQjtJQUNGO0lBRUEscUNBQXFDO0lBQ3JDLE1BQU1DLHFCQUFxQixDQUFDQyxPQUFrQkM7UUFDNUMsSUFBSTtZQUNGLElBQUlBLFVBQVVELE9BQU87Z0JBQ25CQSxNQUFNRSxZQUFZLENBQUNEO1lBQ3JCO1FBQ0YsRUFBRSxPQUFPRSxHQUFHO1lBQ1ZDLFFBQVFDLEtBQUssQ0FBQywwQkFBMEJGO1FBQzFD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LHFCQUFxQnNDLE9BQU8sQ0FBQ2dGLE1BQU0sQ0FBQ2pILGlCQUFpQmlDLE9BQU87UUFDOUQsR0FBRzVDO1FBRUgsdUJBQXVCO1FBQ3ZCLE1BQU02SCxlQUFlO1lBQ25CLElBQUl6SCxrQkFBa0J3QyxPQUFPLElBQUl2QyxTQUFTdUMsT0FBTyxFQUFFO2dCQUNqRHZDLFNBQVN1QyxPQUFPLENBQUNrRixZQUFZLENBQUM7b0JBQzVCakMsT0FBT3pGLGtCQUFrQndDLE9BQU8sQ0FBQ2tELFdBQVc7b0JBQzVDQyxRQUFRM0Ysa0JBQWtCd0MsT0FBTyxDQUFDb0QsWUFBWTtnQkFDaEQ7WUFDRjtRQUNGO1FBRUErQixPQUFPQyxnQkFBZ0IsQ0FBQyxVQUFVSDtRQUVsQyxPQUFPO1lBQ0xFLE9BQU9FLG1CQUFtQixDQUFDLFVBQVVKO1lBQ3JDSyxhQUFhbkI7WUFDYks7WUFDQXBHLE1BQU00RixNQUFNO1FBQ2Q7SUFDRixHQUFHO1FBQUM1RztLQUFVO0lBRWQscUJBQU8sOERBQUNtSTtRQUFJQyxLQUFLaEk7UUFBbUJpSSxXQUFVOzs7Ozs7QUFDaEQ7R0ExV2dCdEk7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvQ2FuZGxlc3RpY2tDaGFydC50c3g/OGQ0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XHJcbmltcG9ydCB7IFRpbWUsIElDaGFydEFwaSwgQ2hhcnRPcHRpb25zLCBEZWVwUGFydGlhbCwgTGluZVdpZHRoLCBCdXNpbmVzc0RheSwgVVRDVGltZXN0YW1wIH0gZnJvbSAnbGlnaHR3ZWlnaHQtY2hhcnRzJztcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0IH0gZnJvbSAnbGlnaHR3ZWlnaHQtY2hhcnRzJztcclxuaW1wb3J0IHsgZ2V0SGlzdG9yaWNhbERhdGEsIHN1YnNjcmliZVRvUHJpY2UsIFRpbWVmcmFtZSB9IGZyb20gJ0Avc2VydmljZXMvYXBpL2NyeXB0b0NvbXBhcmVBUEknO1xyXG5pbXBvcnQgeyBTdHJhdGVneUlkLCBnZXRTdHJhdGVneSB9IGZyb20gJ0Avc2VydmljZXMvc3RyYXRlZ2llcyc7XHJcbmltcG9ydCB7IGNhbGN1bGF0ZUVNQSB9IGZyb20gJ0Avc2VydmljZXMvc3RyYXRlZ2llcy9lbWEtY3Jvc3NvdmVyJztcclxuaW1wb3J0IHsgY2FsY3VsYXRlU01BIH0gZnJvbSAnQC9zZXJ2aWNlcy9zdHJhdGVnaWVzL3NtYS1jcm9zc292ZXInO1xyXG5cclxuaW50ZXJmYWNlIENhbmRsZXN0aWNrQ2hhcnRQcm9wcyB7XHJcbiAgdGltZWZyYW1lOiBUaW1lZnJhbWU7XHJcbiAgc3RyYXRlZ3k6IFN0cmF0ZWd5SWQ7XHJcbiAgdG9rZW46IHN0cmluZztcclxuICBleGNoYW5nZTogJ3VuaXN3YXAnIHwgJ3JheWRpdW0nIHwgJ2NvaW5iYXNlJztcclxufVxyXG5cclxuaW50ZXJmYWNlIENhbmRsZSB7XHJcbiAgdGltZTogVGltZTtcclxuICBvcGVuOiBudW1iZXI7XHJcbiAgaGlnaDogbnVtYmVyO1xyXG4gIGxvdzogbnVtYmVyO1xyXG4gIGNsb3NlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDYW5kbGVzdGlja0NoYXJ0KHsgdGltZWZyYW1lLCBzdHJhdGVneSwgdG9rZW4sIGV4Y2hhbmdlIH06IENhbmRsZXN0aWNrQ2hhcnRQcm9wcykge1xyXG4gIGNvbnN0IGNoYXJ0Q29udGFpbmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcclxuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZjxJQ2hhcnRBcGkgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBjYW5kbGVzdGlja1Nlcmllc1JlZiA9IHVzZVJlZjxhbnk+KG51bGwpO1xyXG4gIGNvbnN0IGluZGljYXRvclNlcmllc1JlZnMgPSB1c2VSZWY8TWFwPHN0cmluZywgYW55Pj4obmV3IE1hcCgpKTtcclxuICBjb25zdCBtYXJrZXJTZXJpZXNSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcclxuICBjb25zdCBoaXN0b3JpY2FsRGF0YVJlZiA9IHVzZVJlZjxhbnlbXT4oW10pO1xyXG4gIGNvbnN0IGN1cnJlbnRDYW5kbGVSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcclxuICBjb25zdCBsYXN0U2lnbmFsUmVmID0gdXNlUmVmPHsgdGltZTogbnVtYmVyLCB0eXBlOiAnYnV5JyB8ICdzZWxsJyB9IHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIC8vIEZ1bmN0aW9uIHRvIGdldCBpbnRlcnZhbCBpbiBzZWNvbmRzXHJcbiAgY29uc3QgZ2V0SW50ZXJ2YWxTZWNvbmRzID0gKHRmOiBUaW1lZnJhbWUpOiBudW1iZXIgPT4ge1xyXG4gICAgc3dpdGNoICh0Zikge1xyXG4gICAgICBjYXNlICcxbSc6IHJldHVybiA2MDtcclxuICAgICAgY2FzZSAnNW0nOiByZXR1cm4gMzAwO1xyXG4gICAgICBjYXNlICcxNW0nOiByZXR1cm4gOTAwO1xyXG4gICAgICBjYXNlICczMG0nOiByZXR1cm4gMTgwMDtcclxuICAgICAgY2FzZSAnMWgnOiByZXR1cm4gMzYwMDtcclxuICAgICAgY2FzZSAnNGgnOiByZXR1cm4gMTQ0MDA7XHJcbiAgICAgIGNhc2UgJzFkJzogcmV0dXJuIDg2NDAwO1xyXG4gICAgICBkZWZhdWx0OiByZXR1cm4gNjA7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gRnVuY3Rpb24gdG8gc2FmZWx5IHJlbW92ZSBhIHNlcmllc1xyXG4gIGNvbnN0IHNhZmVseVJlbW92ZVNlcmllcyA9IChjaGFydDogSUNoYXJ0QXBpLCBzZXJpZXM6IGFueSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHNlcmllcyAmJiBjaGFydCkge1xyXG4gICAgICAgIGNoYXJ0LnJlbW92ZVNlcmllcyhzZXJpZXMpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlbW92aW5nIHNlcmllczonLCBlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBGdW5jdGlvbiB0byBjaGVjayBmb3IgY3Jvc3NvdmVyIHNpZ25hbHNcclxuICBjb25zdCBjaGVja0ZvclNpZ25hbCA9IChcclxuICAgIHByZXZGYXN0OiBudW1iZXIsXHJcbiAgICBwcmV2U2xvdzogbnVtYmVyLFxyXG4gICAgY3VyckZhc3Q6IG51bWJlcixcclxuICAgIGN1cnJTbG93OiBudW1iZXIsXHJcbiAgICBjYW5kbGU6IGFueVxyXG4gICkgPT4ge1xyXG4gICAgaWYgKCFpc05hTihwcmV2RmFzdCkgJiYgIWlzTmFOKHByZXZTbG93KSAmJiAhaXNOYU4oY3VyckZhc3QpICYmICFpc05hTihjdXJyU2xvdykpIHtcclxuICAgICAgY29uc3QgY2FuZGxlSGVpZ2h0ID0gY2FuZGxlLmhpZ2ggLSBjYW5kbGUubG93O1xyXG4gICAgICAvLyBCdXkgc2lnbmFsOiBGYXN0IGNyb3NzZXMgYWJvdmUgU2xvd1xyXG4gICAgICBpZiAocHJldkZhc3QgPD0gcHJldlNsb3cgJiYgY3VyckZhc3QgPiBjdXJyU2xvdykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0aW1lOiBjYW5kbGUudGltZSxcclxuICAgICAgICAgIHBvc2l0aW9uOiAnYmVsb3dCYXInLFxyXG4gICAgICAgICAgY29sb3I6ICcjMjZhNjlhJyxcclxuICAgICAgICAgIHNoYXBlOiAnYXJyb3dVcCcsXHJcbiAgICAgICAgICB0ZXh0OiBgQnV5ICR7Y2FuZGxlLmNsb3NlLnRvRml4ZWQoMil9YCxcclxuICAgICAgICAgIHNpemU6IDIsXHJcbiAgICAgICAgICB2YWx1ZTogY2FuZGxlLmxvdyAtIGNhbmRsZUhlaWdodCAqIDAuNSwgLy8gSW5jcmVhc2VkIHNwYWNpbmcgYmVsb3cgY2FuZGxlXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICAvLyBTZWxsIHNpZ25hbDogRmFzdCBjcm9zc2VzIGJlbG93IFNsb3dcclxuICAgICAgZWxzZSBpZiAocHJldkZhc3QgPj0gcHJldlNsb3cgJiYgY3VyckZhc3QgPCBjdXJyU2xvdykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0aW1lOiBjYW5kbGUudGltZSxcclxuICAgICAgICAgIHBvc2l0aW9uOiAnYWJvdmVCYXInLFxyXG4gICAgICAgICAgY29sb3I6ICcjZWY1MzUwJyxcclxuICAgICAgICAgIHNoYXBlOiAnYXJyb3dEb3duJyxcclxuICAgICAgICAgIHRleHQ6IGBTZWxsICR7Y2FuZGxlLmNsb3NlLnRvRml4ZWQoMil9YCxcclxuICAgICAgICAgIHNpemU6IDIsXHJcbiAgICAgICAgICB2YWx1ZTogY2FuZGxlLmhpZ2ggKyBjYW5kbGVIZWlnaHQgKiAwLjUsIC8vIEluY3JlYXNlZCBzcGFjaW5nIGFib3ZlIGNhbmRsZVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH07XHJcblxyXG4gIC8vIEZ1bmN0aW9uIHRvIGFkZCBzdHJhdGVneSBpbmRpY2F0b3JzXHJcbiAgY29uc3QgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzID0gKGNoYXJ0OiBJQ2hhcnRBcGksIGRhdGE6IGFueVtdKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnQWRkaW5nIHN0cmF0ZWd5IGluZGljYXRvcnMnKTtcclxuICAgIFxyXG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGluZGljYXRvcnNcclxuICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5mb3JFYWNoKHNlcmllcyA9PiBzYWZlbHlSZW1vdmVTZXJpZXMoY2hhcnQsIHNlcmllcykpO1xyXG4gICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LmNsZWFyKCk7XHJcbiAgICBcclxuICAgIGlmIChtYXJrZXJTZXJpZXNSZWYuY3VycmVudCkge1xyXG4gICAgICBzYWZlbHlSZW1vdmVTZXJpZXMoY2hhcnQsIG1hcmtlclNlcmllc1JlZi5jdXJyZW50KTtcclxuICAgICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzdHJhdGVneSA9PT0gJ25vbmUnKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgcHJpY2VzID0gZGF0YS5tYXAoZCA9PiBkLmNsb3NlKTtcclxuICAgIGNvbnN0IGZhc3RQZXJpb2QgPSA5O1xyXG4gICAgY29uc3Qgc2xvd1BlcmlvZCA9IDIxO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBNQXNcclxuICAgIGNvbnN0IGZhc3RNQSA9IHN0cmF0ZWd5ID09PSAnZW1hX2Nyb3Nzb3ZlcicgXHJcbiAgICAgID8gY2FsY3VsYXRlRU1BKHByaWNlcywgZmFzdFBlcmlvZClcclxuICAgICAgOiBjYWxjdWxhdGVTTUEocHJpY2VzLCBmYXN0UGVyaW9kKTtcclxuICAgIGNvbnN0IHNsb3dNQSA9IHN0cmF0ZWd5ID09PSAnZW1hX2Nyb3Nzb3ZlcidcclxuICAgICAgPyBjYWxjdWxhdGVFTUEocHJpY2VzLCBzbG93UGVyaW9kKVxyXG4gICAgICA6IGNhbGN1bGF0ZVNNQShwcmljZXMsIHNsb3dQZXJpb2QpO1xyXG5cclxuICAgIC8vIEFkZCBNQSBsaW5lc1xyXG4gICAgY29uc3QgZmFzdFNlcmllcyA9IGNoYXJ0LmFkZExpbmVTZXJpZXMoe1xyXG4gICAgICBjb2xvcjogJyMyOTYyRkYnLFxyXG4gICAgICBsaW5lV2lkdGg6IDIsXHJcbiAgICAgIHRpdGxlOiAnRmFzdCBNQScsXHJcbiAgICAgIHByaWNlRm9ybWF0OiB7XHJcbiAgICAgICAgdHlwZTogJ3ByaWNlJyxcclxuICAgICAgICBwcmVjaXNpb246IDIsXHJcbiAgICAgICAgbWluTW92ZTogMC4wMSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2xvd1NlcmllcyA9IGNoYXJ0LmFkZExpbmVTZXJpZXMoe1xyXG4gICAgICBjb2xvcjogJyNGRjZCNkInLFxyXG4gICAgICBsaW5lV2lkdGg6IDIsXHJcbiAgICAgIHRpdGxlOiAnU2xvdyBNQScsXHJcbiAgICAgIHByaWNlRm9ybWF0OiB7XHJcbiAgICAgICAgdHlwZTogJ3ByaWNlJyxcclxuICAgICAgICBwcmVjaXNpb246IDIsXHJcbiAgICAgICAgbWluTW92ZTogMC4wMSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFN0b3JlIHJlZnNcclxuICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5zZXQoJ0Zhc3QgTUEnLCBmYXN0U2VyaWVzKTtcclxuICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5zZXQoJ1Nsb3cgTUEnLCBzbG93U2VyaWVzKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgbWFya2VyIHNlcmllc1xyXG4gICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBjaGFydC5hZGRMaW5lU2VyaWVzKHtcclxuICAgICAgbGFzdFZhbHVlVmlzaWJsZTogZmFsc2UsXHJcbiAgICAgIHByaWNlTGluZVZpc2libGU6IGZhbHNlLFxyXG4gICAgICBjcm9zc2hhaXJNYXJrZXJWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxyXG4gICAgICBsaW5lV2lkdGg6IDEgYXMgTGluZVdpZHRoLFxyXG4gICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gU2V0IE1BIGRhdGFcclxuICAgIGNvbnN0IG1hRGF0YSA9IGRhdGEubWFwKChjYW5kbGUsIGkpID0+ICh7XHJcbiAgICAgIHRpbWU6IGNhbmRsZS50aW1lLFxyXG4gICAgICB2YWx1ZTogZmFzdE1BW2ldXHJcbiAgICB9KSkuZmlsdGVyKGQgPT4gIWlzTmFOKGQudmFsdWUpKTtcclxuICAgIFxyXG4gICAgY29uc3Qgc2xvd0RhdGEgPSBkYXRhLm1hcCgoY2FuZGxlLCBpKSA9PiAoe1xyXG4gICAgICB0aW1lOiBjYW5kbGUudGltZSxcclxuICAgICAgdmFsdWU6IHNsb3dNQVtpXVxyXG4gICAgfSkpLmZpbHRlcihkID0+ICFpc05hTihkLnZhbHVlKSk7XHJcblxyXG4gICAgZmFzdFNlcmllcy5zZXREYXRhKG1hRGF0YSk7XHJcbiAgICBzbG93U2VyaWVzLnNldERhdGEoc2xvd0RhdGEpO1xyXG5cclxuICAgIC8vIEZpbmQgYW5kIHNldCBzaWduYWxzXHJcbiAgICBjb25zdCBzaWduYWxzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgc2lnbmFsID0gY2hlY2tGb3JTaWduYWwoXHJcbiAgICAgICAgZmFzdE1BW2kgLSAxXSxcclxuICAgICAgICBzbG93TUFbaSAtIDFdLFxyXG4gICAgICAgIGZhc3RNQVtpXSxcclxuICAgICAgICBzbG93TUFbaV0sXHJcbiAgICAgICAgZGF0YVtpXVxyXG4gICAgICApO1xyXG4gICAgICBpZiAoc2lnbmFsKSB7XHJcbiAgICAgICAgc2lnbmFscy5wdXNoKHNpZ25hbCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7c2lnbmFsLnRleHR9IHNpZ25hbCBhdCAke25ldyBEYXRlKHNpZ25hbC50aW1lICogMTAwMCkudG9Mb2NhbGVTdHJpbmcoKX1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChzaWduYWxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc29sZS5sb2coYFNldHRpbmcgJHtzaWduYWxzLmxlbmd0aH0gaGlzdG9yaWNhbCBzaWduYWxzYCk7XHJcbiAgICAgIG1hcmtlclNlcmllc1JlZi5jdXJyZW50LnNldE1hcmtlcnMoc2lnbmFscyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBTZXQgYSBkYXRhIHBvaW50IGZvciBlYWNoIHNpZ25hbCB0byBlbnN1cmUgcHJvcGVyIHBvc2l0aW9uaW5nXHJcbiAgICAgIG1hcmtlclNlcmllc1JlZi5jdXJyZW50LnNldERhdGEoc2lnbmFscy5tYXAoc2lnbmFsID0+ICh7XHJcbiAgICAgICAgdGltZTogc2lnbmFsLnRpbWUsXHJcbiAgICAgICAgdmFsdWU6IHNpZ25hbC52YWx1ZVxyXG4gICAgICB9KSkpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIE1vZGlmeSB0aGUgcmVhbC10aW1lIHNpZ25hbCBjaGVja1xyXG4gIGNvbnN0IGNoZWNrUmVhbFRpbWVTaWduYWwgPSAoZGF0YTogYW55W10pID0+IHtcclxuICAgIGlmICghbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgfHwgZGF0YS5sZW5ndGggPCAyKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgcHJpY2VzID0gZGF0YS5tYXAoZCA9PiBkLmNsb3NlKTtcclxuICAgIGNvbnN0IGZhc3RQZXJpb2QgPSA5O1xyXG4gICAgY29uc3Qgc2xvd1BlcmlvZCA9IDIxO1xyXG5cclxuICAgIGNvbnN0IGZhc3RNQSA9IHN0cmF0ZWd5ID09PSAnZW1hX2Nyb3Nzb3ZlcicgXHJcbiAgICAgID8gY2FsY3VsYXRlRU1BKHByaWNlcywgZmFzdFBlcmlvZClcclxuICAgICAgOiBjYWxjdWxhdGVTTUEocHJpY2VzLCBmYXN0UGVyaW9kKTtcclxuICAgIGNvbnN0IHNsb3dNQSA9IHN0cmF0ZWd5ID09PSAnZW1hX2Nyb3Nzb3ZlcidcclxuICAgICAgPyBjYWxjdWxhdGVFTUEocHJpY2VzLCBzbG93UGVyaW9kKVxyXG4gICAgICA6IGNhbGN1bGF0ZVNNQShwcmljZXMsIHNsb3dQZXJpb2QpO1xyXG5cclxuICAgIGNvbnN0IHNpZ25hbCA9IGNoZWNrRm9yU2lnbmFsKFxyXG4gICAgICBmYXN0TUFbZmFzdE1BLmxlbmd0aCAtIDJdLFxyXG4gICAgICBzbG93TUFbc2xvd01BLmxlbmd0aCAtIDJdLFxyXG4gICAgICBmYXN0TUFbZmFzdE1BLmxlbmd0aCAtIDFdLFxyXG4gICAgICBzbG93TUFbc2xvd01BLmxlbmd0aCAtIDFdLFxyXG4gICAgICBkYXRhW2RhdGEubGVuZ3RoIC0gMV1cclxuICAgICk7XHJcblxyXG4gICAgaWYgKHNpZ25hbCkge1xyXG4gICAgICBjb25zdCBleGlzdGluZ01hcmtlcnMgPSBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5tYXJrZXJzKCkgfHwgW107XHJcbiAgICAgIGNvbnNvbGUubG9nKGBBZGRpbmcgcmVhbC10aW1lICR7c2lnbmFsLnRleHR9IHNpZ25hbGApO1xyXG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXRNYXJrZXJzKFsuLi5leGlzdGluZ01hcmtlcnMsIHNpZ25hbF0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIEVmZmVjdCBmb3Igc3RyYXRlZ3kgY2hhbmdlc1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoY2hhcnRSZWYuY3VycmVudCAmJiBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzKGNoYXJ0UmVmLmN1cnJlbnQsIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQpO1xyXG4gICAgfVxyXG4gIH0sIFtzdHJhdGVneV0pO1xyXG5cclxuICAvLyBNYWluIGNoYXJ0IGluaXRpYWxpemF0aW9uIGVmZmVjdFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIWNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBjaGFydCA9IGNyZWF0ZUNoYXJ0KGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQsIHtcclxuICAgICAgbGF5b3V0OiB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogeyBjb2xvcjogJyMxRTIyMkQnIH0sXHJcbiAgICAgICAgdGV4dENvbG9yOiAnI0RERCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIGdyaWQ6IHtcclxuICAgICAgICB2ZXJ0TGluZXM6IHsgY29sb3I6ICcjMkIyQjQzJyB9LFxyXG4gICAgICAgIGhvcnpMaW5lczogeyBjb2xvcjogJyMyQjJCNDMnIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHRpbWVTY2FsZToge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXHJcbiAgICAgICAgdGltZVZpc2libGU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0UHJpY2VTY2FsZToge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZHRoOiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY2FuZGxlc3RpY2tTZXJpZXMgPSBjaGFydC5hZGRDYW5kbGVzdGlja1Nlcmllcyh7XHJcbiAgICAgIHVwQ29sb3I6ICcjMjZhNjlhJyxcclxuICAgICAgZG93bkNvbG9yOiAnI2VmNTM1MCcsXHJcbiAgICAgIGJvcmRlclZpc2libGU6IGZhbHNlLFxyXG4gICAgICB3aWNrVXBDb2xvcjogJyMyNmE2OWEnLFxyXG4gICAgICB3aWNrRG93bkNvbG9yOiAnI2VmNTM1MCcsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjYW5kbGVzdGlja1Nlcmllc1JlZi5jdXJyZW50ID0gY2FuZGxlc3RpY2tTZXJpZXM7XHJcbiAgICBjaGFydFJlZi5jdXJyZW50ID0gY2hhcnQ7XHJcblxyXG4gICAgLy8gUmVtb3ZlIFRyYWRpbmdWaWV3IGxvZ28gZWxlbWVudHNcclxuICAgIGNvbnN0IHJlbW92ZVRyYWRpbmdWaWV3TG9nbyA9ICgpID0+IHtcclxuICAgICAgY29uc3QgbG9nb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHYtYXR0ci1sb2dvJyk7XHJcbiAgICAgIGlmIChsb2dvRWxlbWVudCkge1xyXG4gICAgICAgIGxvZ29FbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBoZWFkZXJMb2dvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnR2LWhlYWRlcl9fbGluaycpO1xyXG4gICAgICBpZiAoaGVhZGVyTG9nbykge1xyXG4gICAgICAgIGhlYWRlckxvZ28ucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gUnVuIGxvZ28gcmVtb3ZhbCBhZnRlciBjaGFydCBpcyBjcmVhdGVkIGFuZCBhZnRlciBhIGRlbGF5XHJcbiAgICByZW1vdmVUcmFkaW5nVmlld0xvZ28oKTtcclxuICAgIGNvbnN0IGxvZ29UaW1lb3V0SWQgPSBzZXRUaW1lb3V0KHJlbW92ZVRyYWRpbmdWaWV3TG9nbywgMTAwKTtcclxuXHJcbiAgICAvLyBMb2FkIGluaXRpYWwgZGF0YVxyXG4gICAgY29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldEhpc3RvcmljYWxEYXRhKHRpbWVmcmFtZSk7XHJcbiAgICAgICAgaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudCA9IGRhdGE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2FuZGxlc3RpY2tTZXJpZXMuc2V0RGF0YShkYXRhKTtcclxuXHJcbiAgICAgICAgaWYgKHN0cmF0ZWd5ICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgIGFkZFN0cmF0ZWd5SW5kaWNhdG9ycyhjaGFydCwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIGN1cnJlbnQgY2FuZGxlIGZyb20gbGFzdCBoaXN0b3JpY2FsIGNhbmRsZVxyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGxhc3RDYW5kbGUgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQgPSB7XHJcbiAgICAgICAgICAgIHRpbWU6IGxhc3RDYW5kbGUudGltZSxcclxuICAgICAgICAgICAgb3BlbjogbGFzdENhbmRsZS5jbG9zZSxcclxuICAgICAgICAgICAgaGlnaDogbGFzdENhbmRsZS5jbG9zZSxcclxuICAgICAgICAgICAgbG93OiBsYXN0Q2FuZGxlLmNsb3NlLFxyXG4gICAgICAgICAgICBjbG9zZTogbGFzdENhbmRsZS5jbG9zZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBkYXRhOicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBsb2FkRGF0YSgpO1xyXG5cclxuICAgIC8vIFJlYWwtdGltZSB1cGRhdGVzXHJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHN1YnNjcmliZVRvUHJpY2UoKGRhdGEpID0+IHtcclxuICAgICAgaWYgKCFjYW5kbGVzdGlja1Nlcmllc1JlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgICBjb25zdCBpbnRlcnZhbFNlY29uZHMgPSBnZXRJbnRlcnZhbFNlY29uZHModGltZWZyYW1lKTtcclxuICAgICAgY29uc3QgY2FuZGxlVGltZXN0YW1wID0gTWF0aC5mbG9vcihkYXRhLnRpbWUgLyBpbnRlcnZhbFNlY29uZHMpICogaW50ZXJ2YWxTZWNvbmRzO1xyXG5cclxuICAgICAgLy8gSWYgdGhpcyBpcyBhIG5ldyBjYW5kbGVcclxuICAgICAgaWYgKCFjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQgfHwgY2FuZGxlVGltZXN0YW1wICE9PSBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQudGltZSkge1xyXG4gICAgICAgIC8vIElmIHdlIGhhZCBhIHByZXZpb3VzIGNhbmRsZSwgYWRkIGl0IHRvIGhpc3RvcmljYWwgZGF0YSBhbmQgY2hlY2sgZm9yIHNpZ25hbHNcclxuICAgICAgICBpZiAoY3VycmVudENhbmRsZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50ID0gWy4uLmhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQsIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudF07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFVwZGF0ZSBzdHJhdGVnaWVzIHdpdGggdGhlIG5ldyBoaXN0b3JpY2FsIGRhdGFcclxuICAgICAgICAgIGlmIChzdHJhdGVneSAhPT0gJ25vbmUnICYmIGNoYXJ0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzKGNoYXJ0UmVmLmN1cnJlbnQsIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RhcnQgbmV3IGNhbmRsZVxyXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCA9IHtcclxuICAgICAgICAgIHRpbWU6IGNhbmRsZVRpbWVzdGFtcCxcclxuICAgICAgICAgIG9wZW46IGRhdGEudmFsdWUsXHJcbiAgICAgICAgICBoaWdoOiBkYXRhLnZhbHVlLFxyXG4gICAgICAgICAgbG93OiBkYXRhLnZhbHVlLFxyXG4gICAgICAgICAgY2xvc2U6IGRhdGEudmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IGNhbmRsZVxyXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5oaWdoID0gTWF0aC5tYXgoY3VycmVudENhbmRsZVJlZi5jdXJyZW50LmhpZ2gsIGRhdGEudmFsdWUpO1xyXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5sb3cgPSBNYXRoLm1pbihjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQubG93LCBkYXRhLnZhbHVlKTtcclxuICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQuY2xvc2UgPSBkYXRhLnZhbHVlO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBmb3IgcmVhbC10aW1lIHNpZ25hbHMgd2l0aCBjdXJyZW50IGNhbmRsZVxyXG4gICAgICAgIGlmIChzdHJhdGVneSAhPT0gJ25vbmUnICYmIGNoYXJ0UmVmLmN1cnJlbnQgJiYgaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IFsuLi5oaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50LCBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnRdO1xyXG4gICAgICAgICAgY2hlY2tSZWFsVGltZVNpZ25hbCh1cGRhdGVkRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgdGhlIGNoYXJ0IHdpdGggY3VycmVudCBjYW5kbGVcclxuICAgICAgY2FuZGxlc3RpY2tTZXJpZXNSZWYuY3VycmVudC51cGRhdGUoY3VycmVudENhbmRsZVJlZi5jdXJyZW50KTtcclxuICAgIH0sIHRpbWVmcmFtZSk7XHJcblxyXG4gICAgLy8gSGFuZGxlIHdpbmRvdyByZXNpemVcclxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQgJiYgY2hhcnRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNoYXJ0UmVmLmN1cnJlbnQuYXBwbHlPcHRpb25zKHtcclxuICAgICAgICAgIHdpZHRoOiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICAgICAgaGVpZ2h0OiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuICAgICAgY2xlYXJUaW1lb3V0KGxvZ29UaW1lb3V0SWQpO1xyXG4gICAgICB1bnN1YnNjcmliZSgpO1xyXG4gICAgICBjaGFydC5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgfSwgW3RpbWVmcmFtZV0pO1xyXG5cclxuICByZXR1cm4gPGRpdiByZWY9e2NoYXJ0Q29udGFpbmVyUmVmfSBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCIgLz47XHJcbn0gIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVJlZiIsImNyZWF0ZUNoYXJ0IiwiZ2V0SGlzdG9yaWNhbERhdGEiLCJzdWJzY3JpYmVUb1ByaWNlIiwiY2FsY3VsYXRlRU1BIiwiY2FsY3VsYXRlU01BIiwiQ2FuZGxlc3RpY2tDaGFydCIsInRpbWVmcmFtZSIsInN0cmF0ZWd5IiwidG9rZW4iLCJleGNoYW5nZSIsImNoYXJ0Q29udGFpbmVyUmVmIiwiY2hhcnRSZWYiLCJjYW5kbGVzdGlja1Nlcmllc1JlZiIsImluZGljYXRvclNlcmllc1JlZnMiLCJNYXAiLCJtYXJrZXJTZXJpZXNSZWYiLCJoaXN0b3JpY2FsRGF0YVJlZiIsImN1cnJlbnRDYW5kbGVSZWYiLCJsYXN0U2lnbmFsUmVmIiwiZ2V0SW50ZXJ2YWxTZWNvbmRzIiwidGYiLCJzYWZlbHlSZW1vdmVTZXJpZXMiLCJjaGFydCIsInNlcmllcyIsInJlbW92ZVNlcmllcyIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJjaGVja0ZvclNpZ25hbCIsInByZXZGYXN0IiwicHJldlNsb3ciLCJjdXJyRmFzdCIsImN1cnJTbG93IiwiY2FuZGxlIiwiaXNOYU4iLCJjYW5kbGVIZWlnaHQiLCJoaWdoIiwibG93IiwidGltZSIsInBvc2l0aW9uIiwiY29sb3IiLCJzaGFwZSIsInRleHQiLCJjbG9zZSIsInRvRml4ZWQiLCJzaXplIiwidmFsdWUiLCJhZGRTdHJhdGVneUluZGljYXRvcnMiLCJkYXRhIiwibG9nIiwiY3VycmVudCIsImZvckVhY2giLCJjbGVhciIsInByaWNlcyIsIm1hcCIsImQiLCJmYXN0UGVyaW9kIiwic2xvd1BlcmlvZCIsImZhc3RNQSIsInNsb3dNQSIsImZhc3RTZXJpZXMiLCJhZGRMaW5lU2VyaWVzIiwibGluZVdpZHRoIiwidGl0bGUiLCJwcmljZUZvcm1hdCIsInR5cGUiLCJwcmVjaXNpb24iLCJtaW5Nb3ZlIiwic2xvd1NlcmllcyIsInNldCIsImxhc3RWYWx1ZVZpc2libGUiLCJwcmljZUxpbmVWaXNpYmxlIiwiY3Jvc3NoYWlyTWFya2VyVmlzaWJsZSIsImxpbmVWaXNpYmxlIiwibWFEYXRhIiwiaSIsImZpbHRlciIsInNsb3dEYXRhIiwic2V0RGF0YSIsInNpZ25hbHMiLCJsZW5ndGgiLCJzaWduYWwiLCJwdXNoIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwic2V0TWFya2VycyIsImNoZWNrUmVhbFRpbWVTaWduYWwiLCJleGlzdGluZ01hcmtlcnMiLCJtYXJrZXJzIiwibGF5b3V0IiwiYmFja2dyb3VuZCIsInRleHRDb2xvciIsImdyaWQiLCJ2ZXJ0TGluZXMiLCJob3J6TGluZXMiLCJ0aW1lU2NhbGUiLCJib3JkZXJDb2xvciIsInRpbWVWaXNpYmxlIiwicmlnaHRQcmljZVNjYWxlIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsImNhbmRsZXN0aWNrU2VyaWVzIiwiYWRkQ2FuZGxlc3RpY2tTZXJpZXMiLCJ1cENvbG9yIiwiZG93bkNvbG9yIiwiYm9yZGVyVmlzaWJsZSIsIndpY2tVcENvbG9yIiwid2lja0Rvd25Db2xvciIsInJlbW92ZVRyYWRpbmdWaWV3TG9nbyIsImxvZ29FbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlbW92ZSIsImhlYWRlckxvZ28iLCJxdWVyeVNlbGVjdG9yIiwibG9nb1RpbWVvdXRJZCIsInNldFRpbWVvdXQiLCJsb2FkRGF0YSIsImxhc3RDYW5kbGUiLCJvcGVuIiwidW5zdWJzY3JpYmUiLCJpbnRlcnZhbFNlY29uZHMiLCJjYW5kbGVUaW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJtYXgiLCJtaW4iLCJ1cGRhdGVkRGF0YSIsInVwZGF0ZSIsImhhbmRsZVJlc2l6ZSIsImFwcGx5T3B0aW9ucyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xlYXJUaW1lb3V0IiwiZGl2IiwicmVmIiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ })

});