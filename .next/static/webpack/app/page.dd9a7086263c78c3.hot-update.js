"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* harmony import */ var _services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/moving-averages */ \"(app-pages-browser)/./src/services/strategies/moving-averages.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy, token, exchange } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSignalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Function to get interval in seconds\n    const getIntervalSeconds = (tf)=>{\n        switch(tf){\n            case \"1m\":\n                return 60;\n            case \"5m\":\n                return 300;\n            case \"15m\":\n                return 900;\n            case \"30m\":\n                return 1800;\n            case \"1h\":\n                return 3600;\n            case \"4h\":\n                return 14400;\n            case \"1d\":\n                return 86400;\n            default:\n                return 60;\n        }\n    };\n    // Function to safely remove a series\n    const safelyRemoveSeries = (chart, series)=>{\n        try {\n            if (series && chart) {\n                chart.removeSeries(series);\n            }\n        } catch (e) {\n            console.error(\"Error removing series:\", e);\n        }\n    };\n    // Function to check for crossover signals\n    const checkForSignal = (prevFast, prevSlow, currFast, currSlow, candle, data)=>{\n        if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n            // Calculate average price and range for better positioning\n            const avgPrice = data.reduce((sum, d)=>sum + d.close, 0) / data.length;\n            const priceRange = data.reduce((range, d)=>Math.max(range, Math.abs(d.high - d.low)), 0);\n            const offset = priceRange * 0.75; // Use a percentage of the price range for consistent spacing\n            // Buy signal: Fast crosses above Slow\n            if (prevFast <= prevSlow && currFast > currSlow) {\n                return {\n                    time: candle.time,\n                    position: \"belowBar\",\n                    color: \"#26a69a\",\n                    shape: \"arrowUp\",\n                    text: \"Buy \".concat(candle.close.toFixed(2)),\n                    size: 2,\n                    value: Math.min(...data.slice(-10).map((d)=>d.low)) - offset\n                };\n            } else if (prevFast >= prevSlow && currFast < currSlow) {\n                return {\n                    time: candle.time,\n                    position: \"aboveBar\",\n                    color: \"#ef5350\",\n                    shape: \"arrowDown\",\n                    text: \"Sell \".concat(candle.close.toFixed(2)),\n                    size: 2,\n                    value: Math.max(...data.slice(-10).map((d)=>d.high)) + offset\n                };\n            }\n        }\n        return null;\n    };\n    // Function to add strategy indicators\n    const addStrategyIndicators = (chart, data)=>{\n        console.log(\"Adding strategy indicators\");\n        // Clear any existing indicators\n        indicatorSeriesRefs.current.forEach((series)=>safelyRemoveSeries(chart, series));\n        indicatorSeriesRefs.current.clear();\n        if (markerSeriesRef.current) {\n            safelyRemoveSeries(chart, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n        }\n        if (strategy === \"none\") return;\n        // Ensure data is sorted and deduplicated by time\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        let histogramData = [];\n        // Calculate indicators based on strategy type\n        if (strategy === \"macd_crossover\") {\n            const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n            fastLine = macdData.macd;\n            slowLine = macdData.signal;\n            histogramData = macdData.histogram;\n        } else {\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n        }\n        // Add indicator lines\n        const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n        if (!selectedStrategy) return;\n        if (strategy === \"macd_crossover\") {\n            // Create MACD series\n            const macdSeries = chart.addLineSeries({\n                color: \"#2962FF\",\n                lineWidth: 2,\n                title: \"MACD\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: 2,\n                    minMove: 0.01\n                },\n                priceScaleId: \"left\"\n            });\n            const signalSeries = chart.addLineSeries({\n                color: \"#FF6B6B\",\n                lineWidth: 2,\n                title: \"Signal\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: 2,\n                    minMove: 0.01\n                },\n                priceScaleId: \"left\"\n            });\n            const histogramSeries = chart.addHistogramSeries({\n                color: \"#26a69a\",\n                title: \"Histogram\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: 2,\n                    minMove: 0.01\n                },\n                priceScaleId: \"left\"\n            });\n            indicatorSeriesRefs.current.set(\"MACD\", macdSeries);\n            indicatorSeriesRefs.current.set(\"Signal\", signalSeries);\n            indicatorSeriesRefs.current.set(\"Histogram\", histogramSeries);\n            // Set data for each series\n            const macdLineData = fastLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            const signalLineData = slowLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            const histogramSeriesData = histogramData.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value,\n                    color: value >= 0 ? \"#26a69a\" : \"#ef5350\"\n                })).filter((d)=>d.value !== null);\n            macdSeries.setData(macdLineData);\n            signalSeries.setData(signalLineData);\n            histogramSeries.setData(histogramSeriesData);\n        } else {\n            // Handle other strategies\n            const colors = [\n                \"#2962FF\",\n                \"#FF6B6B\"\n            ]; // Blue for fast, Red for slow\n            selectedStrategy.indicators.forEach((indicator, index)=>{\n                const lineSeries = chart.addLineSeries({\n                    color: colors[index],\n                    lineWidth: 2,\n                    title: indicator.name,\n                    priceFormat: {\n                        type: \"price\",\n                        precision: 2,\n                        minMove: 0.01\n                    }\n                });\n                indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n                // Set indicator data\n                const lineData = (index === 0 ? fastLine : slowLine).map((value, idx)=>({\n                        time: uniqueData[idx].time,\n                        value: isNaN(value) ? null : value\n                    })).filter((d)=>d.value !== null).sort((a, b)=>a.time - b.time);\n                lineSeries.setData(lineData);\n            });\n        }\n        // Create marker series\n        markerSeriesRef.current = chart.addLineSeries({\n            lastValueVisible: false,\n            priceLineVisible: false,\n            crosshairMarkerVisible: false,\n            lineVisible: false,\n            lineWidth: 1,\n            color: \"rgba(0, 0, 0, 0)\",\n            priceScaleId: strategy === \"macd_crossover\" ? \"left\" : \"right\"\n        });\n        // Find and set signals\n        const signals = [];\n        for(let i = 1; i < uniqueData.length; i++){\n            const signal = checkForSignal(fastLine[i - 1], slowLine[i - 1], fastLine[i], slowLine[i], uniqueData[i], uniqueData.slice(Math.max(0, i - 10), i + 1));\n            if (signal) {\n                signals.push(signal);\n            }\n        }\n        if (signals.length > 0) {\n            const sortedSignals = signals.sort((a, b)=>a.time - b.time);\n            markerSeriesRef.current.setMarkers(sortedSignals);\n            markerSeriesRef.current.setData(sortedSignals.map((signal)=>({\n                    time: signal.time,\n                    value: signal.value\n                })));\n        }\n    };\n    // Modify the real-time signal check\n    const checkRealTimeSignal = (data)=>{\n        if (!markerSeriesRef.current || data.length < 2) return;\n        // Ensure data is sorted and deduplicated\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        // Calculate indicators based on strategy type\n        switch(strategy){\n            case \"ema_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                break;\n            case \"sma_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                break;\n            case \"tema_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                break;\n            case \"golden_cross\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                break;\n            case \"hull_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                break;\n            case \"ema_5_13\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                break;\n            case \"macd_crossover\":\n                const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n                fastLine = macdData.macd;\n                slowLine = macdData.signal;\n                break;\n        }\n        const signal = checkForSignal(fastLine[fastLine.length - 2], slowLine[slowLine.length - 2], fastLine[fastLine.length - 1], slowLine[slowLine.length - 1], uniqueData[uniqueData.length - 1], uniqueData.slice(-10));\n        if (signal) {\n            const existingMarkers = markerSeriesRef.current.markers() || [];\n            const newMarkers = [\n                ...existingMarkers,\n                signal\n            ].sort((a, b)=>a.time - b.time);\n            console.log(\"Adding real-time \".concat(signal.text, \" signal\"));\n            markerSeriesRef.current.setMarkers(newMarkers);\n            // Update marker series data\n            markerSeriesRef.current.setData(newMarkers.map((marker)=>({\n                    time: marker.time,\n                    value: marker.value\n                })));\n        }\n    };\n    // Effect for strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (chartRef.current && historicalDataRef.current.length > 0) {\n            addStrategyIndicators(chartRef.current, historicalDataRef.current);\n        }\n    }, [\n        strategy\n    ]);\n    // Main chart initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\",\n                visible: true,\n                scaleMargins: {\n                    top: 0.1,\n                    bottom: 0.2\n                }\n            },\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, chartOptions);\n        // Create price scales\n        if (strategy === \"macd_crossover\") {\n            chart.applyOptions({\n                leftPriceScale: {\n                    visible: true,\n                    scaleMargins: {\n                        top: 0.7,\n                        bottom: 0.1\n                    }\n                }\n            });\n        }\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\",\n            priceScaleId: \"right\"\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Remove TradingView logo elements\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created and after a delay\n        removeTradingViewLogo();\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        // Load initial data\n        const loadData = async ()=>{\n            try {\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n                // Initialize current candle from last historical candle\n                if (data.length > 0) {\n                    const lastCandle = data[data.length - 1];\n                    currentCandleRef.current = {\n                        time: lastCandle.time,\n                        open: lastCandle.close,\n                        high: lastCandle.close,\n                        low: lastCandle.close,\n                        close: lastCandle.close\n                    };\n                }\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadData();\n        // Real-time updates\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (!candlestickSeriesRef.current) return;\n            const intervalSeconds = getIntervalSeconds(timeframe);\n            const candleTimestamp = Math.floor(data.time / intervalSeconds) * intervalSeconds;\n            // If this is a new candle\n            if (!currentCandleRef.current || candleTimestamp !== currentCandleRef.current.time) {\n                // If we had a previous candle, add it to historical data and check for signals\n                if (currentCandleRef.current) {\n                    historicalDataRef.current = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    // Update strategies with the new historical data\n                    if (strategy !== \"none\" && chartRef.current) {\n                        addStrategyIndicators(chartRef.current, historicalDataRef.current);\n                    }\n                }\n                // Start new candle\n                currentCandleRef.current = {\n                    time: candleTimestamp,\n                    open: data.value,\n                    high: data.value,\n                    low: data.value,\n                    close: data.value\n                };\n            } else {\n                // Update current candle\n                currentCandleRef.current.high = Math.max(currentCandleRef.current.high, data.value);\n                currentCandleRef.current.low = Math.min(currentCandleRef.current.low, data.value);\n                currentCandleRef.current.close = data.value;\n                // Check for real-time signals with current candle\n                if (strategy !== \"none\" && chartRef.current && historicalDataRef.current.length > 0) {\n                    const updatedData = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    checkRealTimeSignal(updatedData);\n                }\n            }\n            // Update the chart with current candle\n            candlestickSeriesRef.current.update(currentCandleRef.current);\n        }, timeframe);\n        // Handle window resize\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            chart.remove();\n        };\n    }, [\n        timeframe\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: chartContainerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 543,\n        columnNumber: 10\n    }, this);\n}\n_s(CandlestickChart, \"b+lEihv/5eOeyLxDEr+YsOXIV6U=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ })

});