"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [currentPrice, setCurrentPrice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const candleSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            crosshair: {\n                mode: 1,\n                vertLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                },\n                horzLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true,\n                secondsVisible: false,\n                fixLeftEdge: true,\n                rightOffset: 12,\n                barSpacing: 6,\n                minBarSpacing: 2,\n                rightBarStaysOnScroll: true,\n                lockVisibleTimeRangeOnResize: true,\n                tickMarkFormatter: (time)=>{\n                    const date = new Date(time * 1000);\n                    if (timeframe === \"1d\" || timeframe === \"1w\") {\n                        return date.toLocaleDateString();\n                    }\n                    return date.toLocaleTimeString([], {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\"\n                    });\n                }\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\",\n                autoScale: true,\n                scaleMargins: {\n                    top: 0.2,\n                    bottom: 0.2\n                },\n                entireTextOnly: true\n            },\n            handleScale: {\n                axisPressedMouseMove: {\n                    time: true,\n                    price: true\n                },\n                mouseWheel: true,\n                pinch: true\n            },\n            handleScroll: {\n                mouseWheel: true,\n                pressedMouseMove: true,\n                horzTouchDrag: true,\n                vertTouchDrag: true\n            }\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, {\n            ...chartOptions,\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        });\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\",\n            priceFormat: {\n                type: \"price\",\n                precision: 2,\n                minMove: 0.01\n            }\n        });\n        candleSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Fetch historical data first\n        (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe).then((data)=>{\n            if (data) {\n                const candles = data.map((d)=>({\n                        time: d.time,\n                        open: d.open,\n                        high: d.high,\n                        low: d.low,\n                        close: d.close\n                    }));\n                candlestickSeries.setData(candles);\n                // Set up the current candle\n                const lastCandle = candles[candles.length - 1];\n                const currentTime = Math.floor(Date.now() / 1000);\n                const interval = timeframe === \"1w\" ? 604800 : timeframe === \"1d\" ? 86400 : timeframe === \"4h\" ? 14400 : timeframe === \"1h\" ? 3600 : timeframe === \"30m\" ? 1800 : timeframe === \"15m\" ? 900 : timeframe === \"5m\" ? 300 : 60;\n                const currentInterval = Math.floor(currentTime / interval) * interval;\n                currentCandleRef.current = {\n                    time: currentInterval,\n                    open: lastCandle.close,\n                    high: lastCandle.close,\n                    low: lastCandle.close,\n                    close: lastCandle.close\n                };\n                // Set visible range based on timeframe\n                const timeScale = chart.timeScale();\n                const visibleBars = timeframe === \"1w\" ? 52 : timeframe === \"1d\" ? 90 : timeframe === \"4h\" ? 180 : timeframe === \"1h\" ? 168 : 240; // 4 hours for smaller timeframes\n                const timeRange = interval * visibleBars;\n                const fromTime = currentTime - timeRange;\n                const toTime = currentTime + interval * 2;\n                timeScale.setVisibleRange({\n                    from: fromTime,\n                    to: toTime\n                });\n                timeScale.fitContent();\n            }\n        }).catch(console.error);\n        // Subscribe to real-time price updates\n        const unsubscribePrice = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((param)=>{\n            let { time, value } = param;\n            var _chartRef_current;\n            // Update current price display immediately\n            setCurrentPrice(value.toLocaleString(\"en-US\", {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            }));\n            // Update or create new candle\n            if (!currentCandleRef.current) {\n                const interval = timeframe === \"1w\" ? 604800 : timeframe === \"1d\" ? 86400 : timeframe === \"4h\" ? 14400 : timeframe === \"1h\" ? 3600 : timeframe === \"30m\" ? 1800 : timeframe === \"15m\" ? 900 : timeframe === \"5m\" ? 300 : 60;\n                const currentInterval = Math.floor(time / interval) * interval;\n                currentCandleRef.current = {\n                    time: currentInterval,\n                    open: value,\n                    high: value,\n                    low: value,\n                    close: value\n                };\n            } else {\n                const interval = timeframe === \"1w\" ? 604800 : timeframe === \"1d\" ? 86400 : timeframe === \"4h\" ? 14400 : timeframe === \"1h\" ? 3600 : timeframe === \"30m\" ? 1800 : timeframe === \"15m\" ? 900 : timeframe === \"5m\" ? 300 : 60;\n                const currentInterval = Math.floor(time / interval) * interval;\n                const candleInterval = Math.floor(currentCandleRef.current.time / interval) * interval;\n                if (currentInterval > candleInterval) {\n                    // Save the completed candle\n                    const completedCandle = {\n                        ...currentCandleRef.current\n                    };\n                    candleSeriesRef.current.update(completedCandle);\n                    // Create new candle\n                    currentCandleRef.current = {\n                        time: currentInterval,\n                        open: value,\n                        high: value,\n                        low: value,\n                        close: value\n                    };\n                } else {\n                    // Update current candle\n                    currentCandleRef.current.high = Math.max(currentCandleRef.current.high, value);\n                    currentCandleRef.current.low = Math.min(currentCandleRef.current.low, value);\n                    currentCandleRef.current.close = value;\n                    // Update the candlestick immediately\n                    candleSeriesRef.current.update(currentCandleRef.current);\n                }\n            }\n            // Auto-scroll if we're at the right edge\n            const timeScale = (_chartRef_current = chartRef.current) === null || _chartRef_current === void 0 ? void 0 : _chartRef_current.timeScale();\n            if (timeScale) {\n                const logicalRange = timeScale.getVisibleLogicalRange();\n                if (logicalRange && logicalRange.to >= currentCandleRef.current.time - 5) {\n                    timeScale.scrollToPosition(1, false);\n                }\n            }\n        }, timeframe);\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            if (chartRef.current) {\n                chartRef.current.remove();\n            }\n            unsubscribePrice();\n        };\n    }, [\n        timeframe\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: chartContainerRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 263,\n                columnNumber: 7\n            }, this),\n            currentPrice && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-4 left-4 bg-[#2B2B43] px-4 py-2 rounded-lg shadow-lg\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center gap-3\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-gray-400\",\n                            children: \"BTC/USD\"\n                        }, void 0, false, {\n                            fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                            lineNumber: 267,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-2xl font-semibold text-white\",\n                            children: [\n                                \"$\",\n                                currentPrice\n                            ]\n                        }, void 0, true, {\n                            fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                            lineNumber: 268,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                    lineNumber: 266,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 265,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 262,\n        columnNumber: 5\n    }, this);\n}\n_s(CandlestickChart, \"xysZfrJCJac1Qt+K59tcNnkLslI=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NhbmRsZXN0aWNrQ2hhcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ29EO0FBQ3dEO0FBQ1k7QUFjakgsU0FBU00saUJBQWlCLEtBQW9DO1FBQXBDLEVBQUVDLFNBQVMsRUFBeUIsR0FBcEM7O0lBQy9CLE1BQU1DLG9CQUFvQlAsNkNBQU1BLENBQWlCO0lBQ2pELE1BQU1RLFdBQVdSLDZDQUFNQSxDQUFtQjtJQUMxQyxNQUFNLENBQUNTLGNBQWNDLGdCQUFnQixHQUFHVCwrQ0FBUUEsQ0FBUztJQUN6RCxNQUFNVSxrQkFBa0JYLDZDQUFNQSxDQUFNO0lBQ3BDLE1BQU1ZLG1CQUFtQlosNkNBQU1BLENBQWdCO0lBRS9DRCxnREFBU0EsQ0FBQztRQUNSLElBQUksQ0FBQ1Esa0JBQWtCTSxPQUFPLEVBQUU7UUFFaEMsTUFBTUMsZUFBZTtZQUNuQkMsUUFBUTtnQkFDTkMsWUFBWTtvQkFBRUMsT0FBTztnQkFBVTtnQkFDL0JDLFdBQVc7WUFDYjtZQUNBQyxNQUFNO2dCQUNKQyxXQUFXO29CQUFFSCxPQUFPO2dCQUFVO2dCQUM5QkksV0FBVztvQkFBRUosT0FBTztnQkFBVTtZQUNoQztZQUNBSyxXQUFXO2dCQUNUQyxNQUFNO2dCQUNOQyxVQUFVO29CQUNSQyxPQUFPO29CQUNQUixPQUFPO29CQUNQUyxPQUFPO2dCQUNUO2dCQUNBQyxVQUFVO29CQUNSRixPQUFPO29CQUNQUixPQUFPO29CQUNQUyxPQUFPO2dCQUNUO1lBQ0Y7WUFDQUUsV0FBVztnQkFDVEMsYUFBYTtnQkFDYkMsYUFBYTtnQkFDYkMsZ0JBQWdCO2dCQUNoQkMsYUFBYTtnQkFDYkMsYUFBYTtnQkFDYkMsWUFBWTtnQkFDWkMsZUFBZTtnQkFDZkMsdUJBQXVCO2dCQUN2QkMsOEJBQThCO2dCQUM5QkMsbUJBQW1CLENBQUNDO29CQUNsQixNQUFNQyxPQUFPLElBQUlDLEtBQUtGLE9BQU87b0JBQzdCLElBQUlqQyxj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QU8sQ0FBQ2lELFdBQVc7b0JBQzVDQyxRQUFReEQsa0JBQWtCTSxPQUFPLENBQUNtRCxZQUFZO2dCQUNoRDtZQUNGO1FBQ0Y7UUFFQXdELE9BQU9DLGdCQUFnQixDQUFDLFVBQVVIO1FBRWxDLE9BQU87WUFDTEUsT0FBT0UsbUJBQW1CLENBQUMsVUFBVUo7WUFDckMsSUFBSTlHLFNBQVNLLE9BQU8sRUFBRTtnQkFDcEJMLFNBQVNLLE9BQU8sQ0FBQzhHLE1BQU07WUFDekI7WUFDQWxCO1FBQ0Y7SUFDRixHQUFHO1FBQUNuRztLQUFVO0lBRWQscUJBQ0UsOERBQUNzSDtRQUFJQyxXQUFVOzswQkFDYiw4REFBQ0Q7Z0JBQUlFLEtBQUt2SDtnQkFBbUJzSCxXQUFVOzs7Ozs7WUFDdENwSCw4QkFDQyw4REFBQ21IO2dCQUFJQyxXQUFVOzBCQUNiLDRFQUFDRDtvQkFBSUMsV0FBVTs7c0NBQ2IsOERBQUNFOzRCQUFLRixXQUFVO3NDQUFnQjs7Ozs7O3NDQUNoQyw4REFBQ0U7NEJBQUtGLFdBQVU7O2dDQUFvQztnQ0FBRXBIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNbEU7R0FoUWdCSjtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9DaGFydC9DYW5kbGVzdGlja0NoYXJ0LnRzeD84ZDQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0LCBDb2xvclR5cGUsIElDaGFydEFwaSwgTGluZVdpZHRoLCBVVENUaW1lc3RhbXAsIFNlcmllc1R5cGUgfSBmcm9tICdsaWdodHdlaWdodC1jaGFydHMnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9QcmljZSwgc3Vic2NyaWJlVG9UcmFkZXMsIGdldEhpc3RvcmljYWxEYXRhLCBUaW1lZnJhbWUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hcGkvY3J5cHRvQ29tcGFyZUFQSSc7XG5cbmludGVyZmFjZSBDYW5kbGUge1xuICB0aW1lOiBVVENUaW1lc3RhbXA7XG4gIG9wZW46IG51bWJlcjtcbiAgaGlnaDogbnVtYmVyO1xuICBsb3c6IG51bWJlcjtcbiAgY2xvc2U6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW5kbGVzdGlja0NoYXJ0UHJvcHMge1xuICB0aW1lZnJhbWU6IFRpbWVmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhbmRsZXN0aWNrQ2hhcnQoeyB0aW1lZnJhbWUgfTogQ2FuZGxlc3RpY2tDaGFydFByb3BzKSB7XG4gIGNvbnN0IGNoYXJ0Q29udGFpbmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcbiAgY29uc3QgY2hhcnRSZWYgPSB1c2VSZWY8SUNoYXJ0QXBpIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtjdXJyZW50UHJpY2UsIHNldEN1cnJlbnRQcmljZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgY2FuZGxlU2VyaWVzUmVmID0gdXNlUmVmPGFueT4obnVsbCk7XG4gIGNvbnN0IGN1cnJlbnRDYW5kbGVSZWYgPSB1c2VSZWY8Q2FuZGxlIHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGNvbnN0IGNoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGxheW91dDoge1xuICAgICAgICBiYWNrZ3JvdW5kOiB7IGNvbG9yOiAnIzFFMjIyRCcgfSxcbiAgICAgICAgdGV4dENvbG9yOiAnI0RERCcsXG4gICAgICB9LFxuICAgICAgZ3JpZDoge1xuICAgICAgICB2ZXJ0TGluZXM6IHsgY29sb3I6ICcjMkIyQjQzJyB9LFxuICAgICAgICBob3J6TGluZXM6IHsgY29sb3I6ICcjMkIyQjQzJyB9LFxuICAgICAgfSxcbiAgICAgIGNyb3NzaGFpcjoge1xuICAgICAgICBtb2RlOiAxLFxuICAgICAgICB2ZXJ0TGluZToge1xuICAgICAgICAgIHdpZHRoOiAxIGFzIExpbmVXaWR0aCxcbiAgICAgICAgICBjb2xvcjogJyM3NTg2OTYnLFxuICAgICAgICAgIHN0eWxlOiAzLFxuICAgICAgICB9LFxuICAgICAgICBob3J6TGluZToge1xuICAgICAgICAgIHdpZHRoOiAxIGFzIExpbmVXaWR0aCxcbiAgICAgICAgICBjb2xvcjogJyM3NTg2OTYnLFxuICAgICAgICAgIHN0eWxlOiAzLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRpbWVTY2FsZToge1xuICAgICAgICBib3JkZXJDb2xvcjogJyMyQjJCNDMnLFxuICAgICAgICB0aW1lVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgc2Vjb25kc1Zpc2libGU6IGZhbHNlLFxuICAgICAgICBmaXhMZWZ0RWRnZTogdHJ1ZSxcbiAgICAgICAgcmlnaHRPZmZzZXQ6IDEyLFxuICAgICAgICBiYXJTcGFjaW5nOiA2LFxuICAgICAgICBtaW5CYXJTcGFjaW5nOiAyLFxuICAgICAgICByaWdodEJhclN0YXlzT25TY3JvbGw6IHRydWUsXG4gICAgICAgIGxvY2tWaXNpYmxlVGltZVJhbmdlT25SZXNpemU6IHRydWUsXG4gICAgICAgIHRpY2tNYXJrRm9ybWF0dGVyOiAodGltZTogVVRDVGltZXN0YW1wKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWUgKiAxMDAwKTtcbiAgICAgICAgICBpZiAodGltZWZyYW1lID09PSAnMWQnIHx8IHRpbWVmcmFtZSA9PT0gJzF3Jykge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkYXRlLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHJpZ2h0UHJpY2VTY2FsZToge1xuICAgICAgICBib3JkZXJDb2xvcjogJyMyQjJCNDMnLFxuICAgICAgICBhdXRvU2NhbGU6IHRydWUsXG4gICAgICAgIHNjYWxlTWFyZ2luczoge1xuICAgICAgICAgIHRvcDogMC4yLFxuICAgICAgICAgIGJvdHRvbTogMC4yLFxuICAgICAgICB9LFxuICAgICAgICBlbnRpcmVUZXh0T25seTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBoYW5kbGVTY2FsZToge1xuICAgICAgICBheGlzUHJlc3NlZE1vdXNlTW92ZToge1xuICAgICAgICAgIHRpbWU6IHRydWUsXG4gICAgICAgICAgcHJpY2U6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdXNlV2hlZWw6IHRydWUsXG4gICAgICAgIHBpbmNoOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGhhbmRsZVNjcm9sbDoge1xuICAgICAgICBtb3VzZVdoZWVsOiB0cnVlLFxuICAgICAgICBwcmVzc2VkTW91c2VNb3ZlOiB0cnVlLFxuICAgICAgICBob3J6VG91Y2hEcmFnOiB0cnVlLFxuICAgICAgICB2ZXJ0VG91Y2hEcmFnOiB0cnVlLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3QgY2hhcnQgPSBjcmVhdGVDaGFydChjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LCB7XG4gICAgICAuLi5jaGFydE9wdGlvbnMsXG4gICAgICB3aWR0aDogY2hhcnRDb250YWluZXJSZWYuY3VycmVudC5jbGllbnRXaWR0aCxcbiAgICAgIGhlaWdodDogY2hhcnRDb250YWluZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBjYW5kbGVzdGlja1NlcmllcyA9IGNoYXJ0LmFkZENhbmRsZXN0aWNrU2VyaWVzKHtcbiAgICAgIHVwQ29sb3I6ICcjMjZhNjlhJyxcbiAgICAgIGRvd25Db2xvcjogJyNlZjUzNTAnLFxuICAgICAgYm9yZGVyVmlzaWJsZTogZmFsc2UsXG4gICAgICB3aWNrVXBDb2xvcjogJyMyNmE2OWEnLFxuICAgICAgd2lja0Rvd25Db2xvcjogJyNlZjUzNTAnLFxuICAgICAgcHJpY2VGb3JtYXQ6IHtcbiAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgcHJlY2lzaW9uOiAyLFxuICAgICAgICBtaW5Nb3ZlOiAwLjAxLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBcbiAgICBjYW5kbGVTZXJpZXNSZWYuY3VycmVudCA9IGNhbmRsZXN0aWNrU2VyaWVzO1xuICAgIGNoYXJ0UmVmLmN1cnJlbnQgPSBjaGFydDtcblxuICAgIC8vIEZldGNoIGhpc3RvcmljYWwgZGF0YSBmaXJzdFxuICAgIGdldEhpc3RvcmljYWxEYXRhKHRpbWVmcmFtZSkudGhlbihkYXRhID0+IHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGNhbmRsZXMgPSBkYXRhLm1hcCgoZDogYW55KSA9PiAoe1xuICAgICAgICAgIHRpbWU6IGQudGltZSBhcyBVVENUaW1lc3RhbXAsXG4gICAgICAgICAgb3BlbjogZC5vcGVuLFxuICAgICAgICAgIGhpZ2g6IGQuaGlnaCxcbiAgICAgICAgICBsb3c6IGQubG93LFxuICAgICAgICAgIGNsb3NlOiBkLmNsb3NlLFxuICAgICAgICB9KSk7XG4gICAgICAgIFxuICAgICAgICBjYW5kbGVzdGlja1Nlcmllcy5zZXREYXRhKGNhbmRsZXMpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2V0IHVwIHRoZSBjdXJyZW50IGNhbmRsZVxuICAgICAgICBjb25zdCBsYXN0Q2FuZGxlID0gY2FuZGxlc1tjYW5kbGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHRpbWVmcmFtZSA9PT0gJzF3JyA/IDYwNDgwMCA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnMWQnID8gODY0MDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnNGgnID8gMTQ0MDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnMWgnID8gMzYwMCA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lZnJhbWUgPT09ICczMG0nID8gMTgwMCA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lZnJhbWUgPT09ICcxNW0nID8gOTAwIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzVtJyA/IDMwMCA6IDYwO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIGNvbnN0IGN1cnJlbnRJbnRlcnZhbCA9IE1hdGguZmxvb3IoY3VycmVudFRpbWUgLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCBhcyBVVENUaW1lc3RhbXA7XG4gICAgICAgIFxuICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQgPSB7XG4gICAgICAgICAgdGltZTogY3VycmVudEludGVydmFsLFxuICAgICAgICAgIG9wZW46IGxhc3RDYW5kbGUuY2xvc2UsXG4gICAgICAgICAgaGlnaDogbGFzdENhbmRsZS5jbG9zZSxcbiAgICAgICAgICBsb3c6IGxhc3RDYW5kbGUuY2xvc2UsXG4gICAgICAgICAgY2xvc2U6IGxhc3RDYW5kbGUuY2xvc2UsXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBTZXQgdmlzaWJsZSByYW5nZSBiYXNlZCBvbiB0aW1lZnJhbWVcbiAgICAgICAgY29uc3QgdGltZVNjYWxlID0gY2hhcnQudGltZVNjYWxlKCk7XG4gICAgICAgIGNvbnN0IHZpc2libGVCYXJzID0gdGltZWZyYW1lID09PSAnMXcnID8gNTIgOiAvLyAxIHllYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzFkJyA/IDkwIDogLy8gMyBtb250aHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzRoJyA/IDE4MCA6IC8vIDMwIGRheXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzFoJyA/IDE2OCA6IC8vIDEgd2Vla1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgMjQwOyAvLyA0IGhvdXJzIGZvciBzbWFsbGVyIHRpbWVmcmFtZXNcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWVSYW5nZSA9IGludGVydmFsICogdmlzaWJsZUJhcnM7XG4gICAgICAgIGNvbnN0IGZyb21UaW1lID0gY3VycmVudFRpbWUgLSB0aW1lUmFuZ2U7XG4gICAgICAgIGNvbnN0IHRvVGltZSA9IGN1cnJlbnRUaW1lICsgaW50ZXJ2YWwgKiAyO1xuICAgICAgICBcbiAgICAgICAgdGltZVNjYWxlLnNldFZpc2libGVSYW5nZSh7XG4gICAgICAgICAgZnJvbTogZnJvbVRpbWUgYXMgVVRDVGltZXN0YW1wLFxuICAgICAgICAgIHRvOiB0b1RpbWUgYXMgVVRDVGltZXN0YW1wLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aW1lU2NhbGUuZml0Q29udGVudCgpO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuXG4gICAgLy8gU3Vic2NyaWJlIHRvIHJlYWwtdGltZSBwcmljZSB1cGRhdGVzXG4gICAgY29uc3QgdW5zdWJzY3JpYmVQcmljZSA9IHN1YnNjcmliZVRvUHJpY2UoKHsgdGltZSwgdmFsdWUgfSkgPT4ge1xuICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgcHJpY2UgZGlzcGxheSBpbW1lZGlhdGVseVxuICAgICAgc2V0Q3VycmVudFByaWNlKHZhbHVlLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHtcbiAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyLFxuICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDJcbiAgICAgIH0pKTtcblxuICAgICAgLy8gVXBkYXRlIG9yIGNyZWF0ZSBuZXcgY2FuZGxlXG4gICAgICBpZiAoIWN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHRpbWVmcmFtZSA9PT0gJzF3JyA/IDYwNDgwMCA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnMWQnID8gODY0MDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnNGgnID8gMTQ0MDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnMWgnID8gMzYwMCA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lZnJhbWUgPT09ICczMG0nID8gMTgwMCA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lZnJhbWUgPT09ICcxNW0nID8gOTAwIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzVtJyA/IDMwMCA6IDYwO1xuICAgICAgICBjb25zdCBjdXJyZW50SW50ZXJ2YWwgPSBNYXRoLmZsb29yKHRpbWUgLyBpbnRlcnZhbCkgKiBpbnRlcnZhbCBhcyBVVENUaW1lc3RhbXA7XG4gICAgICAgIFxuICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQgPSB7XG4gICAgICAgICAgdGltZTogY3VycmVudEludGVydmFsLFxuICAgICAgICAgIG9wZW46IHZhbHVlLFxuICAgICAgICAgIGhpZ2g6IHZhbHVlLFxuICAgICAgICAgIGxvdzogdmFsdWUsXG4gICAgICAgICAgY2xvc2U6IHZhbHVlLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aW1lZnJhbWUgPT09ICcxdycgPyA2MDQ4MDAgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzFkJyA/IDg2NDAwIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzRoJyA/IDE0NDAwIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVmcmFtZSA9PT0gJzFoJyA/IDM2MDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnMzBtJyA/IDE4MDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWZyYW1lID09PSAnMTVtJyA/IDkwMCA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lZnJhbWUgPT09ICc1bScgPyAzMDAgOiA2MDtcbiAgICAgICAgY29uc3QgY3VycmVudEludGVydmFsID0gTWF0aC5mbG9vcih0aW1lIC8gaW50ZXJ2YWwpICogaW50ZXJ2YWwgYXMgVVRDVGltZXN0YW1wO1xuICAgICAgICBjb25zdCBjYW5kbGVJbnRlcnZhbCA9IE1hdGguZmxvb3IoY3VycmVudENhbmRsZVJlZi5jdXJyZW50LnRpbWUgLyBpbnRlcnZhbCkgKiBpbnRlcnZhbDtcbiAgICAgICAgXG4gICAgICAgIGlmIChjdXJyZW50SW50ZXJ2YWwgPiBjYW5kbGVJbnRlcnZhbCkge1xuICAgICAgICAgIC8vIFNhdmUgdGhlIGNvbXBsZXRlZCBjYW5kbGVcbiAgICAgICAgICBjb25zdCBjb21wbGV0ZWRDYW5kbGUgPSB7IC4uLmN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCB9O1xuICAgICAgICAgIGNhbmRsZVNlcmllc1JlZi5jdXJyZW50LnVwZGF0ZShjb21wbGV0ZWRDYW5kbGUpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENyZWF0ZSBuZXcgY2FuZGxlXG4gICAgICAgICAgY3VycmVudENhbmRsZVJlZi5jdXJyZW50ID0ge1xuICAgICAgICAgICAgdGltZTogY3VycmVudEludGVydmFsLFxuICAgICAgICAgICAgb3BlbjogdmFsdWUsXG4gICAgICAgICAgICBoaWdoOiB2YWx1ZSxcbiAgICAgICAgICAgIGxvdzogdmFsdWUsXG4gICAgICAgICAgICBjbG9zZTogdmFsdWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBVcGRhdGUgY3VycmVudCBjYW5kbGVcbiAgICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQuaGlnaCA9IE1hdGgubWF4KGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5oaWdoLCB2YWx1ZSk7XG4gICAgICAgICAgY3VycmVudENhbmRsZVJlZi5jdXJyZW50LmxvdyA9IE1hdGgubWluKGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5sb3csIHZhbHVlKTtcbiAgICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQuY2xvc2UgPSB2YWx1ZTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIGNhbmRsZXN0aWNrIGltbWVkaWF0ZWx5XG4gICAgICAgICAgY2FuZGxlU2VyaWVzUmVmLmN1cnJlbnQudXBkYXRlKGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQXV0by1zY3JvbGwgaWYgd2UncmUgYXQgdGhlIHJpZ2h0IGVkZ2VcbiAgICAgIGNvbnN0IHRpbWVTY2FsZSA9IGNoYXJ0UmVmLmN1cnJlbnQ/LnRpbWVTY2FsZSgpO1xuICAgICAgaWYgKHRpbWVTY2FsZSkge1xuICAgICAgICBjb25zdCBsb2dpY2FsUmFuZ2UgPSB0aW1lU2NhbGUuZ2V0VmlzaWJsZUxvZ2ljYWxSYW5nZSgpO1xuICAgICAgICBpZiAobG9naWNhbFJhbmdlICYmIGxvZ2ljYWxSYW5nZS50byA+PSAoY3VycmVudENhbmRsZVJlZi5jdXJyZW50LnRpbWUgYXMgbnVtYmVyKSAtIDUpIHtcbiAgICAgICAgICB0aW1lU2NhbGUuc2Nyb2xsVG9Qb3NpdGlvbigxLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aW1lZnJhbWUpO1xuXG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgaWYgKGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQgJiYgY2hhcnRSZWYuY3VycmVudCkge1xuICAgICAgICBjaGFydFJlZi5jdXJyZW50LmFwcGx5T3B0aW9ucyh7XG4gICAgICAgICAgd2lkdGg6IGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgaWYgKGNoYXJ0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2hhcnRSZWYuY3VycmVudC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIHVuc3Vic2NyaWJlUHJpY2UoKTtcbiAgICB9O1xuICB9LCBbdGltZWZyYW1lXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIHctZnVsbCBoLWZ1bGxcIj5cbiAgICAgIDxkaXYgcmVmPXtjaGFydENvbnRhaW5lclJlZn0gY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbFwiIC8+XG4gICAgICB7Y3VycmVudFByaWNlICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCBsZWZ0LTQgYmctWyMyQjJCNDNdIHB4LTQgcHktMiByb3VuZGVkLWxnIHNoYWRvdy1sZ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS00MDBcIj5CVEMvVVNEPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1zZW1pYm9sZCB0ZXh0LXdoaXRlXCI+JHtjdXJyZW50UHJpY2V9PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59Il0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwiY3JlYXRlQ2hhcnQiLCJzdWJzY3JpYmVUb1ByaWNlIiwiZ2V0SGlzdG9yaWNhbERhdGEiLCJDYW5kbGVzdGlja0NoYXJ0IiwidGltZWZyYW1lIiwiY2hhcnRDb250YWluZXJSZWYiLCJjaGFydFJlZiIsImN1cnJlbnRQcmljZSIsInNldEN1cnJlbnRQcmljZSIsImNhbmRsZVNlcmllc1JlZiIsImN1cnJlbnRDYW5kbGVSZWYiLCJjdXJyZW50IiwiY2hhcnRPcHRpb25zIiwibGF5b3V0IiwiYmFja2dyb3VuZCIsImNvbG9yIiwidGV4dENvbG9yIiwiZ3JpZCIsInZlcnRMaW5lcyIsImhvcnpMaW5lcyIsImNyb3NzaGFpciIsIm1vZGUiLCJ2ZXJ0TGluZSIsIndpZHRoIiwic3R5bGUiLCJob3J6TGluZSIsInRpbWVTY2FsZSIsImJvcmRlckNvbG9yIiwidGltZVZpc2libGUiLCJzZWNvbmRzVmlzaWJsZSIsImZpeExlZnRFZGdlIiwicmlnaHRPZmZzZXQiLCJiYXJTcGFjaW5nIiwibWluQmFyU3BhY2luZyIsInJpZ2h0QmFyU3RheXNPblNjcm9sbCIsImxvY2tWaXNpYmxlVGltZVJhbmdlT25SZXNpemUiLCJ0aWNrTWFya0Zvcm1hdHRlciIsInRpbWUiLCJkYXRlIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInRvTG9jYWxlVGltZVN0cmluZyIsImhvdXIiLCJtaW51dGUiLCJyaWdodFByaWNlU2NhbGUiLCJhdXRvU2NhbGUiLCJzY2FsZU1hcmdpbnMiLCJ0b3AiLCJib3R0b20iLCJlbnRpcmVUZXh0T25seSIsImhhbmRsZVNjYWxlIiwiYXhpc1ByZXNzZWRNb3VzZU1vdmUiLCJwcmljZSIsIm1vdXNlV2hlZWwiLCJwaW5jaCIsImhhbmRsZVNjcm9sbCIsInByZXNzZWRNb3VzZU1vdmUiLCJob3J6VG91Y2hEcmFnIiwidmVydFRvdWNoRHJhZyIsImNoYXJ0IiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJjYW5kbGVzdGlja1NlcmllcyIsImFkZENhbmRsZXN0aWNrU2VyaWVzIiwidXBDb2xvciIsImRvd25Db2xvciIsImJvcmRlclZpc2libGUiLCJ3aWNrVXBDb2xvciIsIndpY2tEb3duQ29sb3IiLCJwcmljZUZvcm1hdCIsInR5cGUiLCJwcmVjaXNpb24iLCJtaW5Nb3ZlIiwidGhlbiIsImRhdGEiLCJjYW5kbGVzIiwibWFwIiwiZCIsIm9wZW4iLCJoaWdoIiwibG93IiwiY2xvc2UiLCJzZXREYXRhIiwibGFzdENhbmRsZSIsImxlbmd0aCIsImN1cnJlbnRUaW1lIiwiTWF0aCIsImZsb29yIiwibm93IiwiaW50ZXJ2YWwiLCJjdXJyZW50SW50ZXJ2YWwiLCJ2aXNpYmxlQmFycyIsInRpbWVSYW5nZSIsImZyb21UaW1lIiwidG9UaW1lIiwic2V0VmlzaWJsZVJhbmdlIiwiZnJvbSIsInRvIiwiZml0Q29udGVudCIsImNhdGNoIiwiY29uc29sZSIsImVycm9yIiwidW5zdWJzY3JpYmVQcmljZSIsInZhbHVlIiwidG9Mb2NhbGVTdHJpbmciLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJjYW5kbGVJbnRlcnZhbCIsImNvbXBsZXRlZENhbmRsZSIsInVwZGF0ZSIsIm1heCIsIm1pbiIsImxvZ2ljYWxSYW5nZSIsImdldFZpc2libGVMb2dpY2FsUmFuZ2UiLCJzY3JvbGxUb1Bvc2l0aW9uIiwiaGFuZGxlUmVzaXplIiwiYXBwbHlPcHRpb25zIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmUiLCJkaXYiLCJjbGFzc05hbWUiLCJyZWYiLCJzcGFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts":
/*!**********************************************!*\
  !*** ./src/services/api/cryptoCompareAPI.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentPrice: function() { return /* binding */ getCurrentPrice; },\n/* harmony export */   getHistoricalData: function() { return /* binding */ getHistoricalData; },\n/* harmony export */   subscribeToPrice: function() { return /* binding */ subscribeToPrice; },\n/* harmony export */   subscribeToTrades: function() { return /* binding */ subscribeToTrades; }\n/* harmony export */ });\nconst TIMEFRAME_CONFIG = {\n    \"1m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 60\n    },\n    \"5m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 300\n    },\n    \"15m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 900\n    },\n    \"30m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 1800\n    },\n    \"1h\": {\n        endpoint: \"histohour\",\n        limit: 720,\n        interval: 3600\n    },\n    \"4h\": {\n        endpoint: \"histohour\",\n        limit: 720,\n        interval: 14400\n    },\n    \"1d\": {\n        endpoint: \"histoday\",\n        limit: 365,\n        interval: 86400\n    },\n    \"1w\": {\n        endpoint: \"histoday\",\n        limit: 365,\n        interval: 604800\n    }\n};\nlet socket = null;\nlet priceUpdateCallbacks = [];\nlet tradeUpdateCallbacks = [];\nlet pendingSubscription = false;\nlet lastPrice = 0;\nlet reconnectAttempts = 0;\nlet currentTimeframe = \"1m\";\nconst MAX_RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 2000;\n// Fallback to REST API when WebSocket fails\nasync function fetchPriceUpdate() {\n    try {\n        const response = await fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD\");\n        const data = await response.json();\n        const price = data.USD;\n        const timestamp = Math.floor(Date.now() / 1000);\n        if (price && !isNaN(price) && price !== lastPrice) {\n            lastPrice = price;\n            priceUpdateCallbacks.forEach((callback)=>callback({\n                    time: timestamp,\n                    value: price\n                }));\n        }\n    } catch (error) {\n        console.error(\"Error fetching price via REST:\", error);\n    }\n}\nfunction sendSubscription(ws) {\n    const subscribeMsg = {\n        \"action\": \"SubAdd\",\n        \"subs\": [\n            \"5~CCCAGG~BTC~USD\",\n            \"2~Coinbase~BTC~USD\",\n            \"11~BTC~USD\" // Direct price feed\n        ]\n    };\n    try {\n        ws.send(JSON.stringify(subscribeMsg));\n        console.log(\"Subscribed to price feeds\");\n        pendingSubscription = false;\n    } catch (error) {\n        console.error(\"Error sending subscription:\", error);\n        pendingSubscription = true;\n    }\n}\n// Update the WebSocket message handler to respect timeframes\nfunction handlePriceUpdate(price, timestamp, timeframe) {\n    const config = TIMEFRAME_CONFIG[timeframe];\n    const interval = config.interval;\n    // Align timestamp to the current timeframe interval\n    const alignedTimestamp = Math.floor(timestamp / interval) * interval;\n    if (price && !isNaN(price) && price !== lastPrice) {\n        lastPrice = price;\n        priceUpdateCallbacks.forEach((callback)=>callback({\n                time: alignedTimestamp,\n                value: price\n            }));\n        if (tradeUpdateCallbacks.length > 0) {\n            tradeUpdateCallbacks.forEach((callback)=>callback({\n                    time: alignedTimestamp,\n                    price: price,\n                    volume24h: 0 // Volume will be updated separately\n                }));\n        }\n    }\n}\nfunction connectWebSocket() {\n    if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.OPEN) {\n        if (pendingSubscription) {\n            sendSubscription(socket);\n        }\n        return;\n    }\n    // Don't try to reconnect too many times\n    if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {\n        console.log(\"Max reconnection attempts reached, falling back to REST API\");\n        // Set up periodic REST API polling as fallback\n        const pollInterval = setInterval(fetchPriceUpdate, 5000);\n        return;\n    }\n    try {\n        // Close existing socket if any\n        if (socket) {\n            socket.close();\n            socket = null;\n        }\n        socket = new WebSocket(\"wss://streamer.cryptocompare.com/v2\");\n        socket.onopen = ()=>{\n            console.log(\"Connected to CryptoCompare WebSocket\");\n            reconnectAttempts = 0; // Reset attempts on successful connection\n            if (socket && socket.readyState === WebSocket.OPEN) {\n                sendSubscription(socket);\n            } else {\n                pendingSubscription = true;\n            }\n        };\n        socket.onmessage = (event)=>{\n            try {\n                const data = JSON.parse(event.data);\n                if (data.TYPE === \"20\" && data.MESSAGE === \"SUBSCRIBECOMPLETE\") {\n                    console.log(\"Successfully subscribed to feeds\");\n                    return;\n                }\n                const timestamp = Math.floor(Date.now() / 1000);\n                let price = null;\n                if (data.TYPE === \"11\" || data.TYPE === \"2\" || data.TYPE === \"5\") {\n                    price = parseFloat(data.PRICE);\n                    if (price && !isNaN(price)) {\n                        handlePriceUpdate(price, timestamp, currentTimeframe);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error processing message:\", error);\n            }\n        };\n        socket.onerror = (error)=>{\n            console.error(\"WebSocket error:\", error);\n            reconnectAttempts++;\n            reconnect();\n        };\n        socket.onclose = (event)=>{\n            console.log(\"WebSocket closed with code \".concat(event.code, \", reason: \").concat(event.reason));\n            reconnect();\n        };\n        // Ping every 15 seconds to keep connection alive\n        const pingInterval = setInterval(()=>{\n            if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.OPEN) {\n                try {\n                    socket.send(JSON.stringify({\n                        \"action\": \"PING\"\n                    }));\n                } catch (error) {\n                    console.error(\"Error sending ping:\", error);\n                    reconnect();\n                }\n            }\n        }, 15000);\n        // Clean up ping interval on socket close\n        socket.addEventListener(\"close\", ()=>clearInterval(pingInterval));\n    } catch (error) {\n        console.error(\"Error creating WebSocket:\", error);\n        reconnectAttempts++;\n        setTimeout(connectWebSocket, RECONNECT_DELAY);\n    }\n}\nfunction reconnect() {\n    if (socket) {\n        try {\n            socket.close();\n        } catch (error) {\n            console.error(\"Error closing socket:\", error);\n        }\n        socket = null;\n    }\n    setTimeout(connectWebSocket, RECONNECT_DELAY * Math.min(reconnectAttempts, 5));\n}\nfunction subscribeToPrice(callback) {\n    let timeframe = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"1m\";\n    currentTimeframe = timeframe;\n    priceUpdateCallbacks.push(callback);\n    // Immediately get current price via REST API\n    getCurrentPrice().then((price)=>{\n        const timestamp = Math.floor(Date.now() / 1000);\n        callback({\n            time: timestamp,\n            value: price\n        });\n    }).catch(console.error);\n    // If this is the first subscriber, connect to WebSocket\n    if (priceUpdateCallbacks.length === 1) {\n        connectWebSocket();\n    }\n    return ()=>{\n        priceUpdateCallbacks = priceUpdateCallbacks.filter((cb)=>cb !== callback);\n        if (priceUpdateCallbacks.length === 0 && tradeUpdateCallbacks.length === 0 && socket) {\n            socket.close();\n            socket = null;\n        }\n    };\n}\nfunction subscribeToTrades(callback) {\n    tradeUpdateCallbacks.push(callback);\n    // If this is the first subscriber, connect to WebSocket\n    if (tradeUpdateCallbacks.length === 1 && priceUpdateCallbacks.length === 0) {\n        connectWebSocket();\n    }\n    return ()=>{\n        tradeUpdateCallbacks = tradeUpdateCallbacks.filter((cb)=>cb !== callback);\n        if (priceUpdateCallbacks.length === 0 && tradeUpdateCallbacks.length === 0 && socket) {\n            socket.close();\n            socket = null;\n        }\n    };\n}\nasync function getCurrentPrice() {\n    try {\n        const response = await fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD\");\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.USD;\n    } catch (error) {\n        console.error(\"Error fetching price:\", error);\n        throw error;\n    }\n}\nasync function getHistoricalData() {\n    let timeframe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"1m\";\n    try {\n        var _data_Data;\n        const config = TIMEFRAME_CONFIG[timeframe];\n        const endTime = Math.floor(Date.now() / 1000);\n        // Calculate the appropriate aggregate parameter based on timeframe\n        let aggregate = 1;\n        if (config.endpoint === \"histominute\") {\n            aggregate = config.interval / 60;\n        } else if (config.endpoint === \"histohour\") {\n            aggregate = config.interval / 3600;\n        } else if (config.endpoint === \"histoday\") {\n            aggregate = config.interval / 86400;\n        }\n        const url = \"https://min-api.cryptocompare.com/data/v2/\".concat(config.endpoint, \"?fsym=BTC&tsym=USD&limit=\").concat(config.limit, \"&toTs=\").concat(endTime, \"&aggregate=\").concat(aggregate);\n        console.log(\"Fetching historical data for \".concat(timeframe, \" timeframe...\"));\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (!((_data_Data = data.Data) === null || _data_Data === void 0 ? void 0 : _data_Data.Data)) {\n            throw new Error(\"Invalid data format received from API\");\n        }\n        return data.Data.Data;\n    } catch (error) {\n        console.error(\"Error fetching historical data:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\n"));

/***/ })

});