"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            crosshair: {\n                mode: 1,\n                vertLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                },\n                horzLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\"\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\"\n            }\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, {\n            ...chartOptions,\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        });\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\"\n        });\n        // Fetch and set historical data\n        const loadData = async ()=>{\n            try {\n                const historicalData = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe);\n                candlestickSeries.setData(historicalData.map((d)=>({\n                        time: d.time,\n                        open: d.open,\n                        high: d.high,\n                        low: d.low,\n                        close: d.close\n                    })));\n            } catch (error) {\n                console.error(\"Error loading historical data:\", error);\n            }\n        };\n        loadData();\n        chartRef.current = chart;\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            if (chartRef.current) {\n                chartRef.current.remove();\n            }\n        };\n    }, [\n        timeframe\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: chartContainerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 99,\n        columnNumber: 10\n    }, this);\n}\n_s(CandlestickChart, \"2rN9armGVJ1f+QeW0pB7tlSVqXQ=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NhbmRsZXN0aWNrQ2hhcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQzBDO0FBQzZCO0FBQ0g7QUFNN0QsU0FBU0ksaUJBQWlCLEtBQW9DO1FBQXBDLEVBQUVDLFNBQVMsRUFBeUIsR0FBcEM7O0lBQy9CLE1BQU1DLG9CQUFvQkwsNkNBQU1BLENBQWlCO0lBQ2pELE1BQU1NLFdBQVdOLDZDQUFNQSxDQUFtQjtJQUUxQ0QsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNNLGtCQUFrQkUsT0FBTyxFQUFFO1FBRWhDLE1BQU1DLGVBQWU7WUFDbkJDLFFBQVE7Z0JBQ05DLFlBQVk7b0JBQUVDLE9BQU87Z0JBQVU7Z0JBQy9CQyxXQUFXO1lBQ2I7WUFDQUMsTUFBTTtnQkFDSkMsV0FBVztvQkFBRUgsT0FBTztnQkFBVTtnQkFDOUJJLFdBQVc7b0JBQUVKLE9BQU87Z0JBQVU7WUFDaEM7WUFDQUssV0FBVztnQkFDVEMsTUFBTTtnQkFDTkMsVUFBVTtvQkFDUkMsT0FBTztvQkFDUFIsT0FBTztvQkFDUFMsT0FBTztnQkFDVDtnQkFDQUMsVUFBVTtvQkFDUkYsT0FBTztvQkFDUFIsT0FBTztvQkFDUFMsT0FBTztnQkFDVDtZQUNGO1lBQ0FFLFdBQVc7Z0JBQ1RDLGFBQWE7WUFDZjtZQUNBQyxpQkFBaUI7Z0JBQ2ZELGFBQWE7WUFDZjtRQUNGO1FBRUEsTUFBTUUsUUFBUXhCLCtEQUFXQSxDQUFDSSxrQkFBa0JFLE9BQU8sRUFBRTtZQUNuRCxHQUFHQyxZQUFZO1lBQ2ZXLE9BQU9kLGtCQUFrQkUsT0FBTyxDQUFDbUIsV0FBVztZQUM1Q0MsUUFBUXRCLGtCQUFrQkUsT0FBTyxDQUFDcUIsWUFBWTtRQUNoRDtRQUVBLE1BQU1DLG9CQUFvQkosTUFBTUssb0JBQW9CLENBQUM7WUFDbkRDLFNBQVM7WUFDVEMsV0FBVztZQUNYQyxlQUFlO1lBQ2ZDLGFBQWE7WUFDYkMsZUFBZTtRQUNqQjtRQUVBLGdDQUFnQztRQUNoQyxNQUFNQyxXQUFXO1lBQ2YsSUFBSTtnQkFDRixNQUFNQyxpQkFBaUIsTUFBTW5DLGlGQUFpQkEsQ0FBQ0U7Z0JBQy9DeUIsa0JBQWtCUyxPQUFPLENBQUNELGVBQWVFLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBTTt3QkFDakRDLE1BQU1ELEVBQUVDLElBQUk7d0JBQ1pDLE1BQU1GLEVBQUVFLElBQUk7d0JBQ1pDLE1BQU1ILEVBQUVHLElBQUk7d0JBQ1pDLEtBQUtKLEVBQUVJLEdBQUc7d0JBQ1ZDLE9BQU9MLEVBQUVLLEtBQUs7b0JBQ2hCO1lBQ0YsRUFBRSxPQUFPQyxPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtZQUNsRDtRQUNGO1FBRUFWO1FBQ0E5QixTQUFTQyxPQUFPLEdBQUdrQjtRQUVuQixNQUFNdUIsZUFBZTtZQUNuQixJQUFJM0Msa0JBQWtCRSxPQUFPLElBQUlELFNBQVNDLE9BQU8sRUFBRTtnQkFDakRELFNBQVNDLE9BQU8sQ0FBQzBDLFlBQVksQ0FBQztvQkFDNUI5QixPQUFPZCxrQkFBa0JFLE9BQU8sQ0FBQ21CLFdBQVc7b0JBQzVDQyxRQUFRdEIsa0JBQWtCRSxPQUFPLENBQUNxQixZQUFZO2dCQUNoRDtZQUNGO1FBQ0Y7UUFFQXNCLE9BQU9DLGdCQUFnQixDQUFDLFVBQVVIO1FBRWxDLE9BQU87WUFDTEUsT0FBT0UsbUJBQW1CLENBQUMsVUFBVUo7WUFDckMsSUFBSTFDLFNBQVNDLE9BQU8sRUFBRTtnQkFDcEJELFNBQVNDLE9BQU8sQ0FBQzhDLE1BQU07WUFDekI7UUFDRjtJQUNGLEdBQUc7UUFBQ2pEO0tBQVU7SUFFZCxxQkFBTyw4REFBQ2tEO1FBQUlDLEtBQUtsRDtRQUFtQm1ELFdBQVU7Ozs7OztBQUNoRDtHQTFGZ0JyRDtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9DaGFydC9DYW5kbGVzdGlja0NoYXJ0LnRzeD84ZDQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0LCBDb2xvclR5cGUsIElDaGFydEFwaSB9IGZyb20gJ2xpZ2h0d2VpZ2h0LWNoYXJ0cyc7XHJcbmltcG9ydCB7IGdldEhpc3RvcmljYWxEYXRhIH0gZnJvbSAnQC9zZXJ2aWNlcy9hcGkvY3J5cHRvQ29tcGFyZUFQSSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbmRsZXN0aWNrQ2hhcnRQcm9wcyB7XHJcbiAgdGltZWZyYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDYW5kbGVzdGlja0NoYXJ0KHsgdGltZWZyYW1lIH06IENhbmRsZXN0aWNrQ2hhcnRQcm9wcykge1xyXG4gIGNvbnN0IGNoYXJ0Q29udGFpbmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcclxuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZjxJQ2hhcnRBcGkgfCBudWxsPihudWxsKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghY2hhcnRDb250YWluZXJSZWYuY3VycmVudCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGNoYXJ0T3B0aW9ucyA9IHtcclxuICAgICAgbGF5b3V0OiB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogeyBjb2xvcjogJyMxRTIyMkQnIH0sXHJcbiAgICAgICAgdGV4dENvbG9yOiAnI0RERCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIGdyaWQ6IHtcclxuICAgICAgICB2ZXJ0TGluZXM6IHsgY29sb3I6ICcjMkIyQjQzJyB9LFxyXG4gICAgICAgIGhvcnpMaW5lczogeyBjb2xvcjogJyMyQjJCNDMnIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGNyb3NzaGFpcjoge1xyXG4gICAgICAgIG1vZGU6IDEsXHJcbiAgICAgICAgdmVydExpbmU6IHtcclxuICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgY29sb3I6ICcjNzU4Njk2JyxcclxuICAgICAgICAgIHN0eWxlOiAzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaG9yekxpbmU6IHtcclxuICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgY29sb3I6ICcjNzU4Njk2JyxcclxuICAgICAgICAgIHN0eWxlOiAzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHRpbWVTY2FsZToge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0UHJpY2VTY2FsZToge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNoYXJ0ID0gY3JlYXRlQ2hhcnQoY2hhcnRDb250YWluZXJSZWYuY3VycmVudCwge1xyXG4gICAgICAuLi5jaGFydE9wdGlvbnMsXHJcbiAgICAgIHdpZHRoOiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY2FuZGxlc3RpY2tTZXJpZXMgPSBjaGFydC5hZGRDYW5kbGVzdGlja1Nlcmllcyh7XHJcbiAgICAgIHVwQ29sb3I6ICcjMjZhNjlhJyxcclxuICAgICAgZG93bkNvbG9yOiAnI2VmNTM1MCcsXHJcbiAgICAgIGJvcmRlclZpc2libGU6IGZhbHNlLFxyXG4gICAgICB3aWNrVXBDb2xvcjogJyMyNmE2OWEnLFxyXG4gICAgICB3aWNrRG93bkNvbG9yOiAnI2VmNTM1MCcsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBGZXRjaCBhbmQgc2V0IGhpc3RvcmljYWwgZGF0YVxyXG4gICAgY29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgaGlzdG9yaWNhbERhdGEgPSBhd2FpdCBnZXRIaXN0b3JpY2FsRGF0YSh0aW1lZnJhbWUpO1xyXG4gICAgICAgIGNhbmRsZXN0aWNrU2VyaWVzLnNldERhdGEoaGlzdG9yaWNhbERhdGEubWFwKGQgPT4gKHtcclxuICAgICAgICAgIHRpbWU6IGQudGltZSxcclxuICAgICAgICAgIG9wZW46IGQub3BlbixcclxuICAgICAgICAgIGhpZ2g6IGQuaGlnaCxcclxuICAgICAgICAgIGxvdzogZC5sb3csXHJcbiAgICAgICAgICBjbG9zZTogZC5jbG9zZVxyXG4gICAgICAgIH0pKSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBoaXN0b3JpY2FsIGRhdGE6JywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGxvYWREYXRhKCk7XHJcbiAgICBjaGFydFJlZi5jdXJyZW50ID0gY2hhcnQ7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xyXG4gICAgICBpZiAoY2hhcnRDb250YWluZXJSZWYuY3VycmVudCAmJiBjaGFydFJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgY2hhcnRSZWYuY3VycmVudC5hcHBseU9wdGlvbnMoe1xyXG4gICAgICAgICAgd2lkdGg6IGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50V2lkdGgsXHJcbiAgICAgICAgICBoZWlnaHQ6IGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xyXG4gICAgICBpZiAoY2hhcnRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNoYXJ0UmVmLmN1cnJlbnQucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSwgW3RpbWVmcmFtZV0pO1xyXG5cclxuICByZXR1cm4gPGRpdiByZWY9e2NoYXJ0Q29udGFpbmVyUmVmfSBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCIgLz47XHJcbn0iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwiY3JlYXRlQ2hhcnQiLCJnZXRIaXN0b3JpY2FsRGF0YSIsIkNhbmRsZXN0aWNrQ2hhcnQiLCJ0aW1lZnJhbWUiLCJjaGFydENvbnRhaW5lclJlZiIsImNoYXJ0UmVmIiwiY3VycmVudCIsImNoYXJ0T3B0aW9ucyIsImxheW91dCIsImJhY2tncm91bmQiLCJjb2xvciIsInRleHRDb2xvciIsImdyaWQiLCJ2ZXJ0TGluZXMiLCJob3J6TGluZXMiLCJjcm9zc2hhaXIiLCJtb2RlIiwidmVydExpbmUiLCJ3aWR0aCIsInN0eWxlIiwiaG9yekxpbmUiLCJ0aW1lU2NhbGUiLCJib3JkZXJDb2xvciIsInJpZ2h0UHJpY2VTY2FsZSIsImNoYXJ0IiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJjYW5kbGVzdGlja1NlcmllcyIsImFkZENhbmRsZXN0aWNrU2VyaWVzIiwidXBDb2xvciIsImRvd25Db2xvciIsImJvcmRlclZpc2libGUiLCJ3aWNrVXBDb2xvciIsIndpY2tEb3duQ29sb3IiLCJsb2FkRGF0YSIsImhpc3RvcmljYWxEYXRhIiwic2V0RGF0YSIsIm1hcCIsImQiLCJ0aW1lIiwib3BlbiIsImhpZ2giLCJsb3ciLCJjbG9zZSIsImVycm9yIiwiY29uc29sZSIsImhhbmRsZVJlc2l6ZSIsImFwcGx5T3B0aW9ucyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlIiwiZGl2IiwicmVmIiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts":
/*!**********************************************!*\
  !*** ./src/services/api/cryptoCompareAPI.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentPrice: function() { return /* binding */ getCurrentPrice; },\n/* harmony export */   getHistoricalData: function() { return /* binding */ getHistoricalData; },\n/* harmony export */   subscribeToPrice: function() { return /* binding */ subscribeToPrice; },\n/* harmony export */   subscribeToTrades: function() { return /* binding */ subscribeToTrades; }\n/* harmony export */ });\nconst TIMEFRAME_CONFIG = {\n    \"1m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 60\n    },\n    \"5m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 300\n    },\n    \"15m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 900\n    },\n    \"30m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 1800\n    },\n    \"1h\": {\n        endpoint: \"histohour\",\n        limit: 720,\n        interval: 3600\n    },\n    \"4h\": {\n        endpoint: \"histohour\",\n        limit: 720,\n        interval: 14400\n    },\n    \"1d\": {\n        endpoint: \"histoday\",\n        limit: 365,\n        interval: 86400\n    },\n    \"1w\": {\n        endpoint: \"histoday\",\n        limit: 365,\n        interval: 604800\n    }\n};\nlet socket = null;\nlet priceUpdateCallbacks = [];\nlet tradeUpdateCallbacks = [];\nlet pendingSubscription = false;\nlet lastPrice = 0;\nlet reconnectAttempts = 0;\nlet currentTimeframe = \"1m\";\nconst MAX_RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 2000;\n// Fallback to REST API when WebSocket fails\nasync function fetchPriceUpdate() {\n    try {\n        const response = await fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD\");\n        const data = await response.json();\n        const price = data.USD;\n        const timestamp = Math.floor(Date.now() / 1000);\n        if (price && !isNaN(price) && price !== lastPrice) {\n            lastPrice = price;\n            priceUpdateCallbacks.forEach((callback)=>callback({\n                    time: timestamp,\n                    value: price\n                }));\n        }\n    } catch (error) {\n        console.error(\"Error fetching price via REST:\", error);\n    }\n}\nfunction sendSubscription(ws) {\n    const subscribeMsg = {\n        \"action\": \"SubAdd\",\n        \"subs\": [\n            \"5~CCCAGG~BTC~USD\",\n            \"2~Coinbase~BTC~USD\",\n            \"11~BTC~USD\" // Direct price feed\n        ]\n    };\n    try {\n        ws.send(JSON.stringify(subscribeMsg));\n        console.log(\"Subscribed to price feeds\");\n        pendingSubscription = false;\n    } catch (error) {\n        console.error(\"Error sending subscription:\", error);\n        pendingSubscription = true;\n    }\n}\n// Update the WebSocket message handler to respect timeframes\nfunction handlePriceUpdate(price, timestamp, timeframe) {\n    const config = TIMEFRAME_CONFIG[timeframe];\n    const interval = config.interval;\n    // Align timestamp to the current timeframe interval\n    const alignedTimestamp = Math.floor(timestamp / interval) * interval;\n    if (price && !isNaN(price) && price !== lastPrice) {\n        lastPrice = price;\n        priceUpdateCallbacks.forEach((callback)=>callback({\n                time: alignedTimestamp,\n                value: price\n            }));\n        if (tradeUpdateCallbacks.length > 0) {\n            tradeUpdateCallbacks.forEach((callback)=>callback({\n                    time: alignedTimestamp,\n                    price: price,\n                    volume24h: 0 // Volume will be updated separately\n                }));\n        }\n    }\n}\nfunction connectWebSocket() {\n    if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.OPEN) {\n        if (pendingSubscription) {\n            sendSubscription(socket);\n        }\n        return;\n    }\n    // Don't try to reconnect too many times\n    if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {\n        console.log(\"Max reconnection attempts reached, falling back to REST API\");\n        // Set up periodic REST API polling as fallback\n        const pollInterval = setInterval(fetchPriceUpdate, 5000);\n        return;\n    }\n    try {\n        // Close existing socket if any\n        if (socket) {\n            socket.close();\n            socket = null;\n        }\n        socket = new WebSocket(\"wss://streamer.cryptocompare.com/v2\");\n        socket.onopen = ()=>{\n            console.log(\"Connected to CryptoCompare WebSocket\");\n            reconnectAttempts = 0; // Reset attempts on successful connection\n            if (socket && socket.readyState === WebSocket.OPEN) {\n                sendSubscription(socket);\n            } else {\n                pendingSubscription = true;\n            }\n        };\n        socket.onmessage = (event)=>{\n            try {\n                const data = JSON.parse(event.data);\n                if (data.TYPE === \"20\" && data.MESSAGE === \"SUBSCRIBECOMPLETE\") {\n                    console.log(\"Successfully subscribed to feeds\");\n                    return;\n                }\n                const timestamp = Math.floor(Date.now() / 1000);\n                let price = null;\n                if (data.TYPE === \"11\" || data.TYPE === \"2\" || data.TYPE === \"5\") {\n                    price = parseFloat(data.PRICE);\n                    if (price && !isNaN(price)) {\n                        handlePriceUpdate(price, timestamp, currentTimeframe);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error processing message:\", error);\n            }\n        };\n        socket.onerror = (error)=>{\n            console.error(\"WebSocket error:\", error);\n            reconnectAttempts++;\n            reconnect();\n        };\n        socket.onclose = (event)=>{\n            console.log(\"WebSocket closed with code \".concat(event.code, \", reason: \").concat(event.reason));\n            reconnect();\n        };\n        // Ping every 15 seconds to keep connection alive\n        const pingInterval = setInterval(()=>{\n            if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.OPEN) {\n                try {\n                    socket.send(JSON.stringify({\n                        \"action\": \"PING\"\n                    }));\n                } catch (error) {\n                    console.error(\"Error sending ping:\", error);\n                    reconnect();\n                }\n            }\n        }, 15000);\n        // Clean up ping interval on socket close\n        socket.addEventListener(\"close\", ()=>clearInterval(pingInterval));\n    } catch (error) {\n        console.error(\"Error creating WebSocket:\", error);\n        reconnectAttempts++;\n        setTimeout(connectWebSocket, RECONNECT_DELAY);\n    }\n}\nfunction reconnect() {\n    if (socket) {\n        try {\n            socket.close();\n        } catch (error) {\n            console.error(\"Error closing socket:\", error);\n        }\n        socket = null;\n    }\n    setTimeout(connectWebSocket, RECONNECT_DELAY * Math.min(reconnectAttempts, 5));\n}\nfunction subscribeToPrice(callback) {\n    let timeframe = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"1m\";\n    currentTimeframe = timeframe;\n    priceUpdateCallbacks.push(callback);\n    // Immediately get current price via REST API\n    getCurrentPrice().then((price)=>{\n        const timestamp = Math.floor(Date.now() / 1000);\n        callback({\n            time: timestamp,\n            value: price\n        });\n    }).catch(console.error);\n    // If this is the first subscriber, connect to WebSocket\n    if (priceUpdateCallbacks.length === 1) {\n        connectWebSocket();\n    }\n    return ()=>{\n        priceUpdateCallbacks = priceUpdateCallbacks.filter((cb)=>cb !== callback);\n        if (priceUpdateCallbacks.length === 0 && tradeUpdateCallbacks.length === 0 && socket) {\n            socket.close();\n            socket = null;\n        }\n    };\n}\nfunction subscribeToTrades(callback) {\n    tradeUpdateCallbacks.push(callback);\n    // If this is the first subscriber, connect to WebSocket\n    if (tradeUpdateCallbacks.length === 1 && priceUpdateCallbacks.length === 0) {\n        connectWebSocket();\n    }\n    return ()=>{\n        tradeUpdateCallbacks = tradeUpdateCallbacks.filter((cb)=>cb !== callback);\n        if (priceUpdateCallbacks.length === 0 && tradeUpdateCallbacks.length === 0 && socket) {\n            socket.close();\n            socket = null;\n        }\n    };\n}\nasync function getCurrentPrice() {\n    try {\n        const response = await fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD\");\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.USD;\n    } catch (error) {\n        console.error(\"Error fetching price:\", error);\n        throw error;\n    }\n}\nasync function getHistoricalData() {\n    let timeframe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"1m\";\n    try {\n        var _data_Data;\n        const config = TIMEFRAME_CONFIG[timeframe];\n        const endTime = Math.floor(Date.now() / 1000);\n        // Calculate the appropriate aggregate parameter based on timeframe\n        let aggregate = 1;\n        if (config.endpoint === \"histominute\") {\n            aggregate = config.interval / 60;\n        } else if (config.endpoint === \"histohour\") {\n            aggregate = config.interval / 3600;\n        } else if (config.endpoint === \"histoday\") {\n            aggregate = config.interval / 86400;\n        }\n        const url = \"https://min-api.cryptocompare.com/data/v2/\".concat(config.endpoint, \"?fsym=BTC&tsym=USD&limit=\").concat(config.limit, \"&toTs=\").concat(endTime, \"&aggregate=\").concat(aggregate);\n        console.log(\"Fetching historical data for \".concat(timeframe, \" timeframe...\"));\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (!((_data_Data = data.Data) === null || _data_Data === void 0 ? void 0 : _data_Data.Data)) {\n            throw new Error(\"Invalid data format received from API\");\n        }\n        return data.Data.Data;\n    } catch (error) {\n        console.error(\"Error fetching historical data:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\n"));

/***/ })

});