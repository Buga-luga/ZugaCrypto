"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* harmony import */ var _services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/moving-averages */ \"(app-pages-browser)/./src/services/strategies/moving-averages.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy, token, exchange } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSignalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Function to get interval in seconds\n    const getIntervalSeconds = (tf)=>{\n        switch(tf){\n            case \"1m\":\n                return 60;\n            case \"5m\":\n                return 300;\n            case \"15m\":\n                return 900;\n            case \"30m\":\n                return 1800;\n            case \"1h\":\n                return 3600;\n            case \"4h\":\n                return 14400;\n            case \"1d\":\n                return 86400;\n            default:\n                return 60;\n        }\n    };\n    // Function to safely remove a series\n    const safelyRemoveSeries = (chart, series)=>{\n        try {\n            if (series && chart) {\n                chart.removeSeries(series);\n            }\n        } catch (e) {\n            console.error(\"Error removing series:\", e);\n        }\n    };\n    // Function to check for crossover signals\n    const checkForSignal = (prevFast, prevSlow, currFast, currSlow, candle, data)=>{\n        if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n            // Calculate average price and range for better positioning\n            const avgPrice = data.reduce((sum, d)=>sum + d.close, 0) / data.length;\n            const priceRange = data.reduce((range, d)=>Math.max(range, Math.abs(d.high - d.low)), 0);\n            const offset = priceRange * 0.75; // Use a percentage of the price range for consistent spacing\n            // Buy signal: Fast crosses above Slow\n            if (prevFast <= prevSlow && currFast > currSlow) {\n                return {\n                    time: candle.time,\n                    position: \"belowBar\",\n                    color: \"#26a69a\",\n                    shape: \"arrowUp\",\n                    text: \"Buy \".concat(candle.close.toFixed(2)),\n                    size: 2,\n                    value: Math.min(...data.slice(-10).map((d)=>d.low)) - offset\n                };\n            } else if (prevFast >= prevSlow && currFast < currSlow) {\n                return {\n                    time: candle.time,\n                    position: \"aboveBar\",\n                    color: \"#ef5350\",\n                    shape: \"arrowDown\",\n                    text: \"Sell \".concat(candle.close.toFixed(2)),\n                    size: 2,\n                    value: Math.max(...data.slice(-10).map((d)=>d.high)) + offset\n                };\n            }\n        }\n        return null;\n    };\n    // Function to add strategy indicators\n    const addStrategyIndicators = (chart, data)=>{\n        console.log(\"Adding strategy indicators\");\n        // Clear any existing indicators\n        indicatorSeriesRefs.current.forEach((series)=>safelyRemoveSeries(chart, series));\n        indicatorSeriesRefs.current.clear();\n        if (markerSeriesRef.current) {\n            safelyRemoveSeries(chart, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n        }\n        if (strategy === \"none\") return;\n        const prices = data.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        // Calculate indicators based on strategy type\n        switch(strategy){\n            case \"ema_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                break;\n            case \"sma_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                break;\n            case \"tema_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                break;\n            case \"golden_cross\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                break;\n            case \"hull_crossover\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                break;\n            case \"ema_5_13\":\n                fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                break;\n            case \"macd_crossover\":\n                const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n                fastLine = macdData.macd;\n                slowLine = macdData.signal;\n                break;\n        }\n        // Add indicator lines\n        const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n        if (!selectedStrategy) return;\n        const colors = [\n            \"#2962FF\",\n            \"#FF6B6B\"\n        ]; // Blue for fast, Red for slow\n        selectedStrategy.indicators.forEach((indicator, index)=>{\n            const lineSeries = chart.addLineSeries({\n                color: colors[index],\n                lineWidth: 2,\n                title: indicator.name,\n                priceFormat: {\n                    type: \"price\",\n                    precision: 2,\n                    minMove: 0.01\n                }\n            });\n            indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n            // Set indicator data\n            const lineData = (index === 0 ? fastLine : slowLine).map((value, idx)=>({\n                    time: data[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            lineSeries.setData(lineData);\n        });\n        // Create marker series\n        markerSeriesRef.current = chart.addLineSeries({\n            lastValueVisible: false,\n            priceLineVisible: false,\n            crosshairMarkerVisible: false,\n            lineVisible: false,\n            lineWidth: 1,\n            color: \"rgba(0, 0, 0, 0)\"\n        });\n        // Find and set signals\n        const signals = [];\n        for(let i = 1; i < data.length; i++){\n            const signal = checkForSignal(fastLine[i - 1], slowLine[i - 1], fastLine[i], slowLine[i], data[i], data.slice(Math.max(0, i - 10), i + 1));\n            if (signal) {\n                signals.push(signal);\n            }\n        }\n        if (signals.length > 0) {\n            markerSeriesRef.current.setMarkers(signals);\n            markerSeriesRef.current.setData(signals.map((signal)=>({\n                    time: signal.time,\n                    value: signal.value\n                })));\n        }\n    };\n    // Modify the real-time signal check\n    const checkRealTimeSignal = (data)=>{\n        if (!markerSeriesRef.current || data.length < 2) return;\n        const prices = data.map((d)=>d.close);\n        const fastPeriod = 9;\n        const slowPeriod = 21;\n        const fastMA = strategy === \"ema_crossover\" ? (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, fastPeriod) : (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, fastPeriod);\n        const slowMA = strategy === \"ema_crossover\" ? (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, slowPeriod) : (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, slowPeriod);\n        const signal = checkForSignal(fastMA[fastMA.length - 2], slowMA[slowMA.length - 2], fastMA[fastMA.length - 1], slowMA[slowMA.length - 1], data[data.length - 1], data.slice(-10) // Pass last 10 candles for context\n        );\n        if (signal) {\n            const existingMarkers = markerSeriesRef.current.markers() || [];\n            console.log(\"Adding real-time \".concat(signal.text, \" signal\"));\n            markerSeriesRef.current.setMarkers([\n                ...existingMarkers,\n                signal\n            ]);\n        }\n    };\n    // Effect for strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (chartRef.current && historicalDataRef.current.length > 0) {\n            addStrategyIndicators(chartRef.current, historicalDataRef.current);\n        }\n    }, [\n        strategy\n    ]);\n    // Main chart initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\"\n            },\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        });\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\"\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Remove TradingView logo elements\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created and after a delay\n        removeTradingViewLogo();\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        // Load initial data\n        const loadData = async ()=>{\n            try {\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n                // Initialize current candle from last historical candle\n                if (data.length > 0) {\n                    const lastCandle = data[data.length - 1];\n                    currentCandleRef.current = {\n                        time: lastCandle.time,\n                        open: lastCandle.close,\n                        high: lastCandle.close,\n                        low: lastCandle.close,\n                        close: lastCandle.close\n                    };\n                }\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadData();\n        // Real-time updates\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (!candlestickSeriesRef.current) return;\n            const intervalSeconds = getIntervalSeconds(timeframe);\n            const candleTimestamp = Math.floor(data.time / intervalSeconds) * intervalSeconds;\n            // If this is a new candle\n            if (!currentCandleRef.current || candleTimestamp !== currentCandleRef.current.time) {\n                // If we had a previous candle, add it to historical data and check for signals\n                if (currentCandleRef.current) {\n                    historicalDataRef.current = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    // Update strategies with the new historical data\n                    if (strategy !== \"none\" && chartRef.current) {\n                        addStrategyIndicators(chartRef.current, historicalDataRef.current);\n                    }\n                }\n                // Start new candle\n                currentCandleRef.current = {\n                    time: candleTimestamp,\n                    open: data.value,\n                    high: data.value,\n                    low: data.value,\n                    close: data.value\n                };\n            } else {\n                // Update current candle\n                currentCandleRef.current.high = Math.max(currentCandleRef.current.high, data.value);\n                currentCandleRef.current.low = Math.min(currentCandleRef.current.low, data.value);\n                currentCandleRef.current.close = data.value;\n                // Check for real-time signals with current candle\n                if (strategy !== \"none\" && chartRef.current && historicalDataRef.current.length > 0) {\n                    const updatedData = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    checkRealTimeSignal(updatedData);\n                }\n            }\n            // Update the chart with current candle\n            candlestickSeriesRef.current.update(currentCandleRef.current);\n        }, timeframe);\n        // Handle window resize\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            chart.remove();\n        };\n    }, [\n        timeframe\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: chartContainerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 408,\n        columnNumber: 10\n    }, this);\n}\n_s(CandlestickChart, \"b+lEihv/5eOeyLxDEr+YsOXIV6U=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NhbmRsZXN0aWNrQ2hhcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFMEM7QUFDTztBQUNnRDtBQUNqQztBQU9qQjtBQWlCeEMsU0FBU1csaUJBQWlCLEtBQStEO1FBQS9ELEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBeUIsR0FBL0Q7O0lBQy9CLE1BQU1DLG9CQUFvQmYsNkNBQU1BLENBQWlCO0lBQ2pELE1BQU1nQixXQUFXaEIsNkNBQU1BLENBQW1CO0lBQzFDLE1BQU1pQix1QkFBdUJqQiw2Q0FBTUEsQ0FBTTtJQUN6QyxNQUFNa0Isc0JBQXNCbEIsNkNBQU1BLENBQW1CLElBQUltQjtJQUN6RCxNQUFNQyxrQkFBa0JwQiw2Q0FBTUEsQ0FBTTtJQUNwQyxNQUFNcUIsb0JBQW9CckIsNkNBQU1BLENBQVEsRUFBRTtJQUMxQyxNQUFNc0IsbUJBQW1CdEIsNkNBQU1BLENBQU07SUFDckMsTUFBTXVCLGdCQUFnQnZCLDZDQUFNQSxDQUFnRDtJQUU1RSxzQ0FBc0M7SUFDdEMsTUFBTXdCLHFCQUFxQixDQUFDQztRQUMxQixPQUFRQTtZQUNOLEtBQUs7Z0JBQU0sT0FBTztZQUNsQixLQUFLO2dCQUFNLE9BQU87WUFDbEIsS0FBSztnQkFBTyxPQUFPO1lBQ25CLEtBQUs7Z0JBQU8sT0FBTztZQUNuQixLQUFLO2dCQUFNLE9BQU87WUFDbEIsS0FBSztnQkFBTSxPQUFPO1lBQ2xCLEtBQUs7Z0JBQU0sT0FBTztZQUNsQjtnQkFBUyxPQUFPO1FBQ2xCO0lBQ0Y7SUFFQSxxQ0FBcUM7SUFDckMsTUFBTUMscUJBQXFCLENBQUNDLE9BQWtCQztRQUM1QyxJQUFJO1lBQ0YsSUFBSUEsVUFBVUQsT0FBTztnQkFDbkJBLE1BQU1FLFlBQVksQ0FBQ0Q7WUFDckI7UUFDRixFQUFFLE9BQU9FLEdBQUc7WUFDVkMsUUFBUUMsS0FBSyxDQUFDLDBCQUEw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QUFRNUcsa0JBQWtCcUQsT0FBTyxDQUFDd0QsWUFBWTtnQkFDaEQ7WUFDRjtRQUNGO1FBRUE0QixPQUFPQyxnQkFBZ0IsQ0FBQyxVQUFVSDtRQUVsQyxPQUFPO1lBQ0xFLE9BQU9FLG1CQUFtQixDQUFDLFVBQVVKO1lBQ3JDSyxhQUFhaEI7WUFDYks7WUFDQXJILE1BQU02RyxNQUFNO1FBQ2Q7SUFDRixHQUFHO1FBQUM3SDtLQUFVO0lBRWQscUJBQU8sOERBQUNpSjtRQUFJQyxLQUFLOUk7UUFBbUIrSSxXQUFVOzs7Ozs7QUFDaEQ7R0EzWGdCcEo7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvQ2FuZGxlc3RpY2tDaGFydC50c3g/OGQ0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XHJcbmltcG9ydCB7IFRpbWUsIElDaGFydEFwaSwgQ2hhcnRPcHRpb25zLCBEZWVwUGFydGlhbCwgTGluZVdpZHRoLCBCdXNpbmVzc0RheSwgVVRDVGltZXN0YW1wIH0gZnJvbSAnbGlnaHR3ZWlnaHQtY2hhcnRzJztcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0IH0gZnJvbSAnbGlnaHR3ZWlnaHQtY2hhcnRzJztcclxuaW1wb3J0IHsgZ2V0SGlzdG9yaWNhbERhdGEsIHN1YnNjcmliZVRvUHJpY2UsIFRpbWVmcmFtZSB9IGZyb20gJ0Avc2VydmljZXMvYXBpL2NyeXB0b0NvbXBhcmVBUEknO1xyXG5pbXBvcnQgeyBTdHJhdGVneUlkLCBnZXRTdHJhdGVneSB9IGZyb20gJ0Avc2VydmljZXMvc3RyYXRlZ2llcyc7XHJcbmltcG9ydCB7IFxyXG4gIGNhbGN1bGF0ZUVNQSxcclxuICBjYWxjdWxhdGVTTUEsXHJcbiAgY2FsY3VsYXRlVEVNQSxcclxuICBjYWxjdWxhdGVITUEsXHJcbiAgY2FsY3VsYXRlTUFDRFxyXG59IGZyb20gJ0Avc2VydmljZXMvc3RyYXRlZ2llcy9tb3ZpbmctYXZlcmFnZXMnO1xyXG5cclxuaW50ZXJmYWNlIENhbmRsZXN0aWNrQ2hhcnRQcm9wcyB7XHJcbiAgdGltZWZyYW1lOiBUaW1lZnJhbWU7XHJcbiAgc3RyYXRlZ3k6IFN0cmF0ZWd5SWQ7XHJcbiAgdG9rZW46IHN0cmluZztcclxuICBleGNoYW5nZTogJ3VuaXN3YXAnIHwgJ3JheWRpdW0nIHwgJ2NvaW5iYXNlJztcclxufVxyXG5cclxuaW50ZXJmYWNlIENhbmRsZSB7XHJcbiAgdGltZTogVGltZTtcclxuICBvcGVuOiBudW1iZXI7XHJcbiAgaGlnaDogbnVtYmVyO1xyXG4gIGxvdzogbnVtYmVyO1xyXG4gIGNsb3NlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDYW5kbGVzdGlja0NoYXJ0KHsgdGltZWZyYW1lLCBzdHJhdGVneSwgdG9rZW4sIGV4Y2hhbmdlIH06IENhbmRsZXN0aWNrQ2hhcnRQcm9wcykge1xyXG4gIGNvbnN0IGNoYXJ0Q29udGFpbmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcclxuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZjxJQ2hhcnRBcGkgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBjYW5kbGVzdGlja1Nlcmllc1JlZiA9IHVzZVJlZjxhbnk+KG51bGwpO1xyXG4gIGNvbnN0IGluZGljYXRvclNlcmllc1JlZnMgPSB1c2VSZWY8TWFwPHN0cmluZywgYW55Pj4obmV3IE1hcCgpKTtcclxuICBjb25zdCBtYXJrZXJTZXJpZXNSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcclxuICBjb25zdCBoaXN0b3JpY2FsRGF0YVJlZiA9IHVzZVJlZjxhbnlbXT4oW10pO1xyXG4gIGNvbnN0IGN1cnJlbnRDYW5kbGVSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcclxuICBjb25zdCBsYXN0U2lnbmFsUmVmID0gdXNlUmVmPHsgdGltZTogbnVtYmVyLCB0eXBlOiAnYnV5JyB8ICdzZWxsJyB9IHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIC8vIEZ1bmN0aW9uIHRvIGdldCBpbnRlcnZhbCBpbiBzZWNvbmRzXHJcbiAgY29uc3QgZ2V0SW50ZXJ2YWxTZWNvbmRzID0gKHRmOiBUaW1lZnJhbWUpOiBudW1iZXIgPT4ge1xyXG4gICAgc3dpdGNoICh0Zikge1xyXG4gICAgICBjYXNlICcxbSc6IHJldHVybiA2MDtcclxuICAgICAgY2FzZSAnNW0nOiByZXR1cm4gMzAwO1xyXG4gICAgICBjYXNlICcxNW0nOiByZXR1cm4gOTAwO1xyXG4gICAgICBjYXNlICczMG0nOiByZXR1cm4gMTgwMDtcclxuICAgICAgY2FzZSAnMWgnOiByZXR1cm4gMzYwMDtcclxuICAgICAgY2FzZSAnNGgnOiByZXR1cm4gMTQ0MDA7XHJcbiAgICAgIGNhc2UgJzFkJzogcmV0dXJuIDg2NDAwO1xyXG4gICAgICBkZWZhdWx0OiByZXR1cm4gNjA7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gRnVuY3Rpb24gdG8gc2FmZWx5IHJlbW92ZSBhIHNlcmllc1xyXG4gIGNvbnN0IHNhZmVseVJlbW92ZVNlcmllcyA9IChjaGFydDogSUNoYXJ0QXBpLCBzZXJpZXM6IGFueSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHNlcmllcyAmJiBjaGFydCkge1xyXG4gICAgICAgIGNoYXJ0LnJlbW92ZVNlcmllcyhzZXJpZXMpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlbW92aW5nIHNlcmllczonLCBlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBGdW5jdGlvbiB0byBjaGVjayBmb3IgY3Jvc3NvdmVyIHNpZ25hbHNcclxuICBjb25zdCBjaGVja0ZvclNpZ25hbCA9IChcclxuICAgIHByZXZGYXN0OiBudW1iZXIsXHJcbiAgICBwcmV2U2xvdzogbnVtYmVyLFxyXG4gICAgY3VyckZhc3Q6IG51bWJlcixcclxuICAgIGN1cnJTbG93OiBudW1iZXIsXHJcbiAgICBjYW5kbGU6IGFueSxcclxuICAgIGRhdGE6IGFueVtdXHJcbiAgKSA9PiB7XHJcbiAgICBpZiAoIWlzTmFOKHByZXZGYXN0KSAmJiAhaXNOYU4ocHJldlNsb3cpICYmICFpc05hTihjdXJyRmFzdCkgJiYgIWlzTmFOKGN1cnJTbG93KSkge1xyXG4gICAgICAvLyBDYWxjdWxhdGUgYXZlcmFnZSBwcmljZSBhbmQgcmFuZ2UgZm9yIGJldHRlciBwb3NpdGlvbmluZ1xyXG4gICAgICBjb25zdCBhdmdQcmljZSA9IGRhdGEucmVkdWNlKChzdW0sIGQpID0+IHN1bSArIGQuY2xvc2UsIDApIC8gZGF0YS5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IHByaWNlUmFuZ2UgPSBkYXRhLnJlZHVjZSgocmFuZ2UsIGQpID0+IE1hdGgubWF4KHJhbmdlLCBNYXRoLmFicyhkLmhpZ2ggLSBkLmxvdykpLCAwKTtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gcHJpY2VSYW5nZSAqIDAuNzU7IC8vIFVzZSBhIHBlcmNlbnRhZ2Ugb2YgdGhlIHByaWNlIHJhbmdlIGZvciBjb25zaXN0ZW50IHNwYWNpbmdcclxuXHJcbiAgICAgIC8vIEJ1eSBzaWduYWw6IEZhc3QgY3Jvc3NlcyBhYm92ZSBTbG93XHJcbiAgICAgIGlmIChwcmV2RmFzdCA8PSBwcmV2U2xvdyAmJiBjdXJyRmFzdCA+IGN1cnJTbG93KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRpbWU6IGNhbmRsZS50aW1lLFxyXG4gICAgICAgICAgcG9zaXRpb246ICdiZWxvd0JhcicsXHJcbiAgICAgICAgICBjb2xvcjogJyMyNmE2OWEnLFxyXG4gICAgICAgICAgc2hhcGU6ICdhcnJvd1VwJyxcclxuICAgICAgICAgIHRleHQ6IGBCdXkgJHtjYW5kbGUuY2xvc2UudG9GaXhlZCgyKX1gLFxyXG4gICAgICAgICAgc2l6ZTogMixcclxuICAgICAgICAgIHZhbHVlOiBNYXRoLm1pbiguLi5kYXRhLnNsaWNlKC0xMCkubWFwKGQgPT4gZC5sb3cpKSAtIG9mZnNldCwgLy8gUG9zaXRpb24gYmVsb3cgcmVjZW50IGxvd3NcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFNlbGwgc2lnbmFsOiBGYXN0IGNyb3NzZXMgYmVsb3cgU2xvd1xyXG4gICAgICBlbHNlIGlmIChwcmV2RmFzdCA+PSBwcmV2U2xvdyAmJiBjdXJyRmFzdCA8IGN1cnJTbG93KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRpbWU6IGNhbmRsZS50aW1lLFxyXG4gICAgICAgICAgcG9zaXRpb246ICdhYm92ZUJhcicsXHJcbiAgICAgICAgICBjb2xvcjogJyNlZjUzNTAnLFxyXG4gICAgICAgICAgc2hhcGU6ICdhcnJvd0Rvd24nLFxyXG4gICAgICAgICAgdGV4dDogYFNlbGwgJHtjYW5kbGUuY2xvc2UudG9GaXhlZCgyKX1gLFxyXG4gICAgICAgICAgc2l6ZTogMixcclxuICAgICAgICAgIHZhbHVlOiBNYXRoLm1heCguLi5kYXRhLnNsaWNlKC0xMCkubWFwKGQgPT4gZC5oaWdoKSkgKyBvZmZzZXQsIC8vIFBvc2l0aW9uIGFib3ZlIHJlY2VudCBoaWdoc1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH07XHJcblxyXG4gIC8vIEZ1bmN0aW9uIHRvIGFkZCBzdHJhdGVneSBpbmRpY2F0b3JzXHJcbiAgY29uc3QgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzID0gKGNoYXJ0OiBJQ2hhcnRBcGksIGRhdGE6IGFueVtdKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnQWRkaW5nIHN0cmF0ZWd5IGluZGljYXRvcnMnKTtcclxuICAgIFxyXG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGluZGljYXRvcnNcclxuICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5mb3JFYWNoKHNlcmllcyA9PiBzYWZlbHlSZW1vdmVTZXJpZXMoY2hhcnQsIHNlcmllcykpO1xyXG4gICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LmNsZWFyKCk7XHJcbiAgICBcclxuICAgIGlmIChtYXJrZXJTZXJpZXNSZWYuY3VycmVudCkge1xyXG4gICAgICBzYWZlbHlSZW1vdmVTZXJpZXMoY2hhcnQsIG1hcmtlclNlcmllc1JlZi5jdXJyZW50KTtcclxuICAgICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzdHJhdGVneSA9PT0gJ25vbmUnKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgcHJpY2VzID0gZGF0YS5tYXAoZCA9PiBkLmNsb3NlKTtcclxuICAgIGxldCBmYXN0TGluZTogbnVtYmVyW10gPSBbXTtcclxuICAgIGxldCBzbG93TGluZTogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgaW5kaWNhdG9ycyBiYXNlZCBvbiBzdHJhdGVneSB0eXBlXHJcbiAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XHJcbiAgICAgIGNhc2UgJ2VtYV9jcm9zc292ZXInOlxyXG4gICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgOSk7XHJcbiAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAyMSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3NtYV9jcm9zc292ZXInOlxyXG4gICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlU01BKHByaWNlcywgOSk7XHJcbiAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3RlbWFfY3Jvc3NvdmVyJzpcclxuICAgICAgICBmYXN0TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCA3KTtcclxuICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCAyMSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2dvbGRlbl9jcm9zcyc6XHJcbiAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCA1MCk7XHJcbiAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMDApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdodWxsX2Nyb3Nzb3Zlcic6XHJcbiAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVITUEocHJpY2VzLCA5KTtcclxuICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZUhNQShwcmljZXMsIDIxKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZW1hXzVfMTMnOlxyXG4gICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgNSk7XHJcbiAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAxMyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ21hY2RfY3Jvc3NvdmVyJzpcclxuICAgICAgICBjb25zdCBtYWNkRGF0YSA9IGNhbGN1bGF0ZU1BQ0QocHJpY2VzKTtcclxuICAgICAgICBmYXN0TGluZSA9IG1hY2REYXRhLm1hY2Q7XHJcbiAgICAgICAgc2xvd0xpbmUgPSBtYWNkRGF0YS5zaWduYWw7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIGluZGljYXRvciBsaW5lc1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRTdHJhdGVneSA9IGdldFN0cmF0ZWd5KHN0cmF0ZWd5KTtcclxuICAgIGlmICghc2VsZWN0ZWRTdHJhdGVneSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGNvbG9ycyA9IFsnIzI5NjJGRicsICcjRkY2QjZCJ107IC8vIEJsdWUgZm9yIGZhc3QsIFJlZCBmb3Igc2xvd1xyXG4gICAgc2VsZWN0ZWRTdHJhdGVneS5pbmRpY2F0b3JzLmZvckVhY2goKGluZGljYXRvciwgaW5kZXgpID0+IHtcclxuICAgICAgY29uc3QgbGluZVNlcmllcyA9IGNoYXJ0LmFkZExpbmVTZXJpZXMoe1xyXG4gICAgICAgIGNvbG9yOiBjb2xvcnNbaW5kZXhdLFxyXG4gICAgICAgIGxpbmVXaWR0aDogMixcclxuICAgICAgICB0aXRsZTogaW5kaWNhdG9yLm5hbWUsXHJcbiAgICAgICAgcHJpY2VGb3JtYXQ6IHtcclxuICAgICAgICAgIHR5cGU6ICdwcmljZScsXHJcbiAgICAgICAgICBwcmVjaXNpb246IDIsXHJcbiAgICAgICAgICBtaW5Nb3ZlOiAwLjAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuc2V0KGluZGljYXRvci5uYW1lLCBsaW5lU2VyaWVzKTtcclxuXHJcbiAgICAgIC8vIFNldCBpbmRpY2F0b3IgZGF0YVxyXG4gICAgICBjb25zdCBsaW5lRGF0YSA9IChpbmRleCA9PT0gMCA/IGZhc3RMaW5lIDogc2xvd0xpbmUpXHJcbiAgICAgICAgLm1hcCgodmFsdWUsIGlkeCkgPT4gKHtcclxuICAgICAgICAgIHRpbWU6IGRhdGFbaWR4XS50aW1lLFxyXG4gICAgICAgICAgdmFsdWU6IGlzTmFOKHZhbHVlKSA/IG51bGwgOiB2YWx1ZVxyXG4gICAgICAgIH0pKVxyXG4gICAgICAgIC5maWx0ZXIoZCA9PiBkLnZhbHVlICE9PSBudWxsKTtcclxuXHJcbiAgICAgIGxpbmVTZXJpZXMuc2V0RGF0YShsaW5lRGF0YSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDcmVhdGUgbWFya2VyIHNlcmllc1xyXG4gICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBjaGFydC5hZGRMaW5lU2VyaWVzKHtcclxuICAgICAgbGFzdFZhbHVlVmlzaWJsZTogZmFsc2UsXHJcbiAgICAgIHByaWNlTGluZVZpc2libGU6IGZhbHNlLFxyXG4gICAgICBjcm9zc2hhaXJNYXJrZXJWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxyXG4gICAgICBsaW5lV2lkdGg6IDEgYXMgTGluZVdpZHRoLFxyXG4gICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRmluZCBhbmQgc2V0IHNpZ25hbHNcclxuICAgIGNvbnN0IHNpZ25hbHMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBzaWduYWwgPSBjaGVja0ZvclNpZ25hbChcclxuICAgICAgICBmYXN0TGluZVtpIC0gMV0sXHJcbiAgICAgICAgc2xvd0xpbmVbaSAtIDFdLFxyXG4gICAgICAgIGZhc3RMaW5lW2ldLFxyXG4gICAgICAgIHNsb3dMaW5lW2ldLFxyXG4gICAgICAgIGRhdGFbaV0sXHJcbiAgICAgICAgZGF0YS5zbGljZShNYXRoLm1heCgwLCBpIC0gMTApLCBpICsgMSlcclxuICAgICAgKTtcclxuICAgICAgaWYgKHNpZ25hbCkge1xyXG4gICAgICAgIHNpZ25hbHMucHVzaChzaWduYWwpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNpZ25hbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXRNYXJrZXJzKHNpZ25hbHMpO1xyXG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXREYXRhKHNpZ25hbHMubWFwKHNpZ25hbCA9PiAoe1xyXG4gICAgICAgIHRpbWU6IHNpZ25hbC50aW1lLFxyXG4gICAgICAgIHZhbHVlOiBzaWduYWwudmFsdWVcclxuICAgICAgfSkpKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBNb2RpZnkgdGhlIHJlYWwtdGltZSBzaWduYWwgY2hlY2tcclxuICBjb25zdCBjaGVja1JlYWxUaW1lU2lnbmFsID0gKGRhdGE6IGFueVtdKSA9PiB7XHJcbiAgICBpZiAoIW1hcmtlclNlcmllc1JlZi5jdXJyZW50IHx8IGRhdGEubGVuZ3RoIDwgMikgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHByaWNlcyA9IGRhdGEubWFwKGQgPT4gZC5jbG9zZSk7XHJcbiAgICBjb25zdCBmYXN0UGVyaW9kID0gOTtcclxuICAgIGNvbnN0IHNsb3dQZXJpb2QgPSAyMTtcclxuXHJcbiAgICBjb25zdCBmYXN0TUEgPSBzdHJhdGVneSA9PT0gJ2VtYV9jcm9zc292ZXInIFxyXG4gICAgICA/IGNhbGN1bGF0ZUVNQShwcmljZXMsIGZhc3RQZXJpb2QpXHJcbiAgICAgIDogY2FsY3VsYXRlU01BKHByaWNlcywgZmFzdFBlcmlvZCk7XHJcbiAgICBjb25zdCBzbG93TUEgPSBzdHJhdGVneSA9PT0gJ2VtYV9jcm9zc292ZXInXHJcbiAgICAgID8gY2FsY3VsYXRlRU1BKHByaWNlcywgc2xvd1BlcmlvZClcclxuICAgICAgOiBjYWxjdWxhdGVTTUEocHJpY2VzLCBzbG93UGVyaW9kKTtcclxuXHJcbiAgICBjb25zdCBzaWduYWwgPSBjaGVja0ZvclNpZ25hbChcclxuICAgICAgZmFzdE1BW2Zhc3RNQS5sZW5ndGggLSAyXSxcclxuICAgICAgc2xvd01BW3Nsb3dNQS5sZW5ndGggLSAyXSxcclxuICAgICAgZmFzdE1BW2Zhc3RNQS5sZW5ndGggLSAxXSxcclxuICAgICAgc2xvd01BW3Nsb3dNQS5sZW5ndGggLSAxXSxcclxuICAgICAgZGF0YVtkYXRhLmxlbmd0aCAtIDFdLFxyXG4gICAgICBkYXRhLnNsaWNlKC0xMCkgLy8gUGFzcyBsYXN0IDEwIGNhbmRsZXMgZm9yIGNvbnRleHRcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHNpZ25hbCkge1xyXG4gICAgICBjb25zdCBleGlzdGluZ01hcmtlcnMgPSBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5tYXJrZXJzKCkgfHwgW107XHJcbiAgICAgIGNvbnNvbGUubG9nKGBBZGRpbmcgcmVhbC10aW1lICR7c2lnbmFsLnRleHR9IHNpZ25hbGApO1xyXG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXRNYXJrZXJzKFsuLi5leGlzdGluZ01hcmtlcnMsIHNpZ25hbF0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIEVmZmVjdCBmb3Igc3RyYXRlZ3kgY2hhbmdlc1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoY2hhcnRSZWYuY3VycmVudCAmJiBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzKGNoYXJ0UmVmLmN1cnJlbnQsIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQpO1xyXG4gICAgfVxyXG4gIH0sIFtzdHJhdGVneV0pO1xyXG5cclxuICAvLyBNYWluIGNoYXJ0IGluaXRpYWxpemF0aW9uIGVmZmVjdFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIWNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBjaGFydCA9IGNyZWF0ZUNoYXJ0KGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQsIHtcclxuICAgICAgbGF5b3V0OiB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogeyBjb2xvcjogJyMxRTIyMkQnIH0sXHJcbiAgICAgICAgdGV4dENvbG9yOiAnI0RERCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIGdyaWQ6IHtcclxuICAgICAgICB2ZXJ0TGluZXM6IHsgY29sb3I6ICcjMkIyQjQzJyB9LFxyXG4gICAgICAgIGhvcnpMaW5lczogeyBjb2xvcjogJyMyQjJCNDMnIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHRpbWVTY2FsZToge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXHJcbiAgICAgICAgdGltZVZpc2libGU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0UHJpY2VTY2FsZToge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZHRoOiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY2FuZGxlc3RpY2tTZXJpZXMgPSBjaGFydC5hZGRDYW5kbGVzdGlja1Nlcmllcyh7XHJcbiAgICAgIHVwQ29sb3I6ICcjMjZhNjlhJyxcclxuICAgICAgZG93bkNvbG9yOiAnI2VmNTM1MCcsXHJcbiAgICAgIGJvcmRlclZpc2libGU6IGZhbHNlLFxyXG4gICAgICB3aWNrVXBDb2xvcjogJyMyNmE2OWEnLFxyXG4gICAgICB3aWNrRG93bkNvbG9yOiAnI2VmNTM1MCcsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjYW5kbGVzdGlja1Nlcmllc1JlZi5jdXJyZW50ID0gY2FuZGxlc3RpY2tTZXJpZXM7XHJcbiAgICBjaGFydFJlZi5jdXJyZW50ID0gY2hhcnQ7XHJcblxyXG4gICAgLy8gUmVtb3ZlIFRyYWRpbmdWaWV3IGxvZ28gZWxlbWVudHNcclxuICAgIGNvbnN0IHJlbW92ZVRyYWRpbmdWaWV3TG9nbyA9ICgpID0+IHtcclxuICAgICAgY29uc3QgbG9nb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHYtYXR0ci1sb2dvJyk7XHJcbiAgICAgIGlmIChsb2dvRWxlbWVudCkge1xyXG4gICAgICAgIGxvZ29FbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBoZWFkZXJMb2dvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnR2LWhlYWRlcl9fbGluaycpO1xyXG4gICAgICBpZiAoaGVhZGVyTG9nbykge1xyXG4gICAgICAgIGhlYWRlckxvZ28ucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gUnVuIGxvZ28gcmVtb3ZhbCBhZnRlciBjaGFydCBpcyBjcmVhdGVkIGFuZCBhZnRlciBhIGRlbGF5XHJcbiAgICByZW1vdmVUcmFkaW5nVmlld0xvZ28oKTtcclxuICAgIGNvbnN0IGxvZ29UaW1lb3V0SWQgPSBzZXRUaW1lb3V0KHJlbW92ZVRyYWRpbmdWaWV3TG9nbywgMTAwKTtcclxuXHJcbiAgICAvLyBMb2FkIGluaXRpYWwgZGF0YVxyXG4gICAgY29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldEhpc3RvcmljYWxEYXRhKHRpbWVmcmFtZSk7XHJcbiAgICAgICAgaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudCA9IGRhdGE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2FuZGxlc3RpY2tTZXJpZXMuc2V0RGF0YShkYXRhKTtcclxuXHJcbiAgICAgICAgaWYgKHN0cmF0ZWd5ICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgIGFkZFN0cmF0ZWd5SW5kaWNhdG9ycyhjaGFydCwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIGN1cnJlbnQgY2FuZGxlIGZyb20gbGFzdCBoaXN0b3JpY2FsIGNhbmRsZVxyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGxhc3RDYW5kbGUgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQgPSB7XHJcbiAgICAgICAgICAgIHRpbWU6IGxhc3RDYW5kbGUudGltZSxcclxuICAgICAgICAgICAgb3BlbjogbGFzdENhbmRsZS5jbG9zZSxcclxuICAgICAgICAgICAgaGlnaDogbGFzdENhbmRsZS5jbG9zZSxcclxuICAgICAgICAgICAgbG93OiBsYXN0Q2FuZGxlLmNsb3NlLFxyXG4gICAgICAgICAgICBjbG9zZTogbGFzdENhbmRsZS5jbG9zZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBkYXRhOicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBsb2FkRGF0YSgpO1xyXG5cclxuICAgIC8vIFJlYWwtdGltZSB1cGRhdGVzXHJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHN1YnNjcmliZVRvUHJpY2UoKGRhdGEpID0+IHtcclxuICAgICAgaWYgKCFjYW5kbGVzdGlja1Nlcmllc1JlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgICBjb25zdCBpbnRlcnZhbFNlY29uZHMgPSBnZXRJbnRlcnZhbFNlY29uZHModGltZWZyYW1lKTtcclxuICAgICAgY29uc3QgY2FuZGxlVGltZXN0YW1wID0gTWF0aC5mbG9vcihkYXRhLnRpbWUgLyBpbnRlcnZhbFNlY29uZHMpICogaW50ZXJ2YWxTZWNvbmRzO1xyXG5cclxuICAgICAgLy8gSWYgdGhpcyBpcyBhIG5ldyBjYW5kbGVcclxuICAgICAgaWYgKCFjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQgfHwgY2FuZGxlVGltZXN0YW1wICE9PSBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQudGltZSkge1xyXG4gICAgICAgIC8vIElmIHdlIGhhZCBhIHByZXZpb3VzIGNhbmRsZSwgYWRkIGl0IHRvIGhpc3RvcmljYWwgZGF0YSBhbmQgY2hlY2sgZm9yIHNpZ25hbHNcclxuICAgICAgICBpZiAoY3VycmVudENhbmRsZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50ID0gWy4uLmhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQsIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudF07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFVwZGF0ZSBzdHJhdGVnaWVzIHdpdGggdGhlIG5ldyBoaXN0b3JpY2FsIGRhdGFcclxuICAgICAgICAgIGlmIChzdHJhdGVneSAhPT0gJ25vbmUnICYmIGNoYXJ0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzKGNoYXJ0UmVmLmN1cnJlbnQsIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RhcnQgbmV3IGNhbmRsZVxyXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCA9IHtcclxuICAgICAgICAgIHRpbWU6IGNhbmRsZVRpbWVzdGFtcCxcclxuICAgICAgICAgIG9wZW46IGRhdGEudmFsdWUsXHJcbiAgICAgICAgICBoaWdoOiBkYXRhLnZhbHVlLFxyXG4gICAgICAgICAgbG93OiBkYXRhLnZhbHVlLFxyXG4gICAgICAgICAgY2xvc2U6IGRhdGEudmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IGNhbmRsZVxyXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5oaWdoID0gTWF0aC5tYXgoY3VycmVudENhbmRsZVJlZi5jdXJyZW50LmhpZ2gsIGRhdGEudmFsdWUpO1xyXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5sb3cgPSBNYXRoLm1pbihjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQubG93LCBkYXRhLnZhbHVlKTtcclxuICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQuY2xvc2UgPSBkYXRhLnZhbHVlO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBmb3IgcmVhbC10aW1lIHNpZ25hbHMgd2l0aCBjdXJyZW50IGNhbmRsZVxyXG4gICAgICAgIGlmIChzdHJhdGVneSAhPT0gJ25vbmUnICYmIGNoYXJ0UmVmLmN1cnJlbnQgJiYgaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IFsuLi5oaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50LCBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnRdO1xyXG4gICAgICAgICAgY2hlY2tSZWFsVGltZVNpZ25hbCh1cGRhdGVkRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgdGhlIGNoYXJ0IHdpdGggY3VycmVudCBjYW5kbGVcclxuICAgICAgY2FuZGxlc3RpY2tTZXJpZXNSZWYuY3VycmVudC51cGRhdGUoY3VycmVudENhbmRsZVJlZi5jdXJyZW50KTtcclxuICAgIH0sIHRpbWVmcmFtZSk7XHJcblxyXG4gICAgLy8gSGFuZGxlIHdpbmRvdyByZXNpemVcclxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQgJiYgY2hhcnRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNoYXJ0UmVmLmN1cnJlbnQuYXBwbHlPcHRpb25zKHtcclxuICAgICAgICAgIHdpZHRoOiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICAgICAgaGVpZ2h0OiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuICAgICAgY2xlYXJUaW1lb3V0KGxvZ29UaW1lb3V0SWQpO1xyXG4gICAgICB1bnN1YnNjcmliZSgpO1xyXG4gICAgICBjaGFydC5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgfSwgW3RpbWVmcmFtZV0pO1xyXG5cclxuICByZXR1cm4gPGRpdiByZWY9e2NoYXJ0Q29udGFpbmVyUmVmfSBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCIgLz47XHJcbn0gIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVJlZiIsImNyZWF0ZUNoYXJ0IiwiZ2V0SGlzdG9yaWNhbERhdGEiLCJzdWJzY3JpYmVUb1ByaWNlIiwiZ2V0U3RyYXRlZ3kiLCJjYWxjdWxhdGVFTUEiLCJjYWxjdWxhdGVTTUEiLCJjYWxjdWxhdGVURU1BIiwiY2FsY3VsYXRlSE1BIiwiY2FsY3VsYXRlTUFDRCIsIkNhbmRsZXN0aWNrQ2hhcnQiLCJ0aW1lZnJhbWUiLCJzdHJhdGVneSIsInRva2VuIiwiZXhjaGFuZ2UiLCJjaGFydENvbnRhaW5lclJlZiIsImNoYXJ0UmVmIiwiY2FuZGxlc3RpY2tTZXJpZXNSZWYiLCJpbmRpY2F0b3JTZXJpZXNSZWZzIiwiTWFwIiwibWFya2VyU2VyaWVzUmVmIiwiaGlzdG9yaWNhbERhdGFSZWYiLCJjdXJyZW50Q2FuZGxlUmVmIiwibGFzdFNpZ25hbFJlZiIsImdldEludGVydmFsU2Vjb25kcyIsInRmIiwic2FmZWx5UmVtb3ZlU2VyaWVzIiwiY2hhcnQiLCJzZXJpZXMiLCJyZW1vdmVTZXJpZXMiLCJlIiwiY29uc29sZSIsImVycm9yIiwiY2hlY2tGb3JTaWduYWwiLCJwcmV2RmFzdCIsInByZXZTbG93IiwiY3VyckZhc3QiLCJjdXJyU2xvdyIsImNhbmRsZSIsImRhdGEiLCJpc05hTiIsImF2Z1ByaWNlIiwicmVkdWNlIiwic3VtIiwiZCIsImNsb3NlIiwibGVuZ3RoIiwicHJpY2VSYW5nZSIsInJhbmdlIiwiTWF0aCIsIm1heCIsImFicyIsImhpZ2giLCJsb3ciLCJvZmZzZXQiLCJ0aW1lIiwicG9zaXRpb24iLCJjb2xvciIsInNoYXBlIiwidGV4dCIsInRvRml4ZWQiLCJzaXplIiwidmFsdWUiLCJtaW4iLCJzbGljZSIsIm1hcCIsImFkZFN0cmF0ZWd5SW5kaWNhdG9ycyIsImxvZyIsImN1cnJlbnQiLCJmb3JFYWNoIiwiY2xlYXIiLCJwcmljZXMiLCJmYXN0TGluZSIsInNsb3dMaW5lIiwibWFjZERhdGEiLCJtYWNkIiwic2lnbmFsIiwic2VsZWN0ZWRTdHJhdGVneSIsImNvbG9ycyIsImluZGljYXRvcnMiLCJpbmRpY2F0b3IiLCJpbmRleCIsImxpbmVTZXJpZXMiLCJhZGRMaW5lU2VyaWVzIiwibGluZVdpZHRoIiwidGl0bGUiLCJuYW1lIiwicHJpY2VGb3JtYXQiLCJ0eXBlIiwicHJlY2lzaW9uIiwibWluTW92ZSIsInNldCIsImxpbmVEYXRhIiwiaWR4IiwiZmlsdGVyIiwic2V0RGF0YSIsImxhc3RWYWx1ZVZpc2libGUiLCJwcmljZUxpbmVWaXNpYmxlIiwiY3Jvc3NoYWlyTWFya2VyVmlzaWJsZSIsImxpbmVWaXNpYmxlIiwic2lnbmFscyIsImkiLCJwdXNoIiwic2V0TWFya2VycyIsImNoZWNrUmVhbFRpbWVTaWduYWwiLCJmYXN0UGVyaW9kIiwic2xvd1BlcmlvZCIsImZhc3RNQSIsInNsb3dNQSIsImV4aXN0aW5nTWFya2VycyIsIm1hcmtlcnMiLCJsYXlvdXQiLCJiYWNrZ3JvdW5kIiwidGV4dENvbG9yIiwiZ3JpZCIsInZlcnRMaW5lcyIsImhvcnpMaW5lcyIsInRpbWVTY2FsZSIsImJvcmRlckNvbG9yIiwidGltZVZpc2libGUiLCJyaWdodFByaWNlU2NhbGUiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiY2FuZGxlc3RpY2tTZXJpZXMiLCJhZGRDYW5kbGVzdGlja1NlcmllcyIsInVwQ29sb3IiLCJkb3duQ29sb3IiLCJib3JkZXJWaXNpYmxlIiwid2lja1VwQ29sb3IiLCJ3aWNrRG93bkNvbG9yIiwicmVtb3ZlVHJhZGluZ1ZpZXdMb2dvIiwibG9nb0VsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicmVtb3ZlIiwiaGVhZGVyTG9nbyIsInF1ZXJ5U2VsZWN0b3IiLCJsb2dvVGltZW91dElkIiwic2V0VGltZW91dCIsImxvYWREYXRhIiwibGFzdENhbmRsZSIsIm9wZW4iLCJ1bnN1YnNjcmliZSIsImludGVydmFsU2Vjb25kcyIsImNhbmRsZVRpbWVzdGFtcCIsImZsb29yIiwidXBkYXRlZERhdGEiLCJ1cGRhdGUiLCJoYW5kbGVSZXNpemUiLCJhcHBseU9wdGlvbnMiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsZWFyVGltZW91dCIsImRpdiIsInJlZiIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/strategies/moving-averages.ts":
/*!****************************************************!*\
  !*** ./src/services/strategies/moving-averages.ts ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateEMA: function() { return /* binding */ calculateEMA; },\n/* harmony export */   calculateHMA: function() { return /* binding */ calculateHMA; },\n/* harmony export */   calculateMACD: function() { return /* binding */ calculateMACD; },\n/* harmony export */   calculateSMA: function() { return /* binding */ calculateSMA; },\n/* harmony export */   calculateTEMA: function() { return /* binding */ calculateTEMA; },\n/* harmony export */   calculateWMA: function() { return /* binding */ calculateWMA; }\n/* harmony export */ });\n// Existing EMA and SMA functions\nconst calculateEMA = (data, period)=>{\n    const k = 2 / (period + 1);\n    const ema = [];\n    let prevEMA = data[0];\n    for(let i = 0; i < data.length; i++){\n        if (i === 0) {\n            ema.push(data[0]);\n        } else {\n            prevEMA = (data[i] - prevEMA) * k + prevEMA;\n            ema.push(prevEMA);\n        }\n    }\n    return ema;\n};\nconst calculateSMA = (data, period)=>{\n    const sma = [];\n    let sum = 0;\n    for(let i = 0; i < data.length; i++){\n        sum += data[i];\n        if (i >= period) {\n            sum -= data[i - period];\n            sma.push(sum / period);\n        } else if (i === period - 1) {\n            sma.push(sum / period);\n        } else {\n            sma.push(NaN);\n        }\n    }\n    return sma;\n};\n// Triple EMA (TEMA)\nconst calculateTEMA = (data, period)=>{\n    const ema1 = calculateEMA(data, period);\n    const ema2 = calculateEMA(ema1, period);\n    const ema3 = calculateEMA(ema2, period);\n    const tema = [];\n    for(let i = 0; i < data.length; i++){\n        const value = 3 * ema1[i] - 3 * ema2[i] + ema3[i];\n        tema.push(value);\n    }\n    return tema;\n};\n// Hull Moving Average (HMA)\nconst calculateHMA = (data, period)=>{\n    const halfPeriod = Math.floor(period / 2);\n    const sqrtPeriod = Math.floor(Math.sqrt(period));\n    const wma1 = calculateWMA(data, halfPeriod);\n    const wma2 = calculateWMA(data, period);\n    const diff = [];\n    // Calculate 2 * WMA(n/2) - WMA(n)\n    for(let i = 0; i < data.length; i++){\n        diff.push(2 * wma1[i] - wma2[i]);\n    }\n    // Calculate final HMA\n    return calculateWMA(diff, sqrtPeriod);\n};\n// Weighted Moving Average (WMA) - helper for HMA\nconst calculateWMA = (data, period)=>{\n    const wma = [];\n    const denominator = period * (period + 1) / 2;\n    for(let i = 0; i < data.length; i++){\n        if (i < period - 1) {\n            wma.push(NaN);\n            continue;\n        }\n        let sum = 0;\n        for(let j = 0; j < period; j++){\n            sum += data[i - j] * (period - j);\n        }\n        wma.push(sum / denominator);\n    }\n    return wma;\n};\n// MACD\nconst calculateMACD = function(data) {\n    let fastPeriod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 12, slowPeriod = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 26, signalPeriod = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 9;\n    const fastEMA = calculateEMA(data, fastPeriod);\n    const slowEMA = calculateEMA(data, slowPeriod);\n    const macd = [];\n    // Calculate MACD line\n    for(let i = 0; i < data.length; i++){\n        macd.push(fastEMA[i] - slowEMA[i]);\n    }\n    // Calculate Signal line (EMA of MACD)\n    const signal = calculateEMA(macd, signalPeriod);\n    // Calculate Histogram\n    const histogram = macd.map((value, i)=>value - signal[i]);\n    return {\n        macd,\n        signal,\n        histogram\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/strategies/moving-averages.ts\n"));

/***/ })

});