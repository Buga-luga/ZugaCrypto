"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* harmony import */ var _services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/moving-averages */ \"(app-pages-browser)/./src/services/strategies/moving-averages.ts\");\n/* harmony import */ var _TickerHeader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TickerHeader */ \"(app-pages-browser)/./src/components/Chart/TickerHeader.tsx\");\n/* harmony import */ var _utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/priceFormat */ \"(app-pages-browser)/./src/utils/priceFormat.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// Function to get interval in seconds\nconst getIntervalSeconds = (tf)=>{\n    switch(tf){\n        case \"1m\":\n            return 60;\n        case \"5m\":\n            return 300;\n        case \"15m\":\n            return 900;\n        case \"30m\":\n            return 1800;\n        case \"1h\":\n            return 3600;\n        case \"4h\":\n            return 14400;\n        case \"1d\":\n            return 86400;\n        default:\n            return 60;\n    }\n};\nfunction CandlestickChart(param) {\n    let { timeframe, strategy, token = \"BTC\", baseToken = \"USDT\", exchange = \"CryptoCompare\", onPairChange = ()=>{}, signals = [] } = param;\n    _s();\n    const [selectedExchange, setSelectedExchange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(exchange);\n    const [currentBaseToken, setCurrentBaseToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(baseToken);\n    const [currentPrice, setCurrentPrice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>(0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.formatPrice)(0, baseToken));\n    const [priceStats, setPriceStats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>({\n            change1h: \"0.00\",\n            change24h: \"0.00\",\n            change7d: \"0.00\",\n            high24h: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.formatPrice)(0, baseToken),\n            low24h: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.formatPrice)(0, baseToken)\n        }));\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSignalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Handle trading pair change\n    const handlePairChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newToken, newBaseToken)=>{\n        onPairChange(newToken, newBaseToken);\n        setCurrentBaseToken(newBaseToken);\n    }, [\n        onPairChange\n    ]);\n    // Function to update price stats\n    const updatePriceStats = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        try {\n            // Get 1-minute data for accurate time-based calculations\n            const minuteData = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(\"1m\", token, currentBaseToken);\n            if (!minuteData.length) return;\n            const currentPrice = minuteData[minuteData.length - 1].close;\n            const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n            // Calculate time thresholds in seconds\n            const oneHourAgo = currentTime - 60 * 60;\n            const twentyFourHoursAgo = currentTime - 24 * 60 * 60;\n            const sevenDaysAgo = currentTime - 7 * 24 * 60 * 60;\n            // Filter data for each time period\n            const last1h = minuteData.filter((d)=>d.time >= oneHourAgo);\n            const last24h = minuteData.filter((d)=>d.time >= twentyFourHoursAgo);\n            const last7d = minuteData.filter((d)=>d.time >= sevenDaysAgo);\n            // Calculate high and low for 24h\n            const high24h = Math.max(...last24h.map((d)=>d.high));\n            const low24h = Math.min(...last24h.map((d)=>d.low));\n            // Calculate percentage changes\n            const getPercentChange = (periodData)=>{\n                if (periodData.length < 1) return 0;\n                const oldPrice = periodData[0].close;\n                return (currentPrice - oldPrice) / oldPrice * 100;\n            };\n            const change1h = getPercentChange(last1h);\n            const change24h = getPercentChange(last24h);\n            const change7d = getPercentChange(last7d);\n            // Format prices using the price format utility\n            const formattedHigh = (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.formatPrice)(high24h, currentBaseToken);\n            const formattedLow = (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.formatPrice)(low24h, currentBaseToken);\n            setPriceStats({\n                change1h: change1h.toFixed(2),\n                change24h: change24h.toFixed(2),\n                change7d: change7d.toFixed(2),\n                high24h: formattedHigh,\n                low24h: formattedLow\n            });\n        } catch (error) {\n            console.error(\"Error updating price stats:\", error);\n        }\n    }, [\n        token,\n        currentBaseToken\n    ]);\n    // Function to add strategy indicators\n    const addStrategyIndicators = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((chart, data)=>{\n        if (!chart) {\n            console.error(\"Chart is not initialized\");\n            return;\n        }\n        try {\n            // Clear any existing indicators\n            indicatorSeriesRefs.current.forEach((series)=>{\n                try {\n                    if (series && chart) {\n                        chart.removeSeries(series);\n                    }\n                } catch (e) {\n                    console.error(\"Error removing series:\", e);\n                }\n            });\n            indicatorSeriesRefs.current.clear();\n            if (markerSeriesRef.current) {\n                try {\n                    chart.removeSeries(markerSeriesRef.current);\n                } catch (e) {\n                    console.error(\"Error removing marker series:\", e);\n                }\n                markerSeriesRef.current = null;\n            }\n            if (strategy === \"none\") return;\n            // Calculate indicators based on strategy\n            const prices = data.map((d)=>d.close);\n            let fastLine = [];\n            let slowLine = [];\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n            // Add indicator lines\n            const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n            if (!selectedStrategy) return;\n            const colors = [\n                \"#2962FF\",\n                \"#FF6B6B\"\n            ];\n            selectedStrategy.indicators.forEach((indicator, index)=>{\n                const lineSeries = chart.addLineSeries({\n                    color: colors[index],\n                    lineWidth: 2,\n                    title: indicator.name,\n                    priceFormat: {\n                        type: \"price\",\n                        precision: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.isBTCPair)(currentBaseToken) ? 8 : 2,\n                        minMove: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.isBTCPair)(currentBaseToken) ? 0.00000001 : 0.01\n                    }\n                });\n                indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n                const lineData = (index === 0 ? fastLine : slowLine).map((value, idx)=>({\n                        time: data[idx].time,\n                        value: isNaN(value) ? null : value\n                    })).filter((d)=>d.value !== null);\n                lineSeries.setData(lineData);\n            });\n            // Add crossover signals with markers, text, and triangle shape\n            const markers = [];\n            for(let i = 1; i < data.length; i++){\n                const prevFast = fastLine[i - 1];\n                const prevSlow = slowLine[i - 1];\n                const currFast = fastLine[i];\n                const currSlow = slowLine[i];\n                if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n                    if (prevFast <= prevSlow && currFast > currSlow) {\n                        markers.push({\n                            time: data[i].time,\n                            position: \"belowBar\",\n                            color: \"#26a69a\",\n                            shape: \"arrowUp\",\n                            text: \"Buy\"\n                        });\n                    } else if (prevFast >= prevSlow && currFast < currSlow) {\n                        markers.push({\n                            time: data[i].time,\n                            position: \"aboveBar\",\n                            color: \"#ef5350\",\n                            shape: \"arrowDown\",\n                            text: \"Sell\"\n                        });\n                    }\n                }\n            }\n            markerSeriesRef.current = markers;\n        } catch (error) {\n            console.error(\"Error adding strategy indicators:\", error);\n        }\n    }, [\n        strategy,\n        currentBaseToken\n    ]);\n    // Effect for strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartRef.current || historicalDataRef.current.length === 0) {\n            return;\n        }\n        try {\n            addStrategyIndicators(chartRef.current, historicalDataRef.current);\n        } catch (error) {\n            console.error(\"Error in strategy change effect:\", error);\n        }\n    }, [\n        strategy,\n        addStrategyIndicators\n    ]);\n    // Main chart initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\",\n                visible: true,\n                scaleMargins: {\n                    top: 0.1,\n                    bottom: 0.4\n                },\n                autoScale: true,\n                mode: 0,\n                alignLabels: true,\n                borderVisible: true,\n                entireTextOnly: true,\n                ticksVisible: true\n            },\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight,\n            localization: {\n                priceFormatter: (price)=>(0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.formatPrice)(price, currentBaseToken)\n            }\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, chartOptions);\n        // Create candlestick series with price format\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\",\n            priceFormat: {\n                type: \"price\",\n                precision: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.isBTCPair)(currentBaseToken) ? 8 : 2,\n                minMove: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.isBTCPair)(currentBaseToken) ? 0.00000001 : 0.01\n            }\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Load initial data\n        const loadData = async ()=>{\n            try {\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe, token, currentBaseToken);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                updatePriceStats();\n                // Set the current candle reference to the last candle\n                if (data.length > 0) {\n                    currentCandleRef.current = data[data.length - 1];\n                }\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadData();\n        // Real-time updates\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (!candlestickSeriesRef.current) {\n                console.warn(\"Candlestick series not initialized\");\n                return;\n            }\n            // Update current price display immediately\n            const formattedPrice = (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.formatPrice)(data.value, currentBaseToken);\n            setCurrentPrice(formattedPrice);\n            const intervalSeconds = getIntervalSeconds(timeframe);\n            const candleTimestamp = Math.floor(data.time / intervalSeconds) * intervalSeconds;\n            // Update chart candles\n            if (!currentCandleRef.current || candleTimestamp !== currentCandleRef.current.time) {\n                if (currentCandleRef.current) {\n                    historicalDataRef.current.push(currentCandleRef.current);\n                }\n                const newCandle = {\n                    time: candleTimestamp,\n                    open: data.value,\n                    high: data.value,\n                    low: data.value,\n                    close: data.value\n                };\n                currentCandleRef.current = newCandle;\n                candlestickSeriesRef.current.update(newCandle);\n                if (strategy !== \"none\" && chartRef.current) {\n                    addStrategyIndicators(chartRef.current, historicalDataRef.current);\n                }\n            } else {\n                const updatedCandle = {\n                    ...currentCandleRef.current,\n                    high: Math.max(currentCandleRef.current.high, data.value),\n                    low: Math.min(currentCandleRef.current.low, data.value),\n                    close: data.value\n                };\n                currentCandleRef.current = updatedCandle;\n                candlestickSeriesRef.current.update(updatedCandle);\n            }\n            // Update price stats with all available data\n            if (historicalDataRef.current.length > 0) {\n                const allData = [\n                    ...historicalDataRef.current\n                ];\n                if (currentCandleRef.current) {\n                    allData.push(currentCandleRef.current);\n                }\n                updatePriceStats();\n            }\n        }, timeframe, token, currentBaseToken);\n        // Handle window resize\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            unsubscribe();\n            if (chartRef.current) {\n                indicatorSeriesRefs.current.forEach((series)=>{\n                    try {\n                        var _chartRef_current;\n                        (_chartRef_current = chartRef.current) === null || _chartRef_current === void 0 ? void 0 : _chartRef_current.removeSeries(series);\n                    } catch (e) {\n                        console.error(\"Error removing indicator series during cleanup:\", e);\n                    }\n                });\n                indicatorSeriesRefs.current.clear();\n                if (markerSeriesRef.current) {\n                    try {\n                        chartRef.current.removeSeries(markerSeriesRef.current);\n                    } catch (e) {\n                        console.error(\"Error removing marker series during cleanup:\", e);\n                    }\n                    markerSeriesRef.current = null;\n                }\n                chart.remove();\n            }\n        };\n    }, [\n        timeframe,\n        currentBaseToken,\n        strategy,\n        token,\n        updatePriceStats,\n        addStrategyIndicators\n    ]);\n    // Ensure markers are set on the candlestick series\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (candlestickSeriesRef.current && markerSeriesRef.current) {\n            candlestickSeriesRef.current.setMarkers(markerSeriesRef.current);\n        }\n    }, [\n        markerSeriesRef.current\n    ]);\n    // Helper function to calculate indicators\n    const calculateIndicator = (prices, type, period)=>{\n        switch(type){\n            case \"ema\":\n                return (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, period);\n            case \"sma\":\n                return (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, period);\n            case \"tema\":\n                return (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, period);\n            case \"hma\":\n                return (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, period);\n            default:\n                return [];\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TickerHeader__WEBPACK_IMPORTED_MODULE_6__.TickerHeader, {\n                token: token,\n                baseToken: currentBaseToken,\n                exchange: selectedExchange,\n                currentPrice: currentPrice,\n                priceStats: priceStats,\n                onExchangeChange: setSelectedExchange,\n                onPairChange: handlePairChange\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 483,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: chartContainerRef,\n                className: \"flex-1\"\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 492,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 482,\n        columnNumber: 5\n    }, this);\n}\n_s(CandlestickChart, \"X/2PR85ZyF09U/+WSBIrlQi9Pb4=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ })

});