"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/api/coinGeckoAPI.ts":
/*!******************************************!*\
  !*** ./src/services/api/coinGeckoAPI.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHistoricalData: function() { return /* binding */ getHistoricalData; },\n/* harmony export */   getSupportedPairs: function() { return /* binding */ getSupportedPairs; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_KEY = process.env.COINGECKO_API_KEY;\nconst BASE_URL = \"https://api.coingecko.com/api/v3\";\nfunction isCoinGeckoResponse(data) {\n    return data && Array.isArray(data.prices) && data.prices.every((d)=>Array.isArray(d) && d.length === 2);\n}\nasync function getHistoricalData(timeframe) {\n    let token = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"bitcoin\", baseToken = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"usd\";\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/coins/\").concat(token, \"/market_chart?vs_currency=\").concat(baseToken, \"&days=\").concat(timeframe, \"&api_key=\").concat(API_KEY));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (!isCoinGeckoResponse(data)) {\n            throw new Error(\"Invalid data format received from CoinGecko API\");\n        }\n        return data.prices.map((d, index)=>({\n                time: d[0],\n                open: index === 0 ? d[1] : data.prices[index - 1][1],\n                high: d[1],\n                low: d[1],\n                close: d[1],\n                volume: 0 // Placeholder for volume as CoinGecko does not provide it in this endpoint\n            }));\n    } catch (error) {\n        console.error(\"Error fetching historical data:\", error);\n        return [];\n    }\n}\nfunction isStringArray(data) {\n    return Array.isArray(data) && data.every((item)=>typeof item === \"string\");\n}\nasync function getSupportedPairs() {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/simple/supported_vs_currencies\"));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (!isStringArray(data)) {\n            throw new Error(\"Invalid data format received from CoinGecko API\");\n        }\n        const supportedCurrencies = data;\n        const existingPairs = [\n            {\n                token: \"BTC\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"ETH\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"BNB\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"SOL\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"XRP\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"ADA\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"DOGE\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"MATIC\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"DOT\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"LTC\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"AVAX\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"LINK\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"UNI\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"SHIB\",\n                baseToken: \"USDT\"\n            },\n            {\n                token: \"ETH\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"BNB\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"SOL\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"XRP\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"ADA\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"DOGE\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"MATIC\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"DOT\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"LTC\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"AVAX\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"LINK\",\n                baseToken: \"BTC\"\n            },\n            {\n                token: \"UNI\",\n                baseToken: \"BTC\"\n            }\n        ];\n        return existingPairs.filter((pair)=>supportedCurrencies.includes(pair.baseToken.toLowerCase()));\n    } catch (error) {\n        console.error(\"Error fetching supported pairs:\", error);\n        return [];\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api/coinGeckoAPI.ts\n"));

/***/ })

});