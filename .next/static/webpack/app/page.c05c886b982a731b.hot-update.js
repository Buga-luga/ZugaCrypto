"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* harmony import */ var _services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/ema-crossover */ \"(app-pages-browser)/./src/services/strategies/ema-crossover.ts\");\n/* harmony import */ var _services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/services/strategies/sma-crossover */ \"(app-pages-browser)/./src/services/strategies/sma-crossover.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Function to detect signals from EMA data\n    const detectEMASignals = (data, fastEMA, slowEMA)=>{\n        const markers = [];\n        for(let i = 1; i < Math.min(data.length, fastEMA.length, slowEMA.length); i++){\n            const prevFast = fastEMA[i - 1];\n            const prevSlow = slowEMA[i - 1];\n            const currFast = fastEMA[i];\n            const currSlow = slowEMA[i];\n            // Debug crossover conditions\n            console.log(\"Checking crossover:\", {\n                time: new Date(data[i].time * 1000).toLocaleString(),\n                prevFast: prevFast === null || prevFast === void 0 ? void 0 : prevFast.toFixed(2),\n                prevSlow: prevSlow === null || prevSlow === void 0 ? void 0 : prevSlow.toFixed(2),\n                currFast: currFast === null || currFast === void 0 ? void 0 : currFast.toFixed(2),\n                currSlow: currSlow === null || currSlow === void 0 ? void 0 : currSlow.toFixed(2),\n                isBuy: prevFast <= prevSlow && currFast > currSlow,\n                isSell: prevFast >= prevSlow && currFast < currSlow\n            });\n            // Only add signals if we have valid EMA values\n            if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n                // Buy signal: Fast EMA crosses above Slow EMA\n                if (prevFast <= prevSlow && currFast > currSlow) {\n                    markers.push({\n                        time: data[i].time,\n                        position: \"belowBar\",\n                        color: \"#26a69a\",\n                        shape: \"arrowUp\",\n                        text: \"BUY\\n$\".concat(data[i].close.toFixed(2)),\n                        size: 2\n                    });\n                    console.log(\"\\uD83D\\uDFE2 Buy Signal Detected:\", {\n                        price: data[i].close,\n                        time: new Date(data[i].time * 1000).toLocaleString(),\n                        fastEMA: currFast.toFixed(2),\n                        slowEMA: currSlow.toFixed(2),\n                        diff: (currFast - currSlow).toFixed(2)\n                    });\n                } else if (prevFast >= prevSlow && currFast < currSlow) {\n                    markers.push({\n                        time: data[i].time,\n                        position: \"aboveBar\",\n                        color: \"#ef5350\",\n                        shape: \"arrowDown\",\n                        text: \"SELL\\n$\".concat(data[i].close.toFixed(2)),\n                        size: 2\n                    });\n                    console.log(\"\\uD83D\\uDD34 Sell Signal Detected:\", {\n                        price: data[i].close,\n                        time: new Date(data[i].time * 1000).toLocaleString(),\n                        fastEMA: currFast.toFixed(2),\n                        slowEMA: currSlow.toFixed(2),\n                        diff: (currFast - currSlow).toFixed(2)\n                    });\n                }\n            }\n        }\n        return markers;\n    };\n    // Function to safely remove a series\n    const safelyRemoveSeries = (chart, series)=>{\n        try {\n            if (series && chart) {\n                chart.removeSeries(series);\n            }\n        } catch (e) {\n            console.error(\"Error removing series:\", e);\n        }\n    };\n    // Function to update strategy indicators\n    const updateStrategyIndicators = (data, chart)=>{\n        try {\n            if (!chart || !data.length) {\n                console.log(\"Chart or data not ready, skipping update\");\n                return;\n            }\n            // Clear existing markers and indicators\n            safelyRemoveSeries(chart, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n            indicatorSeriesRefs.current.forEach((series)=>{\n                safelyRemoveSeries(chart, series);\n            });\n            indicatorSeriesRefs.current.clear();\n            if (strategy === \"none\") {\n                console.log(\"No strategy selected, clearing indicators\");\n                return;\n            }\n            const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n            if (!(selectedStrategy === null || selectedStrategy === void 0 ? void 0 : selectedStrategy.indicators)) {\n                console.log(\"No indicators found for strategy:\", strategy);\n                return;\n            }\n            console.log(\"Setting up strategy:\", selectedStrategy.id);\n            // Create marker series for signals\n            markerSeriesRef.current = candlestickSeriesRef.current; // Use the candlestick series for markers\n            // Run strategy analysis and update indicators\n            const prices = data.map((d)=>d.close);\n            if (selectedStrategy.id === \"ema_crossover\" || selectedStrategy.id === \"sma_crossover\") {\n                console.log(\"Calculating \".concat(selectedStrategy.id === \"ema_crossover\" ? \"EMAs\" : \"SMAs\", \" for crossover strategy\"));\n                const fastPeriod = 9;\n                const slowPeriod = 21;\n                const fastLine = selectedStrategy.id === \"ema_crossover\" ? (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, fastPeriod) : (0,_services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_6__.calculateSMA)(prices, fastPeriod);\n                const slowLine = selectedStrategy.id === \"ema_crossover\" ? (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, slowPeriod) : (0,_services_strategies_sma_crossover__WEBPACK_IMPORTED_MODULE_6__.calculateSMA)(prices, slowPeriod);\n                // Add indicator lines\n                selectedStrategy.indicators.forEach((indicator, index)=>{\n                    console.log(\"Adding indicator: \".concat(indicator.name));\n                    const colors = [\n                        \"#2962FF\",\n                        \"#FF6B6B\"\n                    ]; // Blue for fast, Red for slow\n                    const lineSeries = chart.addLineSeries({\n                        color: colors[index],\n                        lineWidth: 2,\n                        title: indicator.name,\n                        priceFormat: {\n                            type: \"price\",\n                            precision: 2,\n                            minMove: 0.01\n                        },\n                        lineStyle: 1\n                    });\n                    indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n                    // Update indicator data with proper types\n                    const lineData = (index === 0 ? fastLine : slowLine).map((value, idx)=>({\n                            time: data[idx].time,\n                            value: value\n                        }));\n                    lineSeries.setData(lineData);\n                });\n                // Get historical signals\n                const markers = [];\n                for(let i = 1; i < data.length; i++){\n                    const prevFast = fastLine[i - 1];\n                    const prevSlow = slowLine[i - 1];\n                    const currFast = fastLine[i];\n                    const currSlow = slowLine[i];\n                    if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n                        if (prevFast <= prevSlow && currFast > currSlow) {\n                            // Buy signal\n                            markers.push({\n                                time: data[i].time,\n                                position: \"belowBar\",\n                                color: \"#26a69a\",\n                                shape: \"arrowUp\",\n                                text: \"BUY\",\n                                size: 2\n                            });\n                            console.log(\"Buy Signal at:\", {\n                                time: new Date(data[i].time * 1000).toLocaleString(),\n                                price: data[i].close,\n                                fastLine: currFast.toFixed(2),\n                                slowLine: currSlow.toFixed(2)\n                            });\n                        } else if (prevFast >= prevSlow && currFast < currSlow) {\n                            // Sell signal\n                            markers.push({\n                                time: data[i].time,\n                                position: \"aboveBar\",\n                                color: \"#ef5350\",\n                                shape: \"arrowDown\",\n                                text: \"SELL\",\n                                size: 2\n                            });\n                            console.log(\"Sell Signal at:\", {\n                                time: new Date(data[i].time * 1000).toLocaleString(),\n                                price: data[i].close,\n                                fastLine: currFast.toFixed(2),\n                                slowLine: currSlow.toFixed(2)\n                            });\n                        }\n                    }\n                }\n                if (markers.length > 0) {\n                    console.log(\"Setting markers:\", markers);\n                    markerSeriesRef.current.setMarkers(markers);\n                }\n            }\n        } catch (e) {\n            console.error(\"Error in updateStrategyIndicators:\", e);\n        }\n    };\n    // Update the strategy change effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"Strategy changed:\", strategy);\n        if (chartRef.current) {\n            // Clear existing indicators and markers\n            safelyRemoveSeries(chartRef.current, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n            indicatorSeriesRefs.current.forEach((series)=>{\n                safelyRemoveSeries(chartRef.current, series);\n            });\n            indicatorSeriesRefs.current.clear();\n            // Reinitialize strategy indicators\n            if (historicalDataRef.current.length > 0) {\n                console.log(\"Reinitializing strategy indicators with data length:\", historicalDataRef.current.length);\n                updateStrategyIndicators(historicalDataRef.current, chartRef.current);\n            }\n        }\n    }, [\n        strategy\n    ]); // Only run when strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        console.log(\"Initializing chart with timeframe:\", timeframe);\n        const formatTime = (time)=>{\n            let date;\n            if (typeof time === \"number\") {\n                date = new Date(time * 1000);\n            } else if (typeof time === \"string\") {\n                date = new Date(time);\n            } else {\n                // Handle BusinessDay format\n                const { year, month, day } = time;\n                date = new Date(year, month - 1, day);\n            }\n            const formatOptions = {\n                month: \"short\",\n                day: \"numeric\",\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n                hour12: false\n            };\n            // For daily timeframes, don't show time\n            if (timeframe === \"1d\") {\n                delete formatOptions.hour;\n                delete formatOptions.minute;\n            }\n            return date.toLocaleString(\"en-US\", formatOptions);\n        };\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\",\n                fontSize: 12,\n                fontFamily: \"Roboto, sans-serif\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            crosshair: {\n                mode: 1,\n                vertLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                },\n                horzLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true,\n                secondsVisible: false\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\"\n            },\n            localization: {\n                timeFormatter: formatTime\n            },\n            watermark: {\n                visible: false\n            }\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, {\n            ...chartOptions,\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        });\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\"\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        // Fetch historical data\n        const loadData = async ()=>{\n            try {\n                const historicalData = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe);\n                console.log(\"Loaded historical data:\", historicalData.length);\n                historicalDataRef.current = historicalData;\n                candlestickSeries.setData(historicalData.map((d)=>({\n                        time: d.time,\n                        open: d.open,\n                        high: d.high,\n                        low: d.low,\n                        close: d.close\n                    })));\n                // Update strategy indicators with initial data\n                updateStrategyIndicators(historicalData, chart);\n            } catch (error) {\n                console.error(\"Error loading historical data:\", error);\n            }\n        };\n        loadData();\n        chartRef.current = chart;\n        // Subscribe to real-time price updates with improved candle formation\n        let currentCandle = {\n            open: 0,\n            high: -Infinity,\n            low: Infinity,\n            close: 0,\n            time: 0\n        };\n        const getIntervalSeconds = (tf)=>{\n            switch(tf){\n                case \"1m\":\n                    return 60;\n                case \"5m\":\n                    return 300;\n                case \"15m\":\n                    return 900;\n                case \"30m\":\n                    return 1800;\n                case \"1h\":\n                    return 3600;\n                case \"4h\":\n                    return 14400;\n                case \"1d\":\n                    return 86400;\n                default:\n                    return 60;\n            }\n        };\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (candlestickSeriesRef.current) {\n                const intervalSeconds = getIntervalSeconds(timeframe);\n                const currentTimestamp = Math.floor(Date.now() / 1000);\n                const candleTimestamp = Math.floor(currentTimestamp / intervalSeconds) * intervalSeconds;\n                // If this is a new candle\n                if (candleTimestamp !== currentCandle.time) {\n                    // If there was a previous candle, finalize it\n                    if (currentCandle.time !== 0) {\n                        const newCandle = {\n                            time: currentCandle.time,\n                            open: currentCandle.open,\n                            high: currentCandle.high,\n                            low: currentCandle.low,\n                            close: currentCandle.close\n                        };\n                        candlestickSeriesRef.current.update(newCandle);\n                        // Update historical data with the new candle\n                        historicalDataRef.current = [\n                            ...historicalDataRef.current.slice(1),\n                            newCandle\n                        ];\n                    }\n                    // Start a new candle\n                    currentCandle = {\n                        time: candleTimestamp,\n                        open: data.value,\n                        high: data.value,\n                        low: data.value,\n                        close: data.value\n                    };\n                    // Update candlestick series with the new candle\n                    candlestickSeriesRef.current.update(currentCandle);\n                } else {\n                    // Update existing candle\n                    if (data.value > currentCandle.high) currentCandle.high = data.value;\n                    if (data.value < currentCandle.low) currentCandle.low = data.value;\n                    currentCandle.close = data.value;\n                    // Update candlestick series with the current state\n                    candlestickSeriesRef.current.update(currentCandle);\n                }\n                // Update strategy indicators if we have a strategy selected\n                if (strategy !== \"none\" && chartRef.current && indicatorSeriesRefs.current.size > 0) {\n                    const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n                    if (selectedStrategy && selectedStrategy.id === \"ema_crossover\") {\n                        // Include the current candle in the calculations\n                        const updatedData = [\n                            ...historicalDataRef.current.slice(1),\n                            currentCandle\n                        ];\n                        const prices = updatedData.map((d)=>d.close);\n                        const fastPeriod = 9;\n                        const slowPeriod = 21;\n                        const fastEMA = (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, fastPeriod);\n                        const slowEMA = (0,_services_strategies_ema_crossover__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, slowPeriod);\n                        // Update the line series with new data\n                        indicatorSeriesRefs.current.forEach((series, name)=>{\n                            const emaData = (name === \"Fast EMA (9)\" ? fastEMA : slowEMA).map((value, index)=>({\n                                    time: updatedData[index].time,\n                                    value: value\n                                }));\n                            series.setData(emaData);\n                        });\n                        // Check for new signal\n                        const last = fastEMA.length - 1;\n                        const prev = last - 1;\n                        if (prev >= 0 && !isNaN(fastEMA[prev]) && !isNaN(slowEMA[prev]) && !isNaN(fastEMA[last]) && !isNaN(slowEMA[last])) {\n                            // Debug real-time crossover conditions\n                            const crossingUp = fastEMA[prev] <= slowEMA[prev] && fastEMA[last] > slowEMA[last];\n                            const crossingDown = fastEMA[prev] >= slowEMA[prev] && fastEMA[last] < slowEMA[last];\n                            if (crossingUp || crossingDown) {\n                                console.log(\"Real-time EMA Status:\", {\n                                    time: new Date(currentCandle.time * 1000).toLocaleString(),\n                                    price: currentCandle.close,\n                                    prevFastEMA: fastEMA[prev].toFixed(2),\n                                    prevSlowEMA: slowEMA[prev].toFixed(2),\n                                    currFastEMA: fastEMA[last].toFixed(2),\n                                    currSlowEMA: slowEMA[last].toFixed(2),\n                                    signal: crossingUp ? \"BUY\" : \"SELL\"\n                                });\n                            }\n                            let newMarker = null;\n                            if (crossingUp) {\n                                // Buy signal\n                                newMarker = {\n                                    time: currentCandle.time,\n                                    position: \"belowBar\",\n                                    color: \"#26a69a\",\n                                    shape: \"arrowUp\",\n                                    text: \"BUY\",\n                                    size: 2\n                                };\n                                console.log(\"\\uD83D\\uDFE2 Real-time Buy Signal:\", {\n                                    price: currentCandle.close,\n                                    time: new Date(currentCandle.time * 1000).toLocaleString(),\n                                    fastEMA: fastEMA[last].toFixed(2),\n                                    slowEMA: slowEMA[last].toFixed(2),\n                                    diff: (fastEMA[last] - slowEMA[last]).toFixed(2)\n                                });\n                            } else if (crossingDown) {\n                                // Sell signal\n                                newMarker = {\n                                    time: currentCandle.time,\n                                    position: \"aboveBar\",\n                                    color: \"#ef5350\",\n                                    shape: \"arrowDown\",\n                                    text: \"SELL\",\n                                    size: 2\n                                };\n                                console.log(\"\\uD83D\\uDD34 Real-time Sell Signal:\", {\n                                    price: currentCandle.close,\n                                    time: new Date(currentCandle.time * 1000).toLocaleString(),\n                                    fastEMA: fastEMA[last].toFixed(2),\n                                    slowEMA: slowEMA[last].toFixed(2),\n                                    diff: (fastEMA[last] - slowEMA[last]).toFixed(2)\n                                });\n                            }\n                            // Add new marker if signal detected\n                            if (newMarker && candlestickSeriesRef.current) {\n                                const currentMarkers = candlestickSeriesRef.current.markers() || [];\n                                const signalExists = currentMarkers.some((m)=>m.time === newMarker.time && m.text === newMarker.text);\n                                if (!signalExists) {\n                                    candlestickSeriesRef.current.setMarkers([\n                                        ...currentMarkers,\n                                        newMarker\n                                    ]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }, timeframe);\n        // Remove TradingView logo elements if they exist\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created\n        removeTradingViewLogo();\n        // Also run after a short delay to catch dynamically added elements\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            if (chartRef.current) {\n                chartRef.current.remove();\n            }\n        };\n    }, [\n        timeframe,\n        strategy\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: chartContainerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 563,\n        columnNumber: 10\n    }, this);\n}\n_s(CandlestickChart, \"79wJC2kgSopMt/NxaIK+M+7bdVo=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/strategies/ema-crossover.ts":
/*!**************************************************!*\
  !*** ./src/services/strategies/ema-crossover.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateEMA: function() { return /* binding */ calculateEMA; }\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n\nfunction calculateEMA(data, period) {\n    const ema = [];\n    const multiplier = 2 / (period + 1);\n    // First EMA uses SMA as initial value\n    let sum = 0;\n    for(let i = 0; i < period; i++){\n        sum += data[i];\n        ema.push(NaN); // Fill initial values with NaN\n    }\n    ema[period - 1] = sum / period;\n    // Calculate EMA for remaining values\n    for(let i = period; i < data.length; i++){\n        const currentValue = data[i];\n        const previousEMA = ema[i - 1];\n        const currentEMA = (currentValue - previousEMA) * multiplier + previousEMA;\n        ema.push(currentEMA);\n    }\n    return ema;\n}\n// Create the strategy object\nconst emaCrossoverStrategy = {\n    id: \"ema_crossover\",\n    name: \"EMA Crossover\",\n    description: \"Generates signals based on crossovers between fast and slow EMAs\",\n    analyze: (data)=>{\n        const prices = data.map((d)=>d.close);\n        const fastPeriod = 9; // Fast EMA period\n        const slowPeriod = 21; // Slow EMA period\n        const fastEMA = calculateEMA(prices, fastPeriod);\n        const slowEMA = calculateEMA(prices, slowPeriod);\n        // Need at least two points to compare crossover\n        if (fastEMA.length < 2 || slowEMA.length < 2) return null;\n        const last = fastEMA.length - 1;\n        const prev = last - 1;\n        // Check for crossover\n        const isCrossUp = fastEMA[prev] <= slowEMA[prev] && fastEMA[last] > slowEMA[last];\n        const isCrossDown = fastEMA[prev] >= slowEMA[prev] && fastEMA[last] < slowEMA[last];\n        if (isCrossUp) {\n            return {\n                type: \"buy\",\n                price: data[last].close,\n                time: data[last].time,\n                message: \"Buy Signal: Fast EMA (\".concat(fastEMA[last].toFixed(2), \") crossed above Slow EMA (\").concat(slowEMA[last].toFixed(2), \")\")\n            };\n        }\n        if (isCrossDown) {\n            return {\n                type: \"sell\",\n                price: data[last].close,\n                time: data[last].time,\n                message: \"Sell Signal: Fast EMA (\".concat(fastEMA[last].toFixed(2), \") crossed below Slow EMA (\").concat(slowEMA[last].toFixed(2), \")\")\n            };\n        }\n        return null;\n    },\n    indicators: [\n        {\n            name: \"Fast EMA (9)\",\n            data: []\n        },\n        {\n            name: \"Slow EMA (21)\",\n            data: []\n        }\n    ]\n};\n// Register the strategy\n(0,_index__WEBPACK_IMPORTED_MODULE_0__.registerStrategy)(emaCrossoverStrategy);\n// Export the strategy object\n/* harmony default export */ __webpack_exports__[\"default\"] = (emaCrossoverStrategy);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9zdHJhdGVnaWVzL2VtYS1jcm9zc292ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDcUU7QUFFOUQsU0FBU0MsYUFBYUMsSUFBYyxFQUFFQyxNQUFjO0lBQ3pELE1BQU1DLE1BQWdCLEVBQUU7SUFDeEIsTUFBTUMsYUFBYSxJQUFLRixDQUFBQSxTQUFTO0lBRWpDLHNDQUFzQztJQUN0QyxJQUFJRyxNQUFNO0lBQ1YsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLFFBQVFJLElBQUs7UUFDL0JELE9BQU9KLElBQUksQ0FBQ0ssRUFBRTtRQUNkSCxJQUFJSSxJQUFJLENBQUNDLE1BQU0sK0JBQStCO0lBQ2hEO0lBQ0FMLEdBQUcsQ0FBQ0QsU0FBUyxFQUFFLEdBQUdHLE1BQU1IO0lBRXhCLHFDQUFxQztJQUNyQyxJQUFLLElBQUlJLElBQUlKLFFBQVFJLElBQUlMLEtBQUtRLE1BQU0sRUFBRUgsSUFBSztRQUN6QyxNQUFNSSxlQUFlVCxJQUFJLENBQUNLLEVBQUU7UUFDNUIsTUFBTUssY0FBY1IsR0FBRyxDQUFDRyxJQUFJLEVBQUU7UUFDOUIsTUFBTU0sYUFBYSxDQUFDRixlQUFlQyxXQUFVLElBQUtQLGFBQWFPO1FBQy9EUixJQUFJSSxJQUFJLENBQUNLO0lBQ1g7SUFFQSxPQUFPVDtBQUNUO0FBRUEsNkJBQTZCO0FBQzdCLE1BQU1VLHVCQUFpQztJQUNyQ0MsSUFBSTtJQUNKQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsU0FBUyxDQUFDaEI7UUFDUixNQUFNaUIsU0FBU2pCLEtBQUtrQixHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLEtBQUs7UUFDcEMsTUFBTUMsYUFBYSxHQUFJLGtCQUFrQjtRQUN6QyxNQUFNQyxhQUFhLElBQUksa0JBQWtCO1FBRXpDLE1BQU1DLFVBQVV4QixhQUFha0IsUUFBUUk7UUFDckMsTUFBTUcsVUFBVXpCLGFBQWFrQixRQUFRSztRQUVyQyxnREFBZ0Q7UUFDaEQsSUFBSUMsUUFBUWYsTUFBTSxHQUFHLEtBQUtnQixRQUFRaEIsTUFBTSxHQUFHLEdBQUcsT0FBTztRQUVyRCxNQUFNaUIsT0FBT0YsUUFBUWYsTUFBTSxHQUFHO1FBQzlCLE1BQU1rQixPQUFPRCxPQUFPO1FBRXBCLHNCQUFzQjtRQUN0QixNQUFNRSxZQUFZSixPQUFPLENBQUNHLEtBQUssSUFBSUYsT0FBTyxDQUFDRSxLQUFLLElBQUlILE9BQU8sQ0FBQ0UsS0FBSyxHQUFHRCxPQUFPLENBQUNDLEtBQUs7UUFDakYsTUFBTUcsY0FBY0wsT0FBTyxDQUFDRyxLQUFLLElBQUlGLE9BQU8sQ0FBQ0UsS0FBSyxJQUFJSCxPQUFPLENBQUNFLEtBQUssR0FBR0QsT0FBTyxDQUFDQyxLQUFLO1FBRW5GLElBQUlFLFdBQVc7WUFDYixPQUFPO2dCQUNMRSxNQUFNO2dCQUNOQyxPQUFPOUIsSUFBSSxDQUFDeUIsS0FBSyxDQUFDTCxLQUFLO2dCQUN2QlcsTUFBTS9CLElBQUksQ0FBQ3lCLEtBQUssQ0FBQ00sSUFBSTtnQkFDckJDLFNBQVMseUJBQThFUixPQUFyREQsT0FBTyxDQUFDRSxLQUFLLENBQUNRLE9BQU8sQ0FBQyxJQUFHLDhCQUFxRCxPQUF6QlQsT0FBTyxDQUFDQyxLQUFLLENBQUNRLE9BQU8sQ0FBQyxJQUFHO1lBQ2xIO1FBQ0Y7UUFFQSxJQUFJTCxhQUFhO1lBQ2YsT0FBTztnQkFDTEMsTUFBTTtnQkFDTkMsT0FBTzlCLElBQUksQ0FBQ3lCLEtBQUssQ0FBQ0wsS0FBSztnQkFDdkJXLE1BQU0vQixJQUFJLENBQUN5QixLQUFLLENBQUNNLElBQUk7Z0JBQ3JCQyxTQUFTLDBCQUErRVIsT0FBckRELE9BQU8sQ0FBQ0UsS0FBSyxDQUFDUSxPQUFPLENBQUMsSUFBRyw4QkFBcUQsT0FBekJULE9BQU8sQ0FBQ0MsS0FBSyxDQUFDUSxPQUFPLENBQUMsSUFBRztZQUNuSDtRQUNGO1FBRUEsT0FBTztJQUNUO0lBQ0FDLFlBQVk7UUFDVjtZQUNFcEIsTUFBTTtZQUNOZCxNQUFNLEVBQUU7UUFDVjtRQUNBO1lBQ0VjLE1BQU07WUFDTmQsTUFBTSxFQUFFO1FBQ1Y7S0FDRDtBQUNIO0FBRUEsd0JBQXdCO0FBQ3hCRix3REFBZ0JBLENBQUNjO0FBRWpCLDZCQUE2QjtBQUM3QiwrREFBZUEsb0JBQW9CQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9zZXJ2aWNlcy9zdHJhdGVnaWVzL2VtYS1jcm9zc292ZXIudHM/M2QzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW5kbGVzdGlja0RhdGEgfSBmcm9tICdsaWdodHdlaWdodC1jaGFydHMnO1xyXG5pbXBvcnQgeyBTdHJhdGVneSwgU3RyYXRlZ3lTaWduYWwsIHJlZ2lzdGVyU3RyYXRlZ3kgfSBmcm9tICcuL2luZGV4JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVFTUEoZGF0YTogbnVtYmVyW10sIHBlcmlvZDogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gIGNvbnN0IGVtYTogbnVtYmVyW10gPSBbXTtcclxuICBjb25zdCBtdWx0aXBsaWVyID0gMiAvIChwZXJpb2QgKyAxKTtcclxuXHJcbiAgLy8gRmlyc3QgRU1BIHVzZXMgU01BIGFzIGluaXRpYWwgdmFsdWVcclxuICBsZXQgc3VtID0gMDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBlcmlvZDsgaSsrKSB7XHJcbiAgICBzdW0gKz0gZGF0YVtpXTtcclxuICAgIGVtYS5wdXNoKE5hTik7IC8vIEZpbGwgaW5pdGlhbCB2YWx1ZXMgd2l0aCBOYU5cclxuICB9XHJcbiAgZW1hW3BlcmlvZCAtIDFdID0gc3VtIC8gcGVyaW9kO1xyXG5cclxuICAvLyBDYWxjdWxhdGUgRU1BIGZvciByZW1haW5pbmcgdmFsdWVzXHJcbiAgZm9yIChsZXQgaSA9IHBlcmlvZDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGRhdGFbaV07XHJcbiAgICBjb25zdCBwcmV2aW91c0VNQSA9IGVtYVtpIC0gMV07XHJcbiAgICBjb25zdCBjdXJyZW50RU1BID0gKGN1cnJlbnRWYWx1ZSAtIHByZXZpb3VzRU1BKSAqIG11bHRpcGxpZXIgKyBwcmV2aW91c0VNQTtcclxuICAgIGVtYS5wdXNoKGN1cnJlbnRFTUEpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVtYTtcclxufVxyXG5cclxuLy8gQ3JlYXRlIHRoZSBzdHJhdGVneSBvYmplY3RcclxuY29uc3QgZW1hQ3Jvc3NvdmVyU3RyYXRlZ3k6IFN0cmF0ZWd5ID0ge1xyXG4gIGlkOiAnZW1hX2Nyb3Nzb3ZlcicsXHJcbiAgbmFtZTogJ0VNQSBDcm9zc292ZXInLFxyXG4gIGRlc2NyaXB0aW9uOiAnR2VuZXJhdGVzIHNpZ25hbHMgYmFzZWQgb24gY3Jvc3NvdmVycyBiZXR3ZWVuIGZhc3QgYW5kIHNsb3cgRU1BcycsXHJcbiAgYW5hbHl6ZTogKGRhdGE6IENhbmRsZXN0aWNrRGF0YVtdKSA9PiB7XHJcbiAgICBjb25zdCBwcmljZXMgPSBkYXRhLm1hcChkID0+IGQuY2xvc2UpO1xyXG4gICAgY29uc3QgZmFzdFBlcmlvZCA9IDk7ICAvLyBGYXN0IEVNQSBwZXJpb2RcclxuICAgIGNvbnN0IHNsb3dQZXJpb2QgPSAyMTsgLy8gU2xvdyBFTUEgcGVyaW9kXHJcblxyXG4gICAgY29uc3QgZmFzdEVNQSA9IGNhbGN1bGF0ZUVNQShwcmljZXMsIGZhc3RQZXJpb2QpO1xyXG4gICAgY29uc3Qgc2xvd0VNQSA9IGNhbGN1bGF0ZUVNQShwcmljZXMsIHNsb3dQZXJpb2QpO1xyXG5cclxuICAgIC8vIE5lZWQgYXQgbGVhc3QgdHdvIHBvaW50cyB0byBjb21wYXJlIGNyb3Nzb3ZlclxyXG4gICAgaWYgKGZhc3RFTUEubGVuZ3RoIDwgMiB8fCBzbG93RU1BLmxlbmd0aCA8IDIpIHJldHVybiBudWxsO1xyXG5cclxuICAgIGNvbnN0IGxhc3QgPSBmYXN0RU1BLmxlbmd0aCAtIDE7XHJcbiAgICBjb25zdCBwcmV2ID0gbGFzdCAtIDE7XHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIGNyb3Nzb3ZlclxyXG4gICAgY29uc3QgaXNDcm9zc1VwID0gZmFzdEVNQVtwcmV2XSA8PSBzbG93RU1BW3ByZXZdICYmIGZhc3RFTUFbbGFzdF0gPiBzbG93RU1BW2xhc3RdO1xyXG4gICAgY29uc3QgaXNDcm9zc0Rvd24gPSBmYXN0RU1BW3ByZXZdID49IHNsb3dFTUFbcHJldl0gJiYgZmFzdEVNQVtsYXN0XSA8IHNsb3dFTUFbbGFzdF07XHJcblxyXG4gICAgaWYgKGlzQ3Jvc3NVcCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6ICdidXknLFxyXG4gICAgICAgIHByaWNlOiBkYXRhW2xhc3RdLmNsb3NlLFxyXG4gICAgICAgIHRpbWU6IGRhdGFbbGFzdF0udGltZSBhcyBudW1iZXIsXHJcbiAgICAgICAgbWVzc2FnZTogYEJ1eSBTaWduYWw6IEZhc3QgRU1BICgke2Zhc3RFTUFbbGFzdF0udG9GaXhlZCgyKX0pIGNyb3NzZWQgYWJvdmUgU2xvdyBFTUEgKCR7c2xvd0VNQVtsYXN0XS50b0ZpeGVkKDIpfSlgXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzQ3Jvc3NEb3duKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogJ3NlbGwnLFxyXG4gICAgICAgIHByaWNlOiBkYXRhW2xhc3RdLmNsb3NlLFxyXG4gICAgICAgIHRpbWU6IGRhdGFbbGFzdF0udGltZSBhcyBudW1iZXIsXHJcbiAgICAgICAgbWVzc2FnZTogYFNlbGwgU2lnbmFsOiBGYXN0IEVNQSAoJHtmYXN0RU1BW2xhc3RdLnRvRml4ZWQoMil9KSBjcm9zc2VkIGJlbG93IFNsb3cgRU1BICgke3Nsb3dFTUFbbGFzdF0udG9GaXhlZCgyKX0pYFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0sXHJcbiAgaW5kaWNhdG9yczogW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiAnRmFzdCBFTUEgKDkpJyxcclxuICAgICAgZGF0YTogW10sIC8vIFdpbGwgYmUgcG9wdWxhdGVkIHdoZW4gc3RyYXRlZ3kgcnVuc1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ1Nsb3cgRU1BICgyMSknLFxyXG4gICAgICBkYXRhOiBbXSwgLy8gV2lsbCBiZSBwb3B1bGF0ZWQgd2hlbiBzdHJhdGVneSBydW5zXHJcbiAgICB9LFxyXG4gIF0sXHJcbn07XHJcblxyXG4vLyBSZWdpc3RlciB0aGUgc3RyYXRlZ3lcclxucmVnaXN0ZXJTdHJhdGVneShlbWFDcm9zc292ZXJTdHJhdGVneSk7XHJcblxyXG4vLyBFeHBvcnQgdGhlIHN0cmF0ZWd5IG9iamVjdFxyXG5leHBvcnQgZGVmYXVsdCBlbWFDcm9zc292ZXJTdHJhdGVneTsgIl0sIm5hbWVzIjpbInJlZ2lzdGVyU3RyYXRlZ3kiLCJjYWxjdWxhdGVFTUEiLCJkYXRhIiwicGVyaW9kIiwiZW1hIiwibXVsdGlwbGllciIsInN1bSIsImkiLCJwdXNoIiwiTmFOIiwibGVuZ3RoIiwiY3VycmVudFZhbHVlIiwicHJldmlvdXNFTUEiLCJjdXJyZW50RU1BIiwiZW1hQ3Jvc3NvdmVyU3RyYXRlZ3kiLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImFuYWx5emUiLCJwcmljZXMiLCJtYXAiLCJkIiwiY2xvc2UiLCJmYXN0UGVyaW9kIiwic2xvd1BlcmlvZCIsImZhc3RFTUEiLCJzbG93RU1BIiwibGFzdCIsInByZXYiLCJpc0Nyb3NzVXAiLCJpc0Nyb3NzRG93biIsInR5cGUiLCJwcmljZSIsInRpbWUiLCJtZXNzYWdlIiwidG9GaXhlZCIsImluZGljYXRvcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/strategies/ema-crossover.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/strategies/sma-crossover.ts":
/*!**************************************************!*\
  !*** ./src/services/strategies/sma-crossover.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateSMA: function() { return /* binding */ calculateSMA; },\n/* harmony export */   smaCrossoverStrategy: function() { return /* binding */ smaCrossoverStrategy; }\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n\n// Calculate Simple Moving Average (SMA)\nfunction calculateSMA(data, period) {\n    const sma = [];\n    // Fill initial values with NaN until we have enough data\n    for(let i = 0; i < period - 1; i++){\n        sma.push(NaN);\n    }\n    // Calculate SMA for each point after the initial period\n    for(let i = period - 1; i < data.length; i++){\n        let sum = 0;\n        for(let j = 0; j < period; j++){\n            sum += data[i - j];\n        }\n        sma.push(sum / period);\n    }\n    return sma;\n}\n// Convert any time format to Unix timestamp\nfunction getUnixTime(time) {\n    if (typeof time === \"number\") {\n        return time;\n    }\n    if (typeof time === \"string\") {\n        return Math.floor(new Date(time).getTime() / 1000);\n    }\n    // Handle BusinessDay format\n    const { year, month, day } = time;\n    return Math.floor(new Date(year, month - 1, day).getTime() / 1000);\n}\nconst smaCrossoverStrategy = {\n    id: \"sma_crossover\",\n    name: \"SMA Crossover\",\n    description: \"Fast SMA (9) crossing Slow SMA (21)\",\n    indicators: [\n        {\n            name: \"Fast SMA (9)\",\n            data: []\n        },\n        {\n            name: \"Slow SMA (21)\",\n            data: []\n        }\n    ],\n    analyze: (data)=>{\n        const prices = data.map((d)=>d.close);\n        const fastSMA = calculateSMA(prices, 9);\n        const slowSMA = calculateSMA(prices, 21);\n        // Need at least two points to detect a crossover\n        if (fastSMA.length < 2) return null;\n        const last = fastSMA.length - 1;\n        const prev = last - 1;\n        // Check for crossovers\n        if (!isNaN(fastSMA[prev]) && !isNaN(slowSMA[prev]) && !isNaN(fastSMA[last]) && !isNaN(slowSMA[last])) {\n            // Buy signal: Fast SMA crosses above Slow SMA\n            if (fastSMA[prev] <= slowSMA[prev] && fastSMA[last] > slowSMA[last]) {\n                return {\n                    type: \"buy\",\n                    price: data[last].close,\n                    time: getUnixTime(data[last].time),\n                    message: \"Buy Signal: Fast SMA (\".concat(fastSMA[last].toFixed(2), \") crossed above Slow SMA (\").concat(slowSMA[last].toFixed(2), \")\")\n                };\n            }\n            // Sell signal: Fast SMA crosses below Slow SMA\n            if (fastSMA[prev] >= slowSMA[prev] && fastSMA[last] < slowSMA[last]) {\n                return {\n                    type: \"sell\",\n                    price: data[last].close,\n                    time: getUnixTime(data[last].time),\n                    message: \"Sell Signal: Fast SMA (\".concat(fastSMA[last].toFixed(2), \") crossed below Slow SMA (\").concat(slowSMA[last].toFixed(2), \")\")\n                };\n            }\n        }\n        return null;\n    }\n};\n// Register the strategy\n(0,_index__WEBPACK_IMPORTED_MODULE_0__.registerStrategy)(smaCrossoverStrategy);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9zdHJhdGVnaWVzL3NtYS1jcm9zc292ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFFO0FBR3JFLHdDQUF3QztBQUNqQyxTQUFTQyxhQUFhQyxJQUFjLEVBQUVDLE1BQWM7SUFDekQsTUFBTUMsTUFBZ0IsRUFBRTtJQUV4Qix5REFBeUQ7SUFDekQsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFNBQVMsR0FBR0UsSUFBSztRQUNuQ0QsSUFBSUUsSUFBSSxDQUFDQztJQUNYO0lBRUEsd0RBQXdEO0lBQ3hELElBQUssSUFBSUYsSUFBSUYsU0FBUyxHQUFHRSxJQUFJSCxLQUFLTSxNQUFNLEVBQUVILElBQUs7UUFDN0MsSUFBSUksTUFBTTtRQUNWLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxRQUFRTyxJQUFLO1lBQy9CRCxPQUFPUCxJQUFJLENBQUNHLElBQUlLLEVBQUU7UUFDcEI7UUFDQU4sSUFBSUUsSUFBSSxDQUFDRyxNQUFNTjtJQUNqQjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQSw0Q0FBNEM7QUFDNUMsU0FBU08sWUFBWUMsSUFBVTtJQUM3QixJQUFJLE9BQU9BLFNBQVMsVUFBVTtRQUM1QixPQUFPQTtJQUNUO0lBQ0EsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUIsT0FBT0MsS0FBS0MsS0FBSyxDQUFDLElBQUlDLEtBQUtILE1BQU1JLE9BQU8sS0FBSztJQUMvQztJQUNBLDRCQUE0QjtJQUM1QixNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxHQUFHLEVBQUUsR0FBR1A7SUFDN0IsT0FBT0MsS0FBS0MsS0FBSyxDQUFDLElBQUlDLEtBQUtFLE1BQU1DLFFBQVEsR0FBR0MsS0FBS0gsT0FBTyxLQUFLO0FBQy9EO0FBRU8sTUFBTUksdUJBQWlDO0lBQzVDQyxJQUFJO0lBQ0pDLE1BQU07SUFDTkMsYUFBYTtJQUNiQyxZQUFZO1FBQ1Y7WUFDRUYsTUFBTTtZQUNOcEIsTUFBTSxFQUFFO1FBQ1Y7UUFDQTtZQUNFb0IsTUFBTTtZQUNOcEIsTUFBTSxFQUFFO1FBQ1Y7S0FDRDtJQUNEdUIsU0FBUyxDQUFDdkI7UUFDUixNQUFNd0IsU0FBU3hCLEtBQUt5QixHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLEtBQUs7UUFDcEMsTUFBTUMsVUFBVTdCLGFBQWF5QixRQUFRO1FBQ3JDLE1BQU1LLFVBQVU5QixhQUFheUIsUUFBUTtRQUVyQyxpREFBaUQ7UUFDakQsSUFBSUksUUFBUXRCLE1BQU0sR0FBRyxHQUFHLE9BQU87UUFFL0IsTUFBTXdCLE9BQU9GLFFBQVF0QixNQUFNLEdBQUc7UUFDOUIsTUFBTXlCLE9BQU9ELE9BQU87UUFFcEIsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQ0UsTUFBTUosT0FBTyxDQUFDRyxLQUFLLEtBQUssQ0FBQ0MsTUFBTUgsT0FBTyxDQUFDRSxLQUFLLEtBQzdDLENBQUNDLE1BQU1KLE9BQU8sQ0FBQ0UsS0FBSyxLQUFLLENBQUNFLE1BQU1ILE9BQU8sQ0FBQ0MsS0FBSyxHQUFHO1lBRWxELDhDQUE4QztZQUM5QyxJQUFJRixPQUFPLENBQUNHLEtBQUssSUFBSUYsT0FBTyxDQUFDRSxLQUFLLElBQUlILE9BQU8sQ0FBQ0UsS0FBSyxHQUFHRCxPQUFPLENBQUNDLEtBQUssRUFBRTtnQkFDbkUsT0FBTztvQkFDTEcsTUFBTTtvQkFDTkMsT0FBT2xDLElBQUksQ0FBQzhCLEtBQUssQ0FBQ0gsS0FBSztvQkFDdkJqQixNQUFNRCxZQUFZVCxJQUFJLENBQUM4QixLQUFLLENBQUNwQixJQUFJO29CQUNqQ3lCLFNBQVMseUJBQThFTixPQUFyREQsT0FBTyxDQUFDRSxLQUFLLENBQUNNLE9BQU8sQ0FBQyxJQUFHLDhCQUFxRCxPQUF6QlAsT0FBTyxDQUFDQyxLQUFLLENBQUNNLE9BQU8sQ0FBQyxJQUFHO2dCQUNsSDtZQUNGO1lBRUEsK0NBQStDO1lBQy9DLElBQUlSLE9BQU8sQ0FBQ0csS0FBSyxJQUFJRixPQUFPLENBQUNFLEtBQUssSUFBSUgsT0FBTyxDQUFDRSxLQUFLLEdBQUdELE9BQU8sQ0FBQ0MsS0FBSyxFQUFFO2dCQUNuRSxPQUFPO29CQUNMRyxNQUFNO29CQUNOQyxPQUFPbEMsSUFBSSxDQUFDOEIsS0FBSyxDQUFDSCxLQUFLO29CQUN2QmpCLE1BQU1ELFlBQVlULElBQUksQ0FBQzhCLEtBQUssQ0FBQ3BCLElBQUk7b0JBQ2pDeUIsU0FBUywwQkFBK0VOLE9BQXJERCxPQUFPLENBQUNFLEtBQUssQ0FBQ00sT0FBTyxDQUFDLElBQUcsOEJBQXFELE9BQXpCUCxPQUFPLENBQUNDLEtBQUssQ0FBQ00sT0FBTyxDQUFDLElBQUc7Z0JBQ25IO1lBQ0Y7UUFDRjtRQUVBLE9BQU87SUFDVDtBQUNGLEVBQUU7QUFFRix3QkFBd0I7QUFDeEJ0Qyx3REFBZ0JBLENBQUNvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvc2VydmljZXMvc3RyYXRlZ2llcy9zbWEtY3Jvc3NvdmVyLnRzPzQ3YTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RyYXRlZ3ksIFN0cmF0ZWd5U2lnbmFsLCByZWdpc3RlclN0cmF0ZWd5IH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBUaW1lLCBCdXNpbmVzc0RheSB9IGZyb20gJ2xpZ2h0d2VpZ2h0LWNoYXJ0cyc7XG5cbi8vIENhbGN1bGF0ZSBTaW1wbGUgTW92aW5nIEF2ZXJhZ2UgKFNNQSlcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVTTUEoZGF0YTogbnVtYmVyW10sIHBlcmlvZDogbnVtYmVyKTogbnVtYmVyW10ge1xuICBjb25zdCBzbWE6IG51bWJlcltdID0gW107XG4gIFxuICAvLyBGaWxsIGluaXRpYWwgdmFsdWVzIHdpdGggTmFOIHVudGlsIHdlIGhhdmUgZW5vdWdoIGRhdGFcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwZXJpb2QgLSAxOyBpKyspIHtcbiAgICBzbWEucHVzaChOYU4pO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIFNNQSBmb3IgZWFjaCBwb2ludCBhZnRlciB0aGUgaW5pdGlhbCBwZXJpb2RcbiAgZm9yIChsZXQgaSA9IHBlcmlvZCAtIDE7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHN1bSA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwZXJpb2Q7IGorKykge1xuICAgICAgc3VtICs9IGRhdGFbaSAtIGpdO1xuICAgIH1cbiAgICBzbWEucHVzaChzdW0gLyBwZXJpb2QpO1xuICB9XG5cbiAgcmV0dXJuIHNtYTtcbn1cblxuLy8gQ29udmVydCBhbnkgdGltZSBmb3JtYXQgdG8gVW5peCB0aW1lc3RhbXBcbmZ1bmN0aW9uIGdldFVuaXhUaW1lKHRpbWU6IFRpbWUpOiBudW1iZXIge1xuICBpZiAodHlwZW9mIHRpbWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHRpbWU7XG4gIH1cbiAgaWYgKHR5cGVvZiB0aW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG5ldyBEYXRlKHRpbWUpLmdldFRpbWUoKSAvIDEwMDApO1xuICB9XG4gIC8vIEhhbmRsZSBCdXNpbmVzc0RheSBmb3JtYXRcbiAgY29uc3QgeyB5ZWFyLCBtb250aCwgZGF5IH0gPSB0aW1lIGFzIEJ1c2luZXNzRGF5O1xuICByZXR1cm4gTWF0aC5mbG9vcihuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSkuZ2V0VGltZSgpIC8gMTAwMCk7XG59XG5cbmV4cG9ydCBjb25zdCBzbWFDcm9zc292ZXJTdHJhdGVneTogU3RyYXRlZ3kgPSB7XG4gIGlkOiAnc21hX2Nyb3Nzb3ZlcicsXG4gIG5hbWU6ICdTTUEgQ3Jvc3NvdmVyJyxcbiAgZGVzY3JpcHRpb246ICdGYXN0IFNNQSAoOSkgY3Jvc3NpbmcgU2xvdyBTTUEgKDIxKScsXG4gIGluZGljYXRvcnM6IFtcbiAgICB7XG4gICAgICBuYW1lOiAnRmFzdCBTTUEgKDkpJyxcbiAgICAgIGRhdGE6IFtdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnU2xvdyBTTUEgKDIxKScsXG4gICAgICBkYXRhOiBbXVxuICAgIH1cbiAgXSxcbiAgYW5hbHl6ZTogKGRhdGEpID0+IHtcbiAgICBjb25zdCBwcmljZXMgPSBkYXRhLm1hcChkID0+IGQuY2xvc2UpO1xuICAgIGNvbnN0IGZhc3RTTUEgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCA5KTtcbiAgICBjb25zdCBzbG93U01BID0gY2FsY3VsYXRlU01BKHByaWNlcywgMjEpO1xuXG4gICAgLy8gTmVlZCBhdCBsZWFzdCB0d28gcG9pbnRzIHRvIGRldGVjdCBhIGNyb3Nzb3ZlclxuICAgIGlmIChmYXN0U01BLmxlbmd0aCA8IDIpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgbGFzdCA9IGZhc3RTTUEubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBwcmV2ID0gbGFzdCAtIDE7XG5cbiAgICAvLyBDaGVjayBmb3IgY3Jvc3NvdmVyc1xuICAgIGlmICghaXNOYU4oZmFzdFNNQVtwcmV2XSkgJiYgIWlzTmFOKHNsb3dTTUFbcHJldl0pICYmIFxuICAgICAgICAhaXNOYU4oZmFzdFNNQVtsYXN0XSkgJiYgIWlzTmFOKHNsb3dTTUFbbGFzdF0pKSB7XG4gICAgICBcbiAgICAgIC8vIEJ1eSBzaWduYWw6IEZhc3QgU01BIGNyb3NzZXMgYWJvdmUgU2xvdyBTTUFcbiAgICAgIGlmIChmYXN0U01BW3ByZXZdIDw9IHNsb3dTTUFbcHJldl0gJiYgZmFzdFNNQVtsYXN0XSA+IHNsb3dTTUFbbGFzdF0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnYnV5JyxcbiAgICAgICAgICBwcmljZTogZGF0YVtsYXN0XS5jbG9zZSxcbiAgICAgICAgICB0aW1lOiBnZXRVbml4VGltZShkYXRhW2xhc3RdLnRpbWUpLFxuICAgICAgICAgIG1lc3NhZ2U6IGBCdXkgU2lnbmFsOiBGYXN0IFNNQSAoJHtmYXN0U01BW2xhc3RdLnRvRml4ZWQoMil9KSBjcm9zc2VkIGFib3ZlIFNsb3cgU01BICgke3Nsb3dTTUFbbGFzdF0udG9GaXhlZCgyKX0pYFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTZWxsIHNpZ25hbDogRmFzdCBTTUEgY3Jvc3NlcyBiZWxvdyBTbG93IFNNQVxuICAgICAgaWYgKGZhc3RTTUFbcHJldl0gPj0gc2xvd1NNQVtwcmV2XSAmJiBmYXN0U01BW2xhc3RdIDwgc2xvd1NNQVtsYXN0XSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdzZWxsJyxcbiAgICAgICAgICBwcmljZTogZGF0YVtsYXN0XS5jbG9zZSxcbiAgICAgICAgICB0aW1lOiBnZXRVbml4VGltZShkYXRhW2xhc3RdLnRpbWUpLFxuICAgICAgICAgIG1lc3NhZ2U6IGBTZWxsIFNpZ25hbDogRmFzdCBTTUEgKCR7ZmFzdFNNQVtsYXN0XS50b0ZpeGVkKDIpfSkgY3Jvc3NlZCBiZWxvdyBTbG93IFNNQSAoJHtzbG93U01BW2xhc3RdLnRvRml4ZWQoMil9KWBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLy8gUmVnaXN0ZXIgdGhlIHN0cmF0ZWd5XG5yZWdpc3RlclN0cmF0ZWd5KHNtYUNyb3Nzb3ZlclN0cmF0ZWd5KTsgIl0sIm5hbWVzIjpbInJlZ2lzdGVyU3RyYXRlZ3kiLCJjYWxjdWxhdGVTTUEiLCJkYXRhIiwicGVyaW9kIiwic21hIiwiaSIsInB1c2giLCJOYU4iLCJsZW5ndGgiLCJzdW0iLCJqIiwiZ2V0VW5peFRpbWUiLCJ0aW1lIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsImdldFRpbWUiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJzbWFDcm9zc292ZXJTdHJhdGVneSIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiaW5kaWNhdG9ycyIsImFuYWx5emUiLCJwcmljZXMiLCJtYXAiLCJkIiwiY2xvc2UiLCJmYXN0U01BIiwic2xvd1NNQSIsImxhc3QiLCJwcmV2IiwiaXNOYU4iLCJ0eXBlIiwicHJpY2UiLCJtZXNzYWdlIiwidG9GaXhlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/strategies/sma-crossover.ts\n"));

/***/ })

});