"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* harmony import */ var _services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/moving-averages */ \"(app-pages-browser)/./src/services/strategies/moving-averages.ts\");\n/* harmony import */ var _TickerHeader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TickerHeader */ \"(app-pages-browser)/./src/components/Chart/TickerHeader.tsx\");\n/* harmony import */ var _utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/priceFormat */ \"(app-pages-browser)/./src/utils/priceFormat.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy, token = \"BTC\", baseToken = \"USDT\", exchange = \"CryptoCompare\", onPairChange = ()=>{} } = param;\n    _s();\n    const [selectedExchange, setSelectedExchange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(exchange);\n    const [selectedBaseToken, setSelectedBaseToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(baseToken);\n    const [currentPrice, setCurrentPrice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>(0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(baseToken).formatter(0));\n    const [priceStats, setPriceStats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        const initialValue = (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(baseToken).formatter(0);\n        return {\n            change24h: initialValue,\n            high24h: initialValue,\n            low24h: initialValue\n        };\n    });\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSignalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Function to get interval in seconds\n    const getIntervalSeconds = (tf)=>{\n        switch(tf){\n            case \"1m\":\n                return 60;\n            case \"5m\":\n                return 300;\n            case \"15m\":\n                return 900;\n            case \"30m\":\n                return 1800;\n            case \"1h\":\n                return 3600;\n            case \"4h\":\n                return 14400;\n            case \"1d\":\n                return 86400;\n            default:\n                return 60;\n        }\n    };\n    // Function to safely remove a series\n    const safelyRemoveSeries = (chart, series)=>{\n        try {\n            if (series && chart) {\n                chart.removeSeries(series);\n            }\n        } catch (e) {\n            console.error(\"Error removing series:\", e);\n        }\n    };\n    // Function to get appropriate decimal places based on base token\n    const getDecimalPlaces = (baseToken)=>{\n        return baseToken === \"BTC\" ? 8 : 2;\n    };\n    // Function to get appropriate min move based on base token\n    const getMinMove = (baseToken)=>{\n        return baseToken.toUpperCase() === \"BTC\" ? 0.00000001 : 0.01;\n    };\n    // Function to format price based on base token\n    const formatPrice = (price, baseToken)=>{\n        if (baseToken === \"BTC\") {\n            return price.toFixed(8); // Show 8 decimal places for BTC pairs\n        }\n        return price.toFixed(2); // Show 2 decimal places for other pairs\n    };\n    // Function to format signal text\n    const formatSignalText = (type, price, baseToken)=>{\n        return \"\".concat(type, \" \").concat(formatPrice(price, baseToken));\n    };\n    // Function to check for crossover signals\n    const checkForSignal = (prevFast, prevSlow, currFast, currSlow, candle, data)=>{\n        if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n            if (strategy === \"macd_crossover\") {\n                const prevHistogram = prevFast - prevSlow;\n                const currHistogram = currFast - currSlow;\n                if (prevHistogram <= 0 && currHistogram > 0) {\n                    return {\n                        time: candle.time,\n                        position: \"belowBar\",\n                        color: \"#26a69a\",\n                        shape: \"arrowUp\",\n                        text: formatSignalText(\"Buy\", candle.close, baseToken),\n                        size: 2,\n                        value: candle.low * 0.999\n                    };\n                } else if (prevHistogram >= 0 && currHistogram < 0) {\n                    return {\n                        time: candle.time,\n                        position: \"aboveBar\",\n                        color: \"#ef5350\",\n                        shape: \"arrowDown\",\n                        text: formatSignalText(\"Sell\", candle.close, baseToken),\n                        size: 2,\n                        value: candle.high * 1.001\n                    };\n                }\n            } else {\n                const avgPrice = data.reduce((sum, d)=>sum + d.close, 0) / data.length;\n                const priceRange = data.reduce((range, d)=>Math.max(range, Math.abs(d.high - d.low)), 0);\n                const offset = priceRange * 0.75;\n                if (prevFast <= prevSlow && currFast > currSlow) {\n                    return {\n                        time: candle.time,\n                        position: \"belowBar\",\n                        color: \"#26a69a\",\n                        shape: \"arrowUp\",\n                        text: formatSignalText(\"Buy\", candle.close, baseToken),\n                        size: 2,\n                        value: Math.min(...data.slice(-10).map((d)=>d.low)) - offset\n                    };\n                } else if (prevFast >= prevSlow && currFast < currSlow) {\n                    return {\n                        time: candle.time,\n                        position: \"aboveBar\",\n                        color: \"#ef5350\",\n                        shape: \"arrowDown\",\n                        text: formatSignalText(\"Sell\", candle.close, baseToken),\n                        size: 2,\n                        value: Math.max(...data.slice(-10).map((d)=>d.high)) + offset\n                    };\n                }\n            }\n        }\n        return null;\n    };\n    // Function to get histogram scale factor based on timeframe\n    const getHistogramScaleFactor = (tf, maxHistogram)=>{\n        if (maxHistogram === 0) return 1;\n        switch(tf){\n            case \"1h\":\n            case \"4h\":\n            case \"1d\":\n            case \"1w\":\n                return 100 / maxHistogram; // Much larger scaling for higher timeframes\n            default:\n                return 20 / maxHistogram; // Original scaling for lower timeframes\n        }\n    };\n    // Function to add strategy indicators\n    const addStrategyIndicators = (chart, data)=>{\n        console.log(\"Adding strategy indicators\");\n        // Clear any existing indicators\n        indicatorSeriesRefs.current.forEach((series)=>safelyRemoveSeries(chart, series));\n        indicatorSeriesRefs.current.clear();\n        if (markerSeriesRef.current) {\n            safelyRemoveSeries(chart, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n        }\n        if (strategy === \"none\") return;\n        // Ensure data is sorted and deduplicated by time\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        let histogramData = [];\n        // Calculate indicators based on strategy type\n        if (strategy === \"macd_crossover\") {\n            const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n            fastLine = macdData.macd;\n            slowLine = macdData.signal;\n            histogramData = macdData.histogram;\n        } else {\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n        }\n        // Add indicator lines\n        const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n        if (!selectedStrategy) return;\n        if (strategy === \"macd_crossover\") {\n            // Create MACD series with separate price scale\n            const macdSeries = chart.addLineSeries({\n                color: \"#2962FF\",\n                lineWidth: 2,\n                title: \"MACD\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\"\n            });\n            const signalSeries = chart.addLineSeries({\n                color: \"#FF6B6B\",\n                lineWidth: 2,\n                title: \"Signal\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\"\n            });\n            const histogramSeries = chart.addHistogramSeries({\n                color: \"#26a69a\",\n                title: \"Histogram\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\",\n                base: 0\n            });\n            // Configure the price scale for MACD\n            const macdScale = chart.priceScale(\"overlay\");\n            if (macdScale) {\n                macdScale.applyOptions({\n                    scaleMargins: {\n                        top: 0.7,\n                        bottom: 0.1\n                    },\n                    visible: true,\n                    borderVisible: true\n                });\n            }\n            indicatorSeriesRefs.current.set(\"MACD\", macdSeries);\n            indicatorSeriesRefs.current.set(\"Signal\", signalSeries);\n            indicatorSeriesRefs.current.set(\"Histogram\", histogramSeries);\n            // Set data for each series\n            const macdLineData = fastLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            const signalLineData = slowLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            // Scale histogram values with dynamic scaling\n            const maxHistogram = Math.max(...histogramData.map(Math.abs));\n            const scaleFactor = getHistogramScaleFactor(timeframe, maxHistogram);\n            const histogramSeriesData = histogramData.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value * scaleFactor,\n                    color: value >= 0 ? \"#26a69a\" : \"#ef5350\"\n                })).filter((d)=>d.value !== null);\n            macdSeries.setData(macdLineData);\n            signalSeries.setData(signalLineData);\n            histogramSeries.setData(histogramSeriesData);\n            // Also update the real-time update scaling factor\n            if (macdSeries && signalSeries && histogramSeries) {\n                const lastMACD = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: fastLine[fastLine.length - 1]\n                };\n                const lastSignal = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: slowLine[slowLine.length - 1]\n                };\n                const lastHistogram = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: histogramData[histogramData.length - 1] * scaleFactor,\n                    color: histogramData[histogramData.length - 1] >= 0 ? \"#26a69a\" : \"#ef5350\"\n                };\n                macdSeries.update(lastMACD);\n                signalSeries.update(lastSignal);\n                histogramSeries.update(lastHistogram);\n            }\n        } else {\n            // Handle other strategies\n            const colors = [\n                \"#2962FF\",\n                \"#FF6B6B\"\n            ];\n            selectedStrategy.indicators.forEach((indicator, index)=>{\n                const lineSeries = chart.addLineSeries({\n                    color: colors[index],\n                    lineWidth: 2,\n                    title: indicator.name,\n                    priceFormat: {\n                        type: \"price\",\n                        precision: getDecimalPlaces(baseToken),\n                        minMove: getMinMove(baseToken)\n                    }\n                });\n                indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n                const lineData = (index === 0 ? fastLine : slowLine).map((value, idx)=>({\n                        time: uniqueData[idx].time,\n                        value: isNaN(value) ? null : value\n                    })).filter((d)=>d.value !== null).sort((a, b)=>a.time - b.time);\n                lineSeries.setData(lineData);\n            });\n        }\n        // Create marker series\n        markerSeriesRef.current = chart.addLineSeries({\n            lastValueVisible: false,\n            priceLineVisible: false,\n            crosshairMarkerVisible: false,\n            lineVisible: false,\n            lineWidth: 1,\n            color: \"rgba(0, 0, 0, 0)\",\n            priceScaleId: \"right\"\n        });\n        // Find and set signals\n        const signals = [];\n        for(let i = 1; i < uniqueData.length; i++){\n            const signal = checkForSignal(fastLine[i - 1], slowLine[i - 1], fastLine[i], slowLine[i], uniqueData[i], uniqueData.slice(Math.max(0, i - 10), i + 1));\n            if (signal) {\n                signals.push(signal);\n            }\n        }\n        if (signals.length > 0) {\n            const sortedSignals = signals.sort((a, b)=>a.time - b.time);\n            markerSeriesRef.current.setMarkers(sortedSignals);\n            markerSeriesRef.current.setData(sortedSignals.map((signal)=>({\n                    time: signal.time,\n                    value: signal.value\n                })));\n        }\n    };\n    // Modify the real-time signal check\n    const checkRealTimeSignal = (data)=>{\n        if (!markerSeriesRef.current || data.length < 2) return;\n        // Ensure data is sorted and deduplicated\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        let histogramData = [];\n        // Calculate indicators based on strategy type\n        if (strategy === \"macd_crossover\") {\n            const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n            fastLine = macdData.macd;\n            slowLine = macdData.signal;\n            histogramData = macdData.histogram;\n            // Update MACD series if they exist\n            const macdSeries = indicatorSeriesRefs.current.get(\"MACD\");\n            const signalSeries = indicatorSeriesRefs.current.get(\"Signal\");\n            const histogramSeries = indicatorSeriesRefs.current.get(\"Histogram\");\n            if (macdSeries && signalSeries && histogramSeries) {\n                // Scale histogram values with dynamic scaling\n                const maxHistogram = Math.max(...histogramData.map(Math.abs));\n                const scaleFactor = getHistogramScaleFactor(timeframe, maxHistogram);\n                const lastMACD = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: fastLine[fastLine.length - 1]\n                };\n                const lastSignal = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: slowLine[slowLine.length - 1]\n                };\n                const lastHistogram = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: histogramData[histogramData.length - 1] * scaleFactor,\n                    color: histogramData[histogramData.length - 1] >= 0 ? \"#26a69a\" : \"#ef5350\"\n                };\n                macdSeries.update(lastMACD);\n                signalSeries.update(lastSignal);\n                histogramSeries.update(lastHistogram);\n            }\n        } else {\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n        }\n        const signal = checkForSignal(fastLine[fastLine.length - 2], slowLine[slowLine.length - 2], fastLine[fastLine.length - 1], slowLine[slowLine.length - 1], uniqueData[uniqueData.length - 1], uniqueData.slice(-10));\n        if (signal) {\n            const existingMarkers = markerSeriesRef.current.markers() || [];\n            const newMarkers = [\n                ...existingMarkers,\n                signal\n            ].sort((a, b)=>a.time - b.time);\n            console.log(\"Adding real-time \".concat(signal.text, \" signal\"));\n            markerSeriesRef.current.setMarkers(newMarkers);\n            // Update marker series data\n            markerSeriesRef.current.setData(newMarkers.map((marker)=>({\n                    time: marker.time,\n                    value: marker.value\n                })));\n        }\n    };\n    // Function to update price stats\n    const updatePriceStats = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((data)=>{\n        if (data.length < 2) return;\n        const last24h = data.slice(-24); // Assuming hourly data\n        const currentPrice = last24h[last24h.length - 1].close;\n        const high24h = Math.max(...last24h.map((d)=>d.high));\n        const low24h = Math.min(...last24h.map((d)=>d.low));\n        // Use the chart's price format configuration\n        const priceFormat = (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(baseToken);\n        // Format prices using chart's formatter\n        const formattedCurrentPrice = priceFormat.formatter(currentPrice);\n        const formattedHigh = priceFormat.formatter(high24h);\n        const formattedLow = priceFormat.formatter(low24h);\n        // Update state with chart-formatted values\n        setCurrentPrice(formattedCurrentPrice);\n        setPriceStats({\n            change24h: formattedCurrentPrice,\n            high24h: formattedHigh,\n            low24h: formattedLow\n        });\n    }, [\n        baseToken\n    ]);\n    // Effect for strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (chartRef.current && historicalDataRef.current.length > 0) {\n            addStrategyIndicators(chartRef.current, historicalDataRef.current);\n        }\n    }, [\n        strategy\n    ]);\n    // Price format configuration\n    const getPriceFormat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((baseToken)=>{\n        const isBTCPair = baseToken === \"BTC\";\n        return {\n            type: \"price\",\n            precision: isBTCPair ? 8 : 2,\n            minMove: isBTCPair ? 0.00000001 : 0.01,\n            format: (price)=>{\n                if (typeof price !== \"number\" || isNaN(price)) {\n                    return isBTCPair ? \"0.00000000\" : \"0.00\";\n                }\n                return price.toFixed(isBTCPair ? 8 : 2);\n            }\n        };\n    }, []);\n    // Create series with price format\n    const createSeriesWithFormat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((chart, options, priceFormat)=>{\n        return chart.addCandlestickSeries({\n            ...options,\n            priceFormat: {\n                type: priceFormat.type,\n                precision: priceFormat.precision,\n                minMove: priceFormat.minMove\n            }\n        });\n    }, []);\n    // Main chart initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\",\n                visible: true,\n                scaleMargins: {\n                    top: 0.1,\n                    bottom: 0.4\n                },\n                autoScale: true,\n                mode: 0,\n                alignLabels: true,\n                borderVisible: true,\n                entireTextOnly: true,\n                ticksVisible: true\n            },\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, chartOptions);\n        // Create candlestick series with price format\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\",\n            priceFormat: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(baseToken)\n        });\n        // Configure the price scale\n        const priceScale = chart.priceScale(\"right\");\n        priceScale.applyOptions({\n            scaleMargins: {\n                top: 0.1,\n                bottom: 0.4\n            },\n            autoScale: true,\n            mode: 0,\n            alignLabels: true,\n            borderVisible: true,\n            entireTextOnly: true,\n            ticksVisible: true\n        });\n        // Set the price formatter for the scale\n        chart.applyOptions({\n            localization: {\n                priceFormatter: (price)=>formatPrice(price, baseToken)\n            }\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Load initial data\n        const loadData = async ()=>{\n            try {\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe, token, baseToken);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                updatePriceStats(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadData();\n        // Real-time updates\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (!candlestickSeriesRef.current) return;\n            const intervalSeconds = getIntervalSeconds(timeframe);\n            const candleTimestamp = Math.floor(data.time / intervalSeconds) * intervalSeconds;\n            // If this is a new candle\n            if (!currentCandleRef.current || candleTimestamp !== currentCandleRef.current.time) {\n                // If we had a previous candle, add it to historical data and check for signals\n                if (currentCandleRef.current) {\n                    historicalDataRef.current = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    // Update strategies with the new historical data\n                    if (strategy !== \"none\" && chartRef.current) {\n                        addStrategyIndicators(chartRef.current, historicalDataRef.current);\n                    }\n                }\n                // Start new candle\n                currentCandleRef.current = {\n                    time: candleTimestamp,\n                    open: data.value,\n                    high: data.value,\n                    low: data.value,\n                    close: data.value\n                };\n            } else {\n                // Update current candle\n                currentCandleRef.current.high = Math.max(currentCandleRef.current.high, data.value);\n                currentCandleRef.current.low = Math.min(currentCandleRef.current.low, data.value);\n                currentCandleRef.current.close = data.value;\n                // Check for real-time signals with current candle\n                if (strategy !== \"none\" && chartRef.current && historicalDataRef.current.length > 0) {\n                    const updatedData = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    checkRealTimeSignal(updatedData);\n                }\n            }\n            // Update the chart with current candle\n            candlestickSeriesRef.current.update(currentCandleRef.current);\n            // Update price stats with the latest data\n            if (historicalDataRef.current.length > 0) {\n                updatePriceStats([\n                    ...historicalDataRef.current,\n                    currentCandleRef.current\n                ]);\n            }\n        }, timeframe, token, baseToken);\n        // Handle window resize\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        // Remove TradingView logo elements\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created and after a delay\n        removeTradingViewLogo();\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        // Function to create indicator series with correct price format\n        const createIndicatorSeries = (type, options)=>{\n            const priceConfig = getPriceFormat(baseToken);\n            const seriesOptions = {\n                ...options,\n                priceFormat: {\n                    type: \"price\",\n                    precision: priceConfig.precision,\n                    minMove: priceConfig.minMove\n                }\n            };\n            return type === \"line\" ? chart.addLineSeries(seriesOptions) : chart.addHistogramSeries(seriesOptions);\n        };\n        // Add MACD series with proper price formatting\n        if (strategy === \"macd_crossover\") {\n            const macdSeries = createIndicatorSeries(\"line\", {\n                color: \"#2962FF\",\n                lineWidth: 2,\n                title: \"MACD\",\n                priceScaleId: \"overlay\"\n            });\n            const signalSeries = createIndicatorSeries(\"line\", {\n                color: \"#FF6B6B\",\n                lineWidth: 2,\n                title: \"Signal\",\n                priceScaleId: \"overlay\"\n            });\n            const histogramSeries = createIndicatorSeries(\"histogram\", {\n                color: \"#26a69a\",\n                title: \"Histogram\",\n                priceScaleId: \"overlay\",\n                base: 0\n            });\n            indicatorSeriesRefs.current.set(\"MACD\", macdSeries);\n            indicatorSeriesRefs.current.set(\"Signal\", signalSeries);\n            indicatorSeriesRefs.current.set(\"Histogram\", histogramSeries);\n        }\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            chart.remove();\n        };\n    }, [\n        timeframe\n    ]);\n    // Handle trading pair change\n    const handlePairChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newToken, newBaseToken)=>{\n        onPairChange(newToken, newBaseToken);\n        // Use the same price formatter as the chart for initial values\n        const priceFormatter = (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken).formatter;\n        const initialValue = priceFormatter(0);\n        // Update initial price states with chart-formatted values\n        setCurrentPrice(initialValue);\n        setPriceStats({\n            change24h: initialValue,\n            high24h: initialValue,\n            low24h: initialValue\n        });\n        const chart = chartRef.current;\n        const candlestickSeries = candlestickSeriesRef.current;\n        if (!chart || !candlestickSeries) return;\n        const loadNewData = async ()=>{\n            try {\n                // Update candlestick series price format\n                candlestickSeries.applyOptions({\n                    priceFormat: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken)\n                });\n                // Update price scale format\n                chart.applyOptions({\n                    localization: {\n                        priceFormatter: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken).formatter\n                    }\n                });\n                // Update indicator series price formats\n                indicatorSeriesRefs.current.forEach((series)=>{\n                    series.applyOptions({\n                        priceFormat: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken)\n                    });\n                });\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe, newToken, newBaseToken);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                updatePriceStats(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n                // Force chart to recalculate price scale\n                chart.timeScale().fitContent();\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadNewData();\n    }, [\n        timeframe,\n        strategy,\n        updatePriceStats,\n        onPairChange\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Update initial state format based on base token\n        setCurrentPrice(baseToken === \"BTC\" ? \"0.00000000\" : \"0.00\");\n        setPriceStats((prev)=>({\n                ...prev,\n                high24h: baseToken === \"BTC\" ? \"0.00000000\" : \"0.00\",\n                low24h: baseToken === \"BTC\" ? \"0.00000000\" : \"0.00\"\n            }));\n    }, [\n        baseToken\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TickerHeader__WEBPACK_IMPORTED_MODULE_6__.TickerHeader, {\n                token: token,\n                baseToken: baseToken,\n                exchange: exchange,\n                currentPrice: currentPrice,\n                priceStats: priceStats,\n                onExchangeChange: setSelectedExchange,\n                onPairChange: handlePairChange\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 901,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: chartContainerRef,\n                className: \"flex-1\"\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 910,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 900,\n        columnNumber: 5\n    }, this);\n}\n_s(CandlestickChart, \"eALrg/XLjL5ZN4okPcz1IsNaUWo=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NhbmRsZXN0aWNrQ2hhcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUVpRTtBQUNoQjtBQUNnRDtBQUNqQztBQU9qQjtBQUNEO0FBUWpCO0FBbUJ0QixTQUFTZSxpQkFBaUIsS0FPVDtRQVBTLEVBQy9CQyxTQUFTLEVBQ1RDLFFBQVEsRUFDUkMsUUFBUSxLQUFLLEVBQ2JDLFlBQVksTUFBTSxFQUNsQkMsV0FBVyxlQUFlLEVBQzFCQyxlQUFlLEtBQU8sQ0FBQyxFQUNELEdBUFM7O0lBUS9CLE1BQU0sQ0FBQ0Msa0JBQWtCQyxvQkFBb0IsR0FBR3JCLCtDQUFRQSxDQUFDa0I7SUFDekQsTUFBTSxDQUFDSSxtQkFBbUJDLHFCQUFxQixHQUFHdkIsK0NBQVFBLENBQUNpQjtJQUMzRCxNQUFNLENBQUNPLGNBQWNDLGdCQUFnQixHQUFHekIsK0NBQVFBLENBQVMsSUFDdkRZLHVFQUFtQkEsQ0FBQ0ssV0FBV1MsU0FBUyxDQUFDO0lBRTNDLE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHNUIsK0NBQVFBLENBQUM7UUFDM0MsTUFBTTZCLGVBQWVqQix1RUFBbUJBLENBQUNLLFdBQVdTLFNBQVMsQ0FBQztRQUM5RCxPQUFPO1lBQ0xJLFdBQVdEO1lBQ1hFLFNBQVNGO1lBQ1RHLFFBQVFIO1FBQ1Y7SUFDRjtJQUNBLE1BQU1JLG9CQUFvQmxDLDZDQUFNQSxDQUFpQjtJQUNqRCxNQUFNbUMsV0FBV25DLDZDQUFNQSxDQUFtQjtJQUMxQyxNQUFNb0MsdUJBQXVCcEMsNkNBQU1BLENBQU07SUFDekMsTUFBTXFDLHNCQUFzQnJDLDZDQUFNQSxDQUFtQixJQUFJc0M7SUFDekQsTUFBTUMsa0JBQWtCdkMsNkNBQU1BLENBQU07SUFDcEMsTUFBTXdDLG9CQUFvQnhDLDZDQUFNQSxDQUFRLEVBQUU7SUFDMUMsTUFBTXlDLG1CQUFtQnpDLDZDQUFNQSxDQUFNO0lBQ3JDLE1BQU0wQyxnQkFB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QUNQQyxXQUFXQTtnQkFDWEMsVUFBVUE7Z0JBQ1ZNLGNBQWNBO2dCQUNkRyxZQUFZQTtnQkFDWnNOLGtCQUFrQjVOO2dCQUNsQkYsY0FBY3NOOzs7Ozs7MEJBRWhCLDhEQUFDTTtnQkFBSUcsS0FBS2pOO2dCQUFtQitNLFdBQVU7Ozs7Ozs7Ozs7OztBQUc3QztHQXgyQmdCbk87S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvQ2FuZGxlc3RpY2tDaGFydC50c3g/OGQ0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgeyBUaW1lLCBJQ2hhcnRBcGksIENoYXJ0T3B0aW9ucywgRGVlcFBhcnRpYWwsIExpbmVXaWR0aCwgQnVzaW5lc3NEYXksIFVUQ1RpbWVzdGFtcCB9IGZyb20gJ2xpZ2h0d2VpZ2h0LWNoYXJ0cyc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ2hhcnQgfSBmcm9tICdsaWdodHdlaWdodC1jaGFydHMnO1xuaW1wb3J0IHsgZ2V0SGlzdG9yaWNhbERhdGEsIHN1YnNjcmliZVRvUHJpY2UsIFRpbWVmcmFtZSB9IGZyb20gJ0Avc2VydmljZXMvYXBpL2NyeXB0b0NvbXBhcmVBUEknO1xuaW1wb3J0IHsgU3RyYXRlZ3lJZCwgZ2V0U3RyYXRlZ3kgfSBmcm9tICdAL3NlcnZpY2VzL3N0cmF0ZWdpZXMnO1xuaW1wb3J0IHsgXG4gIGNhbGN1bGF0ZUVNQSxcbiAgY2FsY3VsYXRlU01BLFxuICBjYWxjdWxhdGVURU1BLFxuICBjYWxjdWxhdGVITUEsXG4gIGNhbGN1bGF0ZU1BQ0Rcbn0gZnJvbSAnQC9zZXJ2aWNlcy9zdHJhdGVnaWVzL21vdmluZy1hdmVyYWdlcyc7XG5pbXBvcnQgeyBUaWNrZXJIZWFkZXIgfSBmcm9tICcuL1RpY2tlckhlYWRlcic7XG5pbXBvcnQgeyBcbiAgZ2V0Q2hhcnRQcmljZUZvcm1hdCwgXG4gIGdldFNjYWxlRm9ybWF0LCBcbiAgZm9ybWF0UHJpY2UsIFxuICBpc0JUQ1BhaXIsXG4gIERFRkFVTFRfQlRDX0ZPUk1BVCxcbiAgREVGQVVMVF9VU0RUX0ZPUk1BVFxufSBmcm9tICdAL3V0aWxzL3ByaWNlRm9ybWF0JztcblxuaW50ZXJmYWNlIENhbmRsZXN0aWNrQ2hhcnRQcm9wcyB7XG4gIHRpbWVmcmFtZTogVGltZWZyYW1lO1xuICBzdHJhdGVneTogU3RyYXRlZ3lJZDtcbiAgdG9rZW4/OiBzdHJpbmc7XG4gIGJhc2VUb2tlbj86IHN0cmluZztcbiAgZXhjaGFuZ2U/OiBzdHJpbmc7XG4gIG9uUGFpckNoYW5nZT86ICh0b2tlbjogc3RyaW5nLCBiYXNlVG9rZW46IHN0cmluZykgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIENhbmRsZSB7XG4gIHRpbWU6IFRpbWU7XG4gIG9wZW46IG51bWJlcjtcbiAgaGlnaDogbnVtYmVyO1xuICBsb3c6IG51bWJlcjtcbiAgY2xvc2U6IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhbmRsZXN0aWNrQ2hhcnQoeyBcbiAgdGltZWZyYW1lLCBcbiAgc3RyYXRlZ3ksIFxuICB0b2tlbiA9ICdCVEMnLCBcbiAgYmFzZVRva2VuID0gJ1VTRFQnLFxuICBleGNoYW5nZSA9ICdDcnlwdG9Db21wYXJlJyxcbiAgb25QYWlyQ2hhbmdlID0gKCkgPT4ge30gXG59OiBDYW5kbGVzdGlja0NoYXJ0UHJvcHMpIHtcbiAgY29uc3QgW3NlbGVjdGVkRXhjaGFuZ2UsIHNldFNlbGVjdGVkRXhjaGFuZ2VdID0gdXNlU3RhdGUoZXhjaGFuZ2UpO1xuICBjb25zdCBbc2VsZWN0ZWRCYXNlVG9rZW4sIHNldFNlbGVjdGVkQmFzZVRva2VuXSA9IHVzZVN0YXRlKGJhc2VUb2tlbik7XG4gIGNvbnN0IFtjdXJyZW50UHJpY2UsIHNldEN1cnJlbnRQcmljZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCgpID0+IFxuICAgIGdldENoYXJ0UHJpY2VGb3JtYXQoYmFzZVRva2VuKS5mb3JtYXR0ZXIoMClcbiAgKTtcbiAgY29uc3QgW3ByaWNlU3RhdHMsIHNldFByaWNlU3RhdHNdID0gdXNlU3RhdGUoKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IGdldENoYXJ0UHJpY2VGb3JtYXQoYmFzZVRva2VuKS5mb3JtYXR0ZXIoMCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoYW5nZTI0aDogaW5pdGlhbFZhbHVlLFxuICAgICAgaGlnaDI0aDogaW5pdGlhbFZhbHVlLFxuICAgICAgbG93MjRoOiBpbml0aWFsVmFsdWVcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgY2hhcnRDb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZjxJQ2hhcnRBcGkgfCBudWxsPihudWxsKTtcbiAgY29uc3QgY2FuZGxlc3RpY2tTZXJpZXNSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcbiAgY29uc3QgaW5kaWNhdG9yU2VyaWVzUmVmcyA9IHVzZVJlZjxNYXA8c3RyaW5nLCBhbnk+PihuZXcgTWFwKCkpO1xuICBjb25zdCBtYXJrZXJTZXJpZXNSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcbiAgY29uc3QgaGlzdG9yaWNhbERhdGFSZWYgPSB1c2VSZWY8YW55W10+KFtdKTtcbiAgY29uc3QgY3VycmVudENhbmRsZVJlZiA9IHVzZVJlZjxhbnk+KG51bGwpO1xuICBjb25zdCBsYXN0U2lnbmFsUmVmID0gdXNlUmVmPHsgdGltZTogbnVtYmVyLCB0eXBlOiAnYnV5JyB8ICdzZWxsJyB9IHwgbnVsbD4obnVsbCk7XG5cbiAgLy8gRnVuY3Rpb24gdG8gZ2V0IGludGVydmFsIGluIHNlY29uZHNcbiAgY29uc3QgZ2V0SW50ZXJ2YWxTZWNvbmRzID0gKHRmOiBUaW1lZnJhbWUpOiBudW1iZXIgPT4ge1xuICAgIHN3aXRjaCAodGYpIHtcbiAgICAgIGNhc2UgJzFtJzogcmV0dXJuIDYwO1xuICAgICAgY2FzZSAnNW0nOiByZXR1cm4gMzAwO1xuICAgICAgY2FzZSAnMTVtJzogcmV0dXJuIDkwMDtcbiAgICAgIGNhc2UgJzMwbSc6IHJldHVybiAxODAwO1xuICAgICAgY2FzZSAnMWgnOiByZXR1cm4gMzYwMDtcbiAgICAgIGNhc2UgJzRoJzogcmV0dXJuIDE0NDAwO1xuICAgICAgY2FzZSAnMWQnOiByZXR1cm4gODY0MDA7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gNjA7XG4gICAgfVxuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIHNhZmVseSByZW1vdmUgYSBzZXJpZXNcbiAgY29uc3Qgc2FmZWx5UmVtb3ZlU2VyaWVzID0gKGNoYXJ0OiBJQ2hhcnRBcGksIHNlcmllczogYW55KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChzZXJpZXMgJiYgY2hhcnQpIHtcbiAgICAgICAgY2hhcnQucmVtb3ZlU2VyaWVzKHNlcmllcyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVtb3Zpbmcgc2VyaWVzOicsIGUpO1xuICAgIH1cbiAgfTtcblxuICAvLyBGdW5jdGlvbiB0byBnZXQgYXBwcm9wcmlhdGUgZGVjaW1hbCBwbGFjZXMgYmFzZWQgb24gYmFzZSB0b2tlblxuICBjb25zdCBnZXREZWNpbWFsUGxhY2VzID0gKGJhc2VUb2tlbjogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gYmFzZVRva2VuID09PSAnQlRDJyA/IDggOiAyO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGdldCBhcHByb3ByaWF0ZSBtaW4gbW92ZSBiYXNlZCBvbiBiYXNlIHRva2VuXG4gIGNvbnN0IGdldE1pbk1vdmUgPSAoYmFzZVRva2VuOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgIHJldHVybiBiYXNlVG9rZW4udG9VcHBlckNhc2UoKSA9PT0gJ0JUQycgPyAwLjAwMDAwMDAxIDogMC4wMTtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiB0byBmb3JtYXQgcHJpY2UgYmFzZWQgb24gYmFzZSB0b2tlblxuICBjb25zdCBmb3JtYXRQcmljZSA9IChwcmljZTogbnVtYmVyLCBiYXNlVG9rZW46IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgaWYgKGJhc2VUb2tlbiA9PT0gJ0JUQycpIHtcbiAgICAgIHJldHVybiBwcmljZS50b0ZpeGVkKDgpOyAgLy8gU2hvdyA4IGRlY2ltYWwgcGxhY2VzIGZvciBCVEMgcGFpcnNcbiAgICB9XG4gICAgcmV0dXJuIHByaWNlLnRvRml4ZWQoMik7ICAgIC8vIFNob3cgMiBkZWNpbWFsIHBsYWNlcyBmb3Igb3RoZXIgcGFpcnNcbiAgfTtcblxuICAvLyBGdW5jdGlvbiB0byBmb3JtYXQgc2lnbmFsIHRleHRcbiAgY29uc3QgZm9ybWF0U2lnbmFsVGV4dCA9ICh0eXBlOiBzdHJpbmcsIHByaWNlOiBudW1iZXIsIGJhc2VUb2tlbjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gYCR7dHlwZX0gJHtmb3JtYXRQcmljZShwcmljZSwgYmFzZVRva2VuKX1gO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGZvciBjcm9zc292ZXIgc2lnbmFsc1xuICBjb25zdCBjaGVja0ZvclNpZ25hbCA9IChcbiAgICBwcmV2RmFzdDogbnVtYmVyLFxuICAgIHByZXZTbG93OiBudW1iZXIsXG4gICAgY3VyckZhc3Q6IG51bWJlcixcbiAgICBjdXJyU2xvdzogbnVtYmVyLFxuICAgIGNhbmRsZTogYW55LFxuICAgIGRhdGE6IGFueVtdXG4gICkgPT4ge1xuICAgIGlmICghaXNOYU4ocHJldkZhc3QpICYmICFpc05hTihwcmV2U2xvdykgJiYgIWlzTmFOKGN1cnJGYXN0KSAmJiAhaXNOYU4oY3VyclNsb3cpKSB7XG4gICAgICBpZiAoc3RyYXRlZ3kgPT09ICdtYWNkX2Nyb3Nzb3ZlcicpIHtcbiAgICAgICAgY29uc3QgcHJldkhpc3RvZ3JhbSA9IHByZXZGYXN0IC0gcHJldlNsb3c7XG4gICAgICAgIGNvbnN0IGN1cnJIaXN0b2dyYW0gPSBjdXJyRmFzdCAtIGN1cnJTbG93O1xuICAgICAgICBcbiAgICAgICAgaWYgKHByZXZIaXN0b2dyYW0gPD0gMCAmJiBjdXJySGlzdG9ncmFtID4gMCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aW1lOiBjYW5kbGUudGltZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYmVsb3dCYXInLFxuICAgICAgICAgICAgY29sb3I6ICcjMjZhNjlhJyxcbiAgICAgICAgICAgIHNoYXBlOiAnYXJyb3dVcCcsXG4gICAgICAgICAgICB0ZXh0OiBmb3JtYXRTaWduYWxUZXh0KCdCdXknLCBjYW5kbGUuY2xvc2UsIGJhc2VUb2tlbiksXG4gICAgICAgICAgICBzaXplOiAyLFxuICAgICAgICAgICAgdmFsdWU6IGNhbmRsZS5sb3cgKiAwLjk5OSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByZXZIaXN0b2dyYW0gPj0gMCAmJiBjdXJySGlzdG9ncmFtIDwgMCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aW1lOiBjYW5kbGUudGltZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJvdmVCYXInLFxuICAgICAgICAgICAgY29sb3I6ICcjZWY1MzUwJyxcbiAgICAgICAgICAgIHNoYXBlOiAnYXJyb3dEb3duJyxcbiAgICAgICAgICAgIHRleHQ6IGZvcm1hdFNpZ25hbFRleHQoJ1NlbGwnLCBjYW5kbGUuY2xvc2UsIGJhc2VUb2tlbiksXG4gICAgICAgICAgICBzaXplOiAyLFxuICAgICAgICAgICAgdmFsdWU6IGNhbmRsZS5oaWdoICogMS4wMDEsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYXZnUHJpY2UgPSBkYXRhLnJlZHVjZSgoc3VtLCBkKSA9PiBzdW0gKyBkLmNsb3NlLCAwKSAvIGRhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCBwcmljZVJhbmdlID0gZGF0YS5yZWR1Y2UoKHJhbmdlLCBkKSA9PiBNYXRoLm1heChyYW5nZSwgTWF0aC5hYnMoZC5oaWdoIC0gZC5sb3cpKSwgMCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHByaWNlUmFuZ2UgKiAwLjc1O1xuXG4gICAgICAgIGlmIChwcmV2RmFzdCA8PSBwcmV2U2xvdyAmJiBjdXJyRmFzdCA+IGN1cnJTbG93KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IGNhbmRsZS50aW1lLFxuICAgICAgICAgICAgcG9zaXRpb246ICdiZWxvd0JhcicsXG4gICAgICAgICAgICBjb2xvcjogJyMyNmE2OWEnLFxuICAgICAgICAgICAgc2hhcGU6ICdhcnJvd1VwJyxcbiAgICAgICAgICAgIHRleHQ6IGZvcm1hdFNpZ25hbFRleHQoJ0J1eScsIGNhbmRsZS5jbG9zZSwgYmFzZVRva2VuKSxcbiAgICAgICAgICAgIHNpemU6IDIsXG4gICAgICAgICAgICB2YWx1ZTogTWF0aC5taW4oLi4uZGF0YS5zbGljZSgtMTApLm1hcChkID0+IGQubG93KSkgLSBvZmZzZXQsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2RmFzdCA+PSBwcmV2U2xvdyAmJiBjdXJyRmFzdCA8IGN1cnJTbG93KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IGNhbmRsZS50aW1lLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYm92ZUJhcicsXG4gICAgICAgICAgICBjb2xvcjogJyNlZjUzNTAnLFxuICAgICAgICAgICAgc2hhcGU6ICdhcnJvd0Rvd24nLFxuICAgICAgICAgICAgdGV4dDogZm9ybWF0U2lnbmFsVGV4dCgnU2VsbCcsIGNhbmRsZS5jbG9zZSwgYmFzZVRva2VuKSxcbiAgICAgICAgICAgIHNpemU6IDIsXG4gICAgICAgICAgICB2YWx1ZTogTWF0aC5tYXgoLi4uZGF0YS5zbGljZSgtMTApLm1hcChkID0+IGQuaGlnaCkpICsgb2Zmc2V0LFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gdG8gZ2V0IGhpc3RvZ3JhbSBzY2FsZSBmYWN0b3IgYmFzZWQgb24gdGltZWZyYW1lXG4gIGNvbnN0IGdldEhpc3RvZ3JhbVNjYWxlRmFjdG9yID0gKHRmOiBUaW1lZnJhbWUsIG1heEhpc3RvZ3JhbTogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICBpZiAobWF4SGlzdG9ncmFtID09PSAwKSByZXR1cm4gMTtcbiAgICBcbiAgICBzd2l0Y2ggKHRmKSB7XG4gICAgICBjYXNlICcxaCc6XG4gICAgICBjYXNlICc0aCc6XG4gICAgICBjYXNlICcxZCc6XG4gICAgICBjYXNlICcxdyc6XG4gICAgICAgIHJldHVybiAxMDAgLyBtYXhIaXN0b2dyYW07IC8vIE11Y2ggbGFyZ2VyIHNjYWxpbmcgZm9yIGhpZ2hlciB0aW1lZnJhbWVzXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gMjAgLyBtYXhIaXN0b2dyYW07IC8vIE9yaWdpbmFsIHNjYWxpbmcgZm9yIGxvd2VyIHRpbWVmcmFtZXNcbiAgICB9XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gdG8gYWRkIHN0cmF0ZWd5IGluZGljYXRvcnNcbiAgY29uc3QgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzID0gKGNoYXJ0OiBJQ2hhcnRBcGksIGRhdGE6IGFueVtdKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0FkZGluZyBzdHJhdGVneSBpbmRpY2F0b3JzJyk7XG4gICAgXG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGluZGljYXRvcnNcbiAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuZm9yRWFjaChzZXJpZXMgPT4gc2FmZWx5UmVtb3ZlU2VyaWVzKGNoYXJ0LCBzZXJpZXMpKTtcbiAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuY2xlYXIoKTtcbiAgICBcbiAgICBpZiAobWFya2VyU2VyaWVzUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNhZmVseVJlbW92ZVNlcmllcyhjaGFydCwgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQpO1xuICAgICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChzdHJhdGVneSA9PT0gJ25vbmUnKSByZXR1cm47XG5cbiAgICAvLyBFbnN1cmUgZGF0YSBpcyBzb3J0ZWQgYW5kIGRlZHVwbGljYXRlZCBieSB0aW1lXG4gICAgY29uc3QgdW5pcXVlRGF0YSA9IEFycmF5LmZyb20obmV3IE1hcChkYXRhLm1hcChpdGVtID0+IFtpdGVtLnRpbWUsIGl0ZW1dKSkudmFsdWVzKCkpXG4gICAgICAuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcblxuICAgIGNvbnN0IHByaWNlcyA9IHVuaXF1ZURhdGEubWFwKGQgPT4gZC5jbG9zZSk7XG4gICAgbGV0IGZhc3RMaW5lOiBudW1iZXJbXSA9IFtdO1xuICAgIGxldCBzbG93TGluZTogbnVtYmVyW10gPSBbXTtcbiAgICBsZXQgaGlzdG9ncmFtRGF0YTogbnVtYmVyW10gPSBbXTtcblxuICAgIC8vIENhbGN1bGF0ZSBpbmRpY2F0b3JzIGJhc2VkIG9uIHN0cmF0ZWd5IHR5cGVcbiAgICBpZiAoc3RyYXRlZ3kgPT09ICdtYWNkX2Nyb3Nzb3ZlcicpIHtcbiAgICAgIGNvbnN0IG1hY2REYXRhID0gY2FsY3VsYXRlTUFDRChwcmljZXMpO1xuICAgICAgZmFzdExpbmUgPSBtYWNkRGF0YS5tYWNkO1xuICAgICAgc2xvd0xpbmUgPSBtYWNkRGF0YS5zaWduYWw7XG4gICAgICBoaXN0b2dyYW1EYXRhID0gbWFjZERhdGEuaGlzdG9ncmFtO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICAgIGNhc2UgJ2VtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlU01BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RlbWFfY3Jvc3NvdmVyJzpcbiAgICAgICAgICBmYXN0TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCA3KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dvbGRlbl9jcm9zcyc6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCA1MCk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdodWxsX2Nyb3Nzb3Zlcic6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVITUEocHJpY2VzLCA5KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZUhNQShwcmljZXMsIDIxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZW1hXzVfMTMnOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgNSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAxMyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGluZGljYXRvciBsaW5lc1xuICAgIGNvbnN0IHNlbGVjdGVkU3RyYXRlZ3kgPSBnZXRTdHJhdGVneShzdHJhdGVneSk7XG4gICAgaWYgKCFzZWxlY3RlZFN0cmF0ZWd5KSByZXR1cm47XG5cbiAgICBpZiAoc3RyYXRlZ3kgPT09ICdtYWNkX2Nyb3Nzb3ZlcicpIHtcbiAgICAgIC8vIENyZWF0ZSBNQUNEIHNlcmllcyB3aXRoIHNlcGFyYXRlIHByaWNlIHNjYWxlXG4gICAgICBjb25zdCBtYWNkU2VyaWVzID0gY2hhcnQuYWRkTGluZVNlcmllcyh7XG4gICAgICAgIGNvbG9yOiAnIzI5NjJGRicsXG4gICAgICAgIGxpbmVXaWR0aDogMixcbiAgICAgICAgdGl0bGU6ICdNQUNEJyxcbiAgICAgICAgcHJpY2VGb3JtYXQ6IHtcbiAgICAgICAgICB0eXBlOiAncHJpY2UnLFxuICAgICAgICAgIHByZWNpc2lvbjogZ2V0RGVjaW1hbFBsYWNlcyhiYXNlVG9rZW4pLFxuICAgICAgICAgIG1pbk1vdmU6IGdldE1pbk1vdmUoYmFzZVRva2VuKSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJpY2VTY2FsZUlkOiAnb3ZlcmxheScsXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2lnbmFsU2VyaWVzID0gY2hhcnQuYWRkTGluZVNlcmllcyh7XG4gICAgICAgIGNvbG9yOiAnI0ZGNkI2QicsXG4gICAgICAgIGxpbmVXaWR0aDogMixcbiAgICAgICAgdGl0bGU6ICdTaWduYWwnLFxuICAgICAgICBwcmljZUZvcm1hdDoge1xuICAgICAgICAgIHR5cGU6ICdwcmljZScsXG4gICAgICAgICAgcHJlY2lzaW9uOiBnZXREZWNpbWFsUGxhY2VzKGJhc2VUb2tlbiksXG4gICAgICAgICAgbWluTW92ZTogZ2V0TWluTW92ZShiYXNlVG9rZW4pLFxuICAgICAgICB9LFxuICAgICAgICBwcmljZVNjYWxlSWQ6ICdvdmVybGF5JyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBoaXN0b2dyYW1TZXJpZXMgPSBjaGFydC5hZGRIaXN0b2dyYW1TZXJpZXMoe1xuICAgICAgICBjb2xvcjogJyMyNmE2OWEnLFxuICAgICAgICB0aXRsZTogJ0hpc3RvZ3JhbScsXG4gICAgICAgIHByaWNlRm9ybWF0OiB7XG4gICAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgICBwcmVjaXNpb246IGdldERlY2ltYWxQbGFjZXMoYmFzZVRva2VuKSxcbiAgICAgICAgICBtaW5Nb3ZlOiBnZXRNaW5Nb3ZlKGJhc2VUb2tlbiksXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlU2NhbGVJZDogJ292ZXJsYXknLFxuICAgICAgICBiYXNlOiAwLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIENvbmZpZ3VyZSB0aGUgcHJpY2Ugc2NhbGUgZm9yIE1BQ0RcbiAgICAgIGNvbnN0IG1hY2RTY2FsZSA9IGNoYXJ0LnByaWNlU2NhbGUoJ292ZXJsYXknKTtcbiAgICAgIGlmIChtYWNkU2NhbGUpIHtcbiAgICAgICAgbWFjZFNjYWxlLmFwcGx5T3B0aW9ucyh7XG4gICAgICAgICAgc2NhbGVNYXJnaW5zOiB7XG4gICAgICAgICAgICB0b3A6IDAuNyxcbiAgICAgICAgICAgIGJvdHRvbTogMC4xLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICBib3JkZXJWaXNpYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LnNldCgnTUFDRCcsIG1hY2RTZXJpZXMpO1xuICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LnNldCgnU2lnbmFsJywgc2lnbmFsU2VyaWVzKTtcbiAgICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5zZXQoJ0hpc3RvZ3JhbScsIGhpc3RvZ3JhbVNlcmllcyk7XG5cbiAgICAgIC8vIFNldCBkYXRhIGZvciBlYWNoIHNlcmllc1xuICAgICAgY29uc3QgbWFjZExpbmVEYXRhID0gZmFzdExpbmUubWFwKCh2YWx1ZSwgaWR4KSA9PiAoe1xuICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW2lkeF0udGltZSxcbiAgICAgICAgdmFsdWU6IGlzTmFOKHZhbHVlKSA/IG51bGwgOiB2YWx1ZVxuICAgICAgfSkpLmZpbHRlcihkID0+IGQudmFsdWUgIT09IG51bGwpO1xuXG4gICAgICBjb25zdCBzaWduYWxMaW5lRGF0YSA9IHNsb3dMaW5lLm1hcCgodmFsdWUsIGlkeCkgPT4gKHtcbiAgICAgICAgdGltZTogdW5pcXVlRGF0YVtpZHhdLnRpbWUsXG4gICAgICAgIHZhbHVlOiBpc05hTih2YWx1ZSkgPyBudWxsIDogdmFsdWVcbiAgICAgIH0pKS5maWx0ZXIoZCA9PiBkLnZhbHVlICE9PSBudWxsKTtcblxuICAgICAgLy8gU2NhbGUgaGlzdG9ncmFtIHZhbHVlcyB3aXRoIGR5bmFtaWMgc2NhbGluZ1xuICAgICAgY29uc3QgbWF4SGlzdG9ncmFtID0gTWF0aC5tYXgoLi4uaGlzdG9ncmFtRGF0YS5tYXAoTWF0aC5hYnMpKTtcbiAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gZ2V0SGlzdG9ncmFtU2NhbGVGYWN0b3IodGltZWZyYW1lLCBtYXhIaXN0b2dyYW0pO1xuXG4gICAgICBjb25zdCBoaXN0b2dyYW1TZXJpZXNEYXRhID0gaGlzdG9ncmFtRGF0YS5tYXAoKHZhbHVlLCBpZHgpID0+ICh7XG4gICAgICAgIHRpbWU6IHVuaXF1ZURhdGFbaWR4XS50aW1lLFxuICAgICAgICB2YWx1ZTogaXNOYU4odmFsdWUpID8gbnVsbCA6IHZhbHVlICogc2NhbGVGYWN0b3IsXG4gICAgICAgIGNvbG9yOiB2YWx1ZSA+PSAwID8gJyMyNmE2OWEnIDogJyNlZjUzNTAnXG4gICAgICB9KSkuZmlsdGVyKGQgPT4gZC52YWx1ZSAhPT0gbnVsbCk7XG5cbiAgICAgIG1hY2RTZXJpZXMuc2V0RGF0YShtYWNkTGluZURhdGEpO1xuICAgICAgc2lnbmFsU2VyaWVzLnNldERhdGEoc2lnbmFsTGluZURhdGEpO1xuICAgICAgaGlzdG9ncmFtU2VyaWVzLnNldERhdGEoaGlzdG9ncmFtU2VyaWVzRGF0YSk7XG5cbiAgICAgIC8vIEFsc28gdXBkYXRlIHRoZSByZWFsLXRpbWUgdXBkYXRlIHNjYWxpbmcgZmFjdG9yXG4gICAgICBpZiAobWFjZFNlcmllcyAmJiBzaWduYWxTZXJpZXMgJiYgaGlzdG9ncmFtU2VyaWVzKSB7XG4gICAgICAgIGNvbnN0IGxhc3RNQUNEID0ge1xuICAgICAgICAgIHRpbWU6IHVuaXF1ZURhdGFbdW5pcXVlRGF0YS5sZW5ndGggLSAxXS50aW1lLFxuICAgICAgICAgIHZhbHVlOiBmYXN0TGluZVtmYXN0TGluZS5sZW5ndGggLSAxXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGxhc3RTaWduYWwgPSB7XG4gICAgICAgICAgdGltZTogdW5pcXVlRGF0YVt1bmlxdWVEYXRhLmxlbmd0aCAtIDFdLnRpbWUsXG4gICAgICAgICAgdmFsdWU6IHNsb3dMaW5lW3Nsb3dMaW5lLmxlbmd0aCAtIDFdXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbGFzdEhpc3RvZ3JhbSA9IHtcbiAgICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW3VuaXF1ZURhdGEubGVuZ3RoIC0gMV0udGltZSxcbiAgICAgICAgICB2YWx1ZTogaGlzdG9ncmFtRGF0YVtoaXN0b2dyYW1EYXRhLmxlbmd0aCAtIDFdICogc2NhbGVGYWN0b3IsXG4gICAgICAgICAgY29sb3I6IGhpc3RvZ3JhbURhdGFbaGlzdG9ncmFtRGF0YS5sZW5ndGggLSAxXSA+PSAwID8gJyMyNmE2OWEnIDogJyNlZjUzNTAnXG4gICAgICAgIH07XG5cbiAgICAgICAgbWFjZFNlcmllcy51cGRhdGUobGFzdE1BQ0QpO1xuICAgICAgICBzaWduYWxTZXJpZXMudXBkYXRlKGxhc3RTaWduYWwpO1xuICAgICAgICBoaXN0b2dyYW1TZXJpZXMudXBkYXRlKGxhc3RIaXN0b2dyYW0pO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBvdGhlciBzdHJhdGVnaWVzXG4gICAgICBjb25zdCBjb2xvcnMgPSBbJyMyOTYyRkYnLCAnI0ZGNkI2QiddO1xuICAgICAgICBzZWxlY3RlZFN0cmF0ZWd5LmluZGljYXRvcnMuZm9yRWFjaCgoaW5kaWNhdG9yLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGxpbmVTZXJpZXMgPSBjaGFydC5hZGRMaW5lU2VyaWVzKHtcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvcnNbaW5kZXhdLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAyLFxuICAgICAgICAgICAgdGl0bGU6IGluZGljYXRvci5uYW1lLFxuICAgICAgICAgICAgcHJpY2VGb3JtYXQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgICAgICAgcHJlY2lzaW9uOiBnZXREZWNpbWFsUGxhY2VzKGJhc2VUb2tlbiksXG4gICAgICAgICAgICAgIG1pbk1vdmU6IGdldE1pbk1vdmUoYmFzZVRva2VuKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LnNldChpbmRpY2F0b3IubmFtZSwgbGluZVNlcmllcyk7XG5cbiAgICAgICAgY29uc3QgbGluZURhdGEgPSAoaW5kZXggPT09IDAgPyBmYXN0TGluZSA6IHNsb3dMaW5lKVxuICAgICAgICAgIC5tYXAoKHZhbHVlLCBpZHgpID0+ICh7XG4gICAgICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW2lkeF0udGltZSxcbiAgICAgICAgICAgIHZhbHVlOiBpc05hTih2YWx1ZSkgPyBudWxsIDogdmFsdWVcbiAgICAgICAgICB9KSlcbiAgICAgICAgICAuZmlsdGVyKGQgPT4gZC52YWx1ZSAhPT0gbnVsbClcbiAgICAgICAgICAuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcblxuICAgICAgICAgIGxpbmVTZXJpZXMuc2V0RGF0YShsaW5lRGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBtYXJrZXIgc2VyaWVzXG4gICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBjaGFydC5hZGRMaW5lU2VyaWVzKHtcbiAgICAgIGxhc3RWYWx1ZVZpc2libGU6IGZhbHNlLFxuICAgICAgcHJpY2VMaW5lVmlzaWJsZTogZmFsc2UsXG4gICAgICBjcm9zc2hhaXJNYXJrZXJWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGxpbmVXaWR0aDogMSBhcyBMaW5lV2lkdGgsXG4gICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLFxuICAgICAgcHJpY2VTY2FsZUlkOiAncmlnaHQnLCAvLyBBbHdheXMgdXNlIHJpZ2h0IHNjYWxlIGZvciBtYXJrZXJzXG4gICAgfSk7XG5cbiAgICAvLyBGaW5kIGFuZCBzZXQgc2lnbmFsc1xuICAgIGNvbnN0IHNpZ25hbHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHVuaXF1ZURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNpZ25hbCA9IGNoZWNrRm9yU2lnbmFsKFxuICAgICAgICBmYXN0TGluZVtpIC0gMV0sXG4gICAgICAgIHNsb3dMaW5lW2kgLSAxXSxcbiAgICAgICAgZmFzdExpbmVbaV0sXG4gICAgICAgIHNsb3dMaW5lW2ldLFxuICAgICAgICB1bmlxdWVEYXRhW2ldLFxuICAgICAgICB1bmlxdWVEYXRhLnNsaWNlKE1hdGgubWF4KDAsIGkgLSAxMCksIGkgKyAxKVxuICAgICAgKTtcbiAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgc2lnbmFscy5wdXNoKHNpZ25hbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNpZ25hbHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgc29ydGVkU2lnbmFscyA9IHNpZ25hbHMuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcbiAgICAgIG1hcmtlclNlcmllc1JlZi5jdXJyZW50LnNldE1hcmtlcnMoc29ydGVkU2lnbmFscyk7XG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXREYXRhKHNvcnRlZFNpZ25hbHMubWFwKHNpZ25hbCA9PiAoe1xuICAgICAgICB0aW1lOiBzaWduYWwudGltZSxcbiAgICAgICAgdmFsdWU6IHNpZ25hbC52YWx1ZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gTW9kaWZ5IHRoZSByZWFsLXRpbWUgc2lnbmFsIGNoZWNrXG4gIGNvbnN0IGNoZWNrUmVhbFRpbWVTaWduYWwgPSAoZGF0YTogYW55W10pID0+IHtcbiAgICBpZiAoIW1hcmtlclNlcmllc1JlZi5jdXJyZW50IHx8IGRhdGEubGVuZ3RoIDwgMikgcmV0dXJuO1xuXG4gICAgLy8gRW5zdXJlIGRhdGEgaXMgc29ydGVkIGFuZCBkZWR1cGxpY2F0ZWRcbiAgICBjb25zdCB1bmlxdWVEYXRhID0gQXJyYXkuZnJvbShuZXcgTWFwKGRhdGEubWFwKGl0ZW0gPT4gW2l0ZW0udGltZSwgaXRlbV0pKS52YWx1ZXMoKSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiAoYS50aW1lIGFzIG51bWJlcikgLSAoYi50aW1lIGFzIG51bWJlcikpO1xuXG4gICAgY29uc3QgcHJpY2VzID0gdW5pcXVlRGF0YS5tYXAoZCA9PiBkLmNsb3NlKTtcbiAgICBsZXQgZmFzdExpbmU6IG51bWJlcltdID0gW107XG4gICAgbGV0IHNsb3dMaW5lOiBudW1iZXJbXSA9IFtdO1xuICAgIGxldCBoaXN0b2dyYW1EYXRhOiBudW1iZXJbXSA9IFtdO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGluZGljYXRvcnMgYmFzZWQgb24gc3RyYXRlZ3kgdHlwZVxuICAgIGlmIChzdHJhdGVneSA9PT0gJ21hY2RfY3Jvc3NvdmVyJykge1xuICAgICAgY29uc3QgbWFjZERhdGEgPSBjYWxjdWxhdGVNQUNEKHByaWNlcyk7XG4gICAgICBmYXN0TGluZSA9IG1hY2REYXRhLm1hY2Q7XG4gICAgICBzbG93TGluZSA9IG1hY2REYXRhLnNpZ25hbDtcbiAgICAgIGhpc3RvZ3JhbURhdGEgPSBtYWNkRGF0YS5oaXN0b2dyYW07XG5cbiAgICAgIC8vIFVwZGF0ZSBNQUNEIHNlcmllcyBpZiB0aGV5IGV4aXN0XG4gICAgICBjb25zdCBtYWNkU2VyaWVzID0gaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LmdldCgnTUFDRCcpO1xuICAgICAgY29uc3Qgc2lnbmFsU2VyaWVzID0gaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LmdldCgnU2lnbmFsJyk7XG4gICAgICBjb25zdCBoaXN0b2dyYW1TZXJpZXMgPSBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuZ2V0KCdIaXN0b2dyYW0nKTtcblxuICAgICAgaWYgKG1hY2RTZXJpZXMgJiYgc2lnbmFsU2VyaWVzICYmIGhpc3RvZ3JhbVNlcmllcykge1xuICAgICAgICAvLyBTY2FsZSBoaXN0b2dyYW0gdmFsdWVzIHdpdGggZHluYW1pYyBzY2FsaW5nXG4gICAgICAgIGNvbnN0IG1heEhpc3RvZ3JhbSA9IE1hdGgubWF4KC4uLmhpc3RvZ3JhbURhdGEubWFwKE1hdGguYWJzKSk7XG4gICAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gZ2V0SGlzdG9ncmFtU2NhbGVGYWN0b3IodGltZWZyYW1lLCBtYXhIaXN0b2dyYW0pO1xuXG4gICAgICAgIGNvbnN0IGxhc3RNQUNEID0ge1xuICAgICAgICAgIHRpbWU6IHVuaXF1ZURhdGFbdW5pcXVlRGF0YS5sZW5ndGggLSAxXS50aW1lLFxuICAgICAgICAgIHZhbHVlOiBmYXN0TGluZVtmYXN0TGluZS5sZW5ndGggLSAxXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGxhc3RTaWduYWwgPSB7XG4gICAgICAgICAgdGltZTogdW5pcXVlRGF0YVt1bmlxdWVEYXRhLmxlbmd0aCAtIDFdLnRpbWUsXG4gICAgICAgICAgdmFsdWU6IHNsb3dMaW5lW3Nsb3dMaW5lLmxlbmd0aCAtIDFdXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbGFzdEhpc3RvZ3JhbSA9IHtcbiAgICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW3VuaXF1ZURhdGEubGVuZ3RoIC0gMV0udGltZSxcbiAgICAgICAgICB2YWx1ZTogaGlzdG9ncmFtRGF0YVtoaXN0b2dyYW1EYXRhLmxlbmd0aCAtIDFdICogc2NhbGVGYWN0b3IsXG4gICAgICAgICAgY29sb3I6IGhpc3RvZ3JhbURhdGFbaGlzdG9ncmFtRGF0YS5sZW5ndGggLSAxXSA+PSAwID8gJyMyNmE2OWEnIDogJyNlZjUzNTAnXG4gICAgICAgIH07XG5cbiAgICAgICAgbWFjZFNlcmllcy51cGRhdGUobGFzdE1BQ0QpO1xuICAgICAgICBzaWduYWxTZXJpZXMudXBkYXRlKGxhc3RTaWduYWwpO1xuICAgICAgICBoaXN0b2dyYW1TZXJpZXMudXBkYXRlKGxhc3RIaXN0b2dyYW0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICAgIGNhc2UgJ2VtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlU01BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RlbWFfY3Jvc3NvdmVyJzpcbiAgICAgICAgICBmYXN0TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCA3KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dvbGRlbl9jcm9zcyc6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCA1MCk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdodWxsX2Nyb3Nzb3Zlcic6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVITUEocHJpY2VzLCA5KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZUhNQShwcmljZXMsIDIxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZW1hXzVfMTMnOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgNSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAxMyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2lnbmFsID0gY2hlY2tGb3JTaWduYWwoXG4gICAgICBmYXN0TGluZVtmYXN0TGluZS5sZW5ndGggLSAyXSxcbiAgICAgIHNsb3dMaW5lW3Nsb3dMaW5lLmxlbmd0aCAtIDJdLFxuICAgICAgZmFzdExpbmVbZmFzdExpbmUubGVuZ3RoIC0gMV0sXG4gICAgICBzbG93TGluZVtzbG93TGluZS5sZW5ndGggLSAxXSxcbiAgICAgIHVuaXF1ZURhdGFbdW5pcXVlRGF0YS5sZW5ndGggLSAxXSxcbiAgICAgIHVuaXF1ZURhdGEuc2xpY2UoLTEwKVxuICAgICk7XG5cbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBjb25zdCBleGlzdGluZ01hcmtlcnMgPSBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5tYXJrZXJzKCkgfHwgW107XG4gICAgICBjb25zdCBuZXdNYXJrZXJzID0gWy4uLmV4aXN0aW5nTWFya2Vycywgc2lnbmFsXVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYEFkZGluZyByZWFsLXRpbWUgJHtzaWduYWwudGV4dH0gc2lnbmFsYCk7XG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXRNYXJrZXJzKG5ld01hcmtlcnMpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgbWFya2VyIHNlcmllcyBkYXRhXG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXREYXRhKG5ld01hcmtlcnMubWFwKG1hcmtlciA9PiAoe1xuICAgICAgICB0aW1lOiBtYXJrZXIudGltZSxcbiAgICAgICAgdmFsdWU6IG1hcmtlci52YWx1ZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gdG8gdXBkYXRlIHByaWNlIHN0YXRzXG4gIGNvbnN0IHVwZGF0ZVByaWNlU3RhdHMgPSB1c2VDYWxsYmFjaygoZGF0YTogYW55W10pID0+IHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAyKSByZXR1cm47XG5cbiAgICBjb25zdCBsYXN0MjRoID0gZGF0YS5zbGljZSgtMjQpOyAvLyBBc3N1bWluZyBob3VybHkgZGF0YVxuICAgIGNvbnN0IGN1cnJlbnRQcmljZSA9IGxhc3QyNGhbbGFzdDI0aC5sZW5ndGggLSAxXS5jbG9zZTtcbiAgICBjb25zdCBoaWdoMjRoID0gTWF0aC5tYXgoLi4ubGFzdDI0aC5tYXAoZCA9PiBkLmhpZ2gpKTtcbiAgICBjb25zdCBsb3cyNGggPSBNYXRoLm1pbiguLi5sYXN0MjRoLm1hcChkID0+IGQubG93KSk7XG4gICAgXG4gICAgLy8gVXNlIHRoZSBjaGFydCdzIHByaWNlIGZvcm1hdCBjb25maWd1cmF0aW9uXG4gICAgY29uc3QgcHJpY2VGb3JtYXQgPSBnZXRDaGFydFByaWNlRm9ybWF0KGJhc2VUb2tlbik7XG4gICAgXG4gICAgLy8gRm9ybWF0IHByaWNlcyB1c2luZyBjaGFydCdzIGZvcm1hdHRlclxuICAgIGNvbnN0IGZvcm1hdHRlZEN1cnJlbnRQcmljZSA9IHByaWNlRm9ybWF0LmZvcm1hdHRlcihjdXJyZW50UHJpY2UpO1xuICAgIGNvbnN0IGZvcm1hdHRlZEhpZ2ggPSBwcmljZUZvcm1hdC5mb3JtYXR0ZXIoaGlnaDI0aCk7XG4gICAgY29uc3QgZm9ybWF0dGVkTG93ID0gcHJpY2VGb3JtYXQuZm9ybWF0dGVyKGxvdzI0aCk7XG5cbiAgICAvLyBVcGRhdGUgc3RhdGUgd2l0aCBjaGFydC1mb3JtYXR0ZWQgdmFsdWVzXG4gICAgc2V0Q3VycmVudFByaWNlKGZvcm1hdHRlZEN1cnJlbnRQcmljZSk7XG4gICAgc2V0UHJpY2VTdGF0cyh7XG4gICAgICBjaGFuZ2UyNGg6IGZvcm1hdHRlZEN1cnJlbnRQcmljZSxcbiAgICAgIGhpZ2gyNGg6IGZvcm1hdHRlZEhpZ2gsXG4gICAgICBsb3cyNGg6IGZvcm1hdHRlZExvd1xuICAgIH0pO1xuICB9LCBbYmFzZVRva2VuXSk7XG5cbiAgLy8gRWZmZWN0IGZvciBzdHJhdGVneSBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNoYXJ0UmVmLmN1cnJlbnQgJiYgaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudC5sZW5ndGggPiAwKSB7XG4gICAgICBhZGRTdHJhdGVneUluZGljYXRvcnMoY2hhcnRSZWYuY3VycmVudCwgaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudCk7XG4gICAgfVxuICB9LCBbc3RyYXRlZ3ldKTtcblxuICAvLyBQcmljZSBmb3JtYXQgY29uZmlndXJhdGlvblxuICBjb25zdCBnZXRQcmljZUZvcm1hdCA9IHVzZUNhbGxiYWNrKChiYXNlVG9rZW46IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGlzQlRDUGFpciA9IGJhc2VUb2tlbiA9PT0gJ0JUQyc7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdwcmljZScgYXMgY29uc3QsXG4gICAgICBwcmVjaXNpb246IGlzQlRDUGFpciA/IDggOiAyLFxuICAgICAgbWluTW92ZTogaXNCVENQYWlyID8gMC4wMDAwMDAwMSA6IDAuMDEsXG4gICAgICBmb3JtYXQ6IChwcmljZTogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJpY2UgIT09ICdudW1iZXInIHx8IGlzTmFOKHByaWNlKSkge1xuICAgICAgICAgIHJldHVybiBpc0JUQ1BhaXIgPyAnMC4wMDAwMDAwMCcgOiAnMC4wMCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByaWNlLnRvRml4ZWQoaXNCVENQYWlyID8gOCA6IDIpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICAvLyBDcmVhdGUgc2VyaWVzIHdpdGggcHJpY2UgZm9ybWF0XG4gIGNvbnN0IGNyZWF0ZVNlcmllc1dpdGhGb3JtYXQgPSB1c2VDYWxsYmFjaygoXG4gICAgY2hhcnQ6IElDaGFydEFwaSxcbiAgICBvcHRpb25zOiBhbnksXG4gICAgcHJpY2VGb3JtYXQ6IGFueVxuICApID0+IHtcbiAgICByZXR1cm4gY2hhcnQuYWRkQ2FuZGxlc3RpY2tTZXJpZXMoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHByaWNlRm9ybWF0OiB7XG4gICAgICAgIHR5cGU6IHByaWNlRm9ybWF0LnR5cGUsXG4gICAgICAgIHByZWNpc2lvbjogcHJpY2VGb3JtYXQucHJlY2lzaW9uLFxuICAgICAgICBtaW5Nb3ZlOiBwcmljZUZvcm1hdC5taW5Nb3ZlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIC8vIE1haW4gY2hhcnQgaW5pdGlhbGl6YXRpb24gZWZmZWN0XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFjaGFydENvbnRhaW5lclJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBjb25zdCBjaGFydE9wdGlvbnM6IERlZXBQYXJ0aWFsPENoYXJ0T3B0aW9ucz4gPSB7XG4gICAgICBsYXlvdXQ6IHtcbiAgICAgICAgYmFja2dyb3VuZDogeyBjb2xvcjogJyMxRTIyMkQnIH0sXG4gICAgICAgIHRleHRDb2xvcjogJyNEREQnLFxuICAgICAgfSxcbiAgICAgIGdyaWQ6IHtcbiAgICAgICAgdmVydExpbmVzOiB7IGNvbG9yOiAnIzJCMkI0MycgfSxcbiAgICAgICAgaG9yekxpbmVzOiB7IGNvbG9yOiAnIzJCMkI0MycgfSxcbiAgICAgIH0sXG4gICAgICB0aW1lU2NhbGU6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjMkIyQjQzJyxcbiAgICAgICAgdGltZVZpc2libGU6IHRydWUsXG4gICAgICB9LFxuICAgICAgcmlnaHRQcmljZVNjYWxlOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzJCMkI0MycsXG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHNjYWxlTWFyZ2luczoge1xuICAgICAgICAgIHRvcDogMC4xLFxuICAgICAgICAgIGJvdHRvbTogMC40LFxuICAgICAgICB9LFxuICAgICAgICBhdXRvU2NhbGU6IHRydWUsXG4gICAgICAgIG1vZGU6IDAsIC8vIE5vcm1hbCBtb2RlIGluc3RlYWQgb2YgcGVyY2VudGFnZVxuICAgICAgICBhbGlnbkxhYmVsczogdHJ1ZSxcbiAgICAgICAgYm9yZGVyVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgZW50aXJlVGV4dE9ubHk6IHRydWUsXG4gICAgICAgIHRpY2tzVmlzaWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB3aWR0aDogY2hhcnRDb250YWluZXJSZWYuY3VycmVudC5jbGllbnRXaWR0aCxcbiAgICAgIGhlaWdodDogY2hhcnRDb250YWluZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQsXG4gICAgfTtcblxuICAgIGNvbnN0IGNoYXJ0ID0gY3JlYXRlQ2hhcnQoY2hhcnRDb250YWluZXJSZWYuY3VycmVudCwgY2hhcnRPcHRpb25zKTtcblxuICAgIC8vIENyZWF0ZSBjYW5kbGVzdGljayBzZXJpZXMgd2l0aCBwcmljZSBmb3JtYXRcbiAgICBjb25zdCBjYW5kbGVzdGlja1NlcmllcyA9IGNoYXJ0LmFkZENhbmRsZXN0aWNrU2VyaWVzKHtcbiAgICAgIHVwQ29sb3I6ICcjMjZhNjlhJyxcbiAgICAgIGRvd25Db2xvcjogJyNlZjUzNTAnLFxuICAgICAgYm9yZGVyVmlzaWJsZTogZmFsc2UsXG4gICAgICB3aWNrVXBDb2xvcjogJyMyNmE2OWEnLFxuICAgICAgd2lja0Rvd25Db2xvcjogJyNlZjUzNTAnLFxuICAgICAgcHJpY2VGb3JtYXQ6IGdldENoYXJ0UHJpY2VGb3JtYXQoYmFzZVRva2VuKSxcbiAgICB9KTtcblxuICAgIC8vIENvbmZpZ3VyZSB0aGUgcHJpY2Ugc2NhbGVcbiAgICBjb25zdCBwcmljZVNjYWxlID0gY2hhcnQucHJpY2VTY2FsZSgncmlnaHQnKTtcbiAgICBwcmljZVNjYWxlLmFwcGx5T3B0aW9ucyh7XG4gICAgICBzY2FsZU1hcmdpbnM6IHtcbiAgICAgICAgdG9wOiAwLjEsXG4gICAgICAgIGJvdHRvbTogMC40LFxuICAgICAgfSxcbiAgICAgIGF1dG9TY2FsZTogdHJ1ZSxcbiAgICAgIG1vZGU6IDAsIC8vIE5vcm1hbCBtb2RlIGluc3RlYWQgb2YgcGVyY2VudGFnZVxuICAgICAgYWxpZ25MYWJlbHM6IHRydWUsXG4gICAgICBib3JkZXJWaXNpYmxlOiB0cnVlLFxuICAgICAgZW50aXJlVGV4dE9ubHk6IHRydWUsXG4gICAgICB0aWNrc1Zpc2libGU6IHRydWUsXG4gICAgfSk7XG5cbiAgICAvLyBTZXQgdGhlIHByaWNlIGZvcm1hdHRlciBmb3IgdGhlIHNjYWxlXG4gICAgY2hhcnQuYXBwbHlPcHRpb25zKHtcbiAgICAgIGxvY2FsaXphdGlvbjoge1xuICAgICAgICBwcmljZUZvcm1hdHRlcjogKHByaWNlOiBudW1iZXIpID0+IGZvcm1hdFByaWNlKHByaWNlLCBiYXNlVG9rZW4pLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNhbmRsZXN0aWNrU2VyaWVzUmVmLmN1cnJlbnQgPSBjYW5kbGVzdGlja1NlcmllcztcbiAgICBjaGFydFJlZi5jdXJyZW50ID0gY2hhcnQ7XG5cbiAgICAvLyBMb2FkIGluaXRpYWwgZGF0YVxuICAgIGNvbnN0IGxvYWREYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldEhpc3RvcmljYWxEYXRhKHRpbWVmcmFtZSwgdG9rZW4sIGJhc2VUb2tlbik7XG4gICAgICAgIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQgPSBkYXRhO1xuICAgICAgICBcbiAgICAgICAgY2FuZGxlc3RpY2tTZXJpZXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgdXBkYXRlUHJpY2VTdGF0cyhkYXRhKTtcblxuICAgICAgICBpZiAoc3RyYXRlZ3kgIT09ICdub25lJykge1xuICAgICAgICAgIGFkZFN0cmF0ZWd5SW5kaWNhdG9ycyhjaGFydCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgZGF0YTonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxvYWREYXRhKCk7XG5cbiAgICAvLyBSZWFsLXRpbWUgdXBkYXRlc1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlVG9QcmljZSgoZGF0YSkgPT4ge1xuICAgICAgaWYgKCFjYW5kbGVzdGlja1Nlcmllc1JlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgIGNvbnN0IGludGVydmFsU2Vjb25kcyA9IGdldEludGVydmFsU2Vjb25kcyh0aW1lZnJhbWUpO1xuICAgICAgY29uc3QgY2FuZGxlVGltZXN0YW1wID0gTWF0aC5mbG9vcihkYXRhLnRpbWUgLyBpbnRlcnZhbFNlY29uZHMpICogaW50ZXJ2YWxTZWNvbmRzO1xuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgbmV3IGNhbmRsZVxuICAgICAgaWYgKCFjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQgfHwgY2FuZGxlVGltZXN0YW1wICE9PSBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQudGltZSkge1xuICAgICAgICAvLyBJZiB3ZSBoYWQgYSBwcmV2aW91cyBjYW5kbGUsIGFkZCBpdCB0byBoaXN0b3JpY2FsIGRhdGEgYW5kIGNoZWNrIGZvciBzaWduYWxzXG4gICAgICAgIGlmIChjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50ID0gWy4uLmhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQsIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudF07XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVXBkYXRlIHN0cmF0ZWdpZXMgd2l0aCB0aGUgbmV3IGhpc3RvcmljYWwgZGF0YVxuICAgICAgICAgIGlmIChzdHJhdGVneSAhPT0gJ25vbmUnICYmIGNoYXJ0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGFkZFN0cmF0ZWd5SW5kaWNhdG9ycyhjaGFydFJlZi5jdXJyZW50LCBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCBuZXcgY2FuZGxlXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCA9IHtcbiAgICAgICAgICB0aW1lOiBjYW5kbGVUaW1lc3RhbXAsXG4gICAgICAgICAgb3BlbjogZGF0YS52YWx1ZSxcbiAgICAgICAgICBoaWdoOiBkYXRhLnZhbHVlLFxuICAgICAgICAgIGxvdzogZGF0YS52YWx1ZSxcbiAgICAgICAgICBjbG9zZTogZGF0YS52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgY2FuZGxlXG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5oaWdoID0gTWF0aC5tYXgoY3VycmVudENhbmRsZVJlZi5jdXJyZW50LmhpZ2gsIGRhdGEudmFsdWUpO1xuICAgICAgICBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQubG93ID0gTWF0aC5taW4oY3VycmVudENhbmRsZVJlZi5jdXJyZW50LmxvdywgZGF0YS52YWx1ZSk7XG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5jbG9zZSA9IGRhdGEudmFsdWU7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlYWwtdGltZSBzaWduYWxzIHdpdGggY3VycmVudCBjYW5kbGVcbiAgICAgICAgaWYgKHN0cmF0ZWd5ICE9PSAnbm9uZScgJiYgY2hhcnRSZWYuY3VycmVudCAmJiBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IFsuLi5oaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50LCBjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnRdO1xuICAgICAgICAgIGNoZWNrUmVhbFRpbWVTaWduYWwodXBkYXRlZERhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgY2hhcnQgd2l0aCBjdXJyZW50IGNhbmRsZVxuICAgICAgY2FuZGxlc3RpY2tTZXJpZXNSZWYuY3VycmVudC51cGRhdGUoY3VycmVudENhbmRsZVJlZi5jdXJyZW50KTtcblxuICAgICAgLy8gVXBkYXRlIHByaWNlIHN0YXRzIHdpdGggdGhlIGxhdGVzdCBkYXRhXG4gICAgICBpZiAoaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHVwZGF0ZVByaWNlU3RhdHMoWy4uLmhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQsIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudF0pO1xuICAgICAgfVxuICAgIH0sIHRpbWVmcmFtZSwgdG9rZW4sIGJhc2VUb2tlbik7XG5cbiAgICAvLyBIYW5kbGUgd2luZG93IHJlc2l6ZVxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGlmIChjaGFydENvbnRhaW5lclJlZi5jdXJyZW50ICYmIGNoYXJ0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2hhcnRSZWYuY3VycmVudC5hcHBseU9wdGlvbnMoe1xuICAgICAgICAgIHdpZHRoOiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxuICAgICAgICAgIGhlaWdodDogY2hhcnRDb250YWluZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcblxuICAgIC8vIFJlbW92ZSBUcmFkaW5nVmlldyBsb2dvIGVsZW1lbnRzXG4gICAgY29uc3QgcmVtb3ZlVHJhZGluZ1ZpZXdMb2dvID0gKCkgPT4ge1xuICAgICAgY29uc3QgbG9nb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHYtYXR0ci1sb2dvJyk7XG4gICAgICBpZiAobG9nb0VsZW1lbnQpIHtcbiAgICAgICAgbG9nb0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhlYWRlckxvZ28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudHYtaGVhZGVyX19saW5rJyk7XG4gICAgICBpZiAoaGVhZGVyTG9nbykge1xuICAgICAgICBoZWFkZXJMb2dvLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBSdW4gbG9nbyByZW1vdmFsIGFmdGVyIGNoYXJ0IGlzIGNyZWF0ZWQgYW5kIGFmdGVyIGEgZGVsYXlcbiAgICByZW1vdmVUcmFkaW5nVmlld0xvZ28oKTtcbiAgICBjb25zdCBsb2dvVGltZW91dElkID0gc2V0VGltZW91dChyZW1vdmVUcmFkaW5nVmlld0xvZ28sIDEwMCk7XG5cbiAgICAvLyBGdW5jdGlvbiB0byBjcmVhdGUgaW5kaWNhdG9yIHNlcmllcyB3aXRoIGNvcnJlY3QgcHJpY2UgZm9ybWF0XG4gICAgY29uc3QgY3JlYXRlSW5kaWNhdG9yU2VyaWVzID0gKFxuICAgICAgdHlwZTogJ2xpbmUnIHwgJ2hpc3RvZ3JhbScsXG4gICAgICBvcHRpb25zOiBhbnlcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IHByaWNlQ29uZmlnID0gZ2V0UHJpY2VGb3JtYXQoYmFzZVRva2VuKTtcbiAgICAgIGNvbnN0IHNlcmllc09wdGlvbnMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHByaWNlRm9ybWF0OiB7XG4gICAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgICBwcmVjaXNpb246IHByaWNlQ29uZmlnLnByZWNpc2lvbixcbiAgICAgICAgICBtaW5Nb3ZlOiBwcmljZUNvbmZpZy5taW5Nb3ZlLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHR5cGUgPT09ICdsaW5lJyBcbiAgICAgICAgPyBjaGFydC5hZGRMaW5lU2VyaWVzKHNlcmllc09wdGlvbnMpXG4gICAgICAgIDogY2hhcnQuYWRkSGlzdG9ncmFtU2VyaWVzKHNlcmllc09wdGlvbnMpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgTUFDRCBzZXJpZXMgd2l0aCBwcm9wZXIgcHJpY2UgZm9ybWF0dGluZ1xuICAgIGlmIChzdHJhdGVneSA9PT0gJ21hY2RfY3Jvc3NvdmVyJykge1xuICAgICAgY29uc3QgbWFjZFNlcmllcyA9IGNyZWF0ZUluZGljYXRvclNlcmllcygnbGluZScsIHtcbiAgICAgICAgY29sb3I6ICcjMjk2MkZGJyxcbiAgICAgICAgbGluZVdpZHRoOiAyLFxuICAgICAgICB0aXRsZTogJ01BQ0QnLFxuICAgICAgICBwcmljZVNjYWxlSWQ6ICdvdmVybGF5JyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzaWduYWxTZXJpZXMgPSBjcmVhdGVJbmRpY2F0b3JTZXJpZXMoJ2xpbmUnLCB7XG4gICAgICAgIGNvbG9yOiAnI0ZGNkI2QicsXG4gICAgICAgIGxpbmVXaWR0aDogMixcbiAgICAgICAgdGl0bGU6ICdTaWduYWwnLFxuICAgICAgICBwcmljZVNjYWxlSWQ6ICdvdmVybGF5JyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBoaXN0b2dyYW1TZXJpZXMgPSBjcmVhdGVJbmRpY2F0b3JTZXJpZXMoJ2hpc3RvZ3JhbScsIHtcbiAgICAgICAgY29sb3I6ICcjMjZhNjlhJyxcbiAgICAgICAgdGl0bGU6ICdIaXN0b2dyYW0nLFxuICAgICAgICBwcmljZVNjYWxlSWQ6ICdvdmVybGF5JyxcbiAgICAgICAgYmFzZTogMCxcbiAgICAgIH0pO1xuXG4gICAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuc2V0KCdNQUNEJywgbWFjZFNlcmllcyk7XG4gICAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuc2V0KCdTaWduYWwnLCBzaWduYWxTZXJpZXMpO1xuICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LnNldCgnSGlzdG9ncmFtJywgaGlzdG9ncmFtU2VyaWVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgICBjbGVhclRpbWVvdXQobG9nb1RpbWVvdXRJZCk7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgY2hhcnQucmVtb3ZlKCk7XG4gICAgfTtcbiAgfSwgW3RpbWVmcmFtZV0pO1xuXG4gIC8vIEhhbmRsZSB0cmFkaW5nIHBhaXIgY2hhbmdlXG4gIGNvbnN0IGhhbmRsZVBhaXJDaGFuZ2UgPSB1c2VDYWxsYmFjaygobmV3VG9rZW46IHN0cmluZywgbmV3QmFzZVRva2VuOiBzdHJpbmcpID0+IHtcbiAgICBvblBhaXJDaGFuZ2UobmV3VG9rZW4sIG5ld0Jhc2VUb2tlbik7XG4gICAgXG4gICAgLy8gVXNlIHRoZSBzYW1lIHByaWNlIGZvcm1hdHRlciBhcyB0aGUgY2hhcnQgZm9yIGluaXRpYWwgdmFsdWVzXG4gICAgY29uc3QgcHJpY2VGb3JtYXR0ZXIgPSBnZXRDaGFydFByaWNlRm9ybWF0KG5ld0Jhc2VUb2tlbikuZm9ybWF0dGVyO1xuICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHByaWNlRm9ybWF0dGVyKDApO1xuICAgIFxuICAgIC8vIFVwZGF0ZSBpbml0aWFsIHByaWNlIHN0YXRlcyB3aXRoIGNoYXJ0LWZvcm1hdHRlZCB2YWx1ZXNcbiAgICBzZXRDdXJyZW50UHJpY2UoaW5pdGlhbFZhbHVlKTtcbiAgICBzZXRQcmljZVN0YXRzKHtcbiAgICAgIGNoYW5nZTI0aDogaW5pdGlhbFZhbHVlLFxuICAgICAgaGlnaDI0aDogaW5pdGlhbFZhbHVlLFxuICAgICAgbG93MjRoOiBpbml0aWFsVmFsdWVcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBjaGFydCA9IGNoYXJ0UmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgY2FuZGxlc3RpY2tTZXJpZXMgPSBjYW5kbGVzdGlja1Nlcmllc1JlZi5jdXJyZW50O1xuICAgIFxuICAgIGlmICghY2hhcnQgfHwgIWNhbmRsZXN0aWNrU2VyaWVzKSByZXR1cm47XG5cbiAgICBjb25zdCBsb2FkTmV3RGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFVwZGF0ZSBjYW5kbGVzdGljayBzZXJpZXMgcHJpY2UgZm9ybWF0XG4gICAgICAgIGNhbmRsZXN0aWNrU2VyaWVzLmFwcGx5T3B0aW9ucyh7XG4gICAgICAgICAgcHJpY2VGb3JtYXQ6IGdldENoYXJ0UHJpY2VGb3JtYXQobmV3QmFzZVRva2VuKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHByaWNlIHNjYWxlIGZvcm1hdFxuICAgICAgICBjaGFydC5hcHBseU9wdGlvbnMoe1xuICAgICAgICAgIGxvY2FsaXphdGlvbjoge1xuICAgICAgICAgICAgcHJpY2VGb3JtYXR0ZXI6IGdldENoYXJ0UHJpY2VGb3JtYXQobmV3QmFzZVRva2VuKS5mb3JtYXR0ZXIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGluZGljYXRvciBzZXJpZXMgcHJpY2UgZm9ybWF0c1xuICAgICAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuZm9yRWFjaChzZXJpZXMgPT4ge1xuICAgICAgICAgIHNlcmllcy5hcHBseU9wdGlvbnMoe1xuICAgICAgICAgICAgcHJpY2VGb3JtYXQ6IGdldENoYXJ0UHJpY2VGb3JtYXQobmV3QmFzZVRva2VuKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldEhpc3RvcmljYWxEYXRhKHRpbWVmcmFtZSwgbmV3VG9rZW4sIG5ld0Jhc2VUb2tlbik7XG4gICAgICAgIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQgPSBkYXRhO1xuICAgICAgICBcbiAgICAgICAgY2FuZGxlc3RpY2tTZXJpZXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgdXBkYXRlUHJpY2VTdGF0cyhkYXRhKTtcblxuICAgICAgICBpZiAoc3RyYXRlZ3kgIT09ICdub25lJykge1xuICAgICAgICAgIGFkZFN0cmF0ZWd5SW5kaWNhdG9ycyhjaGFydCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb3JjZSBjaGFydCB0byByZWNhbGN1bGF0ZSBwcmljZSBzY2FsZVxuICAgICAgICBjaGFydC50aW1lU2NhbGUoKS5maXRDb250ZW50KCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGRhdGE6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsb2FkTmV3RGF0YSgpO1xuICB9LCBbdGltZWZyYW1lLCBzdHJhdGVneSwgdXBkYXRlUHJpY2VTdGF0cywgb25QYWlyQ2hhbmdlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBVcGRhdGUgaW5pdGlhbCBzdGF0ZSBmb3JtYXQgYmFzZWQgb24gYmFzZSB0b2tlblxuICAgIHNldEN1cnJlbnRQcmljZShiYXNlVG9rZW4gPT09ICdCVEMnID8gJzAuMDAwMDAwMDAnIDogJzAuMDAnKTtcbiAgICBzZXRQcmljZVN0YXRzKHByZXYgPT4gKHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBoaWdoMjRoOiBiYXNlVG9rZW4gPT09ICdCVEMnID8gJzAuMDAwMDAwMDAnIDogJzAuMDAnLFxuICAgICAgbG93MjRoOiBiYXNlVG9rZW4gPT09ICdCVEMnID8gJzAuMDAwMDAwMDAnIDogJzAuMDAnXG4gICAgfSkpO1xuICB9LCBbYmFzZVRva2VuXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgdy1mdWxsIGgtZnVsbFwiPlxuICAgICAgPFRpY2tlckhlYWRlclxuICAgICAgICB0b2tlbj17dG9rZW59XG4gICAgICAgIGJhc2VUb2tlbj17YmFzZVRva2VufVxuICAgICAgICBleGNoYW5nZT17ZXhjaGFuZ2V9XG4gICAgICAgIGN1cnJlbnRQcmljZT17Y3VycmVudFByaWNlfVxuICAgICAgICBwcmljZVN0YXRzPXtwcmljZVN0YXRzfVxuICAgICAgICBvbkV4Y2hhbmdlQ2hhbmdlPXtzZXRTZWxlY3RlZEV4Y2hhbmdlfVxuICAgICAgICBvblBhaXJDaGFuZ2U9e2hhbmRsZVBhaXJDaGFuZ2V9XG4gICAgICAvPlxuICAgICAgPGRpdiByZWY9e2NoYXJ0Q29udGFpbmVyUmVmfSBjbGFzc05hbWU9XCJmbGV4LTFcIiAvPlxuICAgIDwvZGl2PlxuICApO1xufSAiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsImNyZWF0ZUNoYXJ0IiwiZ2V0SGlzdG9yaWNhbERhdGEiLCJzdWJzY3JpYmVUb1ByaWNlIiwiZ2V0U3RyYXRlZ3kiLCJjYWxjdWxhdGVFTUEiLCJjYWxjdWxhdGVTTUEiLCJjYWxjdWxhdGVURU1BIiwiY2FsY3VsYXRlSE1BIiwiY2FsY3VsYXRlTUFDRCIsIlRpY2tlckhlYWRlciIsImdldENoYXJ0UHJpY2VGb3JtYXQiLCJDYW5kbGVzdGlja0NoYXJ0IiwidGltZWZyYW1lIiwic3RyYXRlZ3kiLCJ0b2tlbiIsImJhc2VUb2tlbiIsImV4Y2hhbmdlIiwib25QYWlyQ2hhbmdlIiwic2VsZWN0ZWRFeGNoYW5nZSIsInNldFNlbGVjdGVkRXhjaGFuZ2UiLCJzZWxlY3RlZEJhc2VUb2tlbiIsInNldFNlbGVjdGVkQmFzZVRva2VuIiwiY3VycmVudFByaWNlIiwic2V0Q3VycmVudFByaWNlIiwiZm9ybWF0dGVyIiwicHJpY2VTdGF0cyIsInNldFByaWNlU3RhdHMiLCJpbml0aWFsVmFsdWUiLCJjaGFuZ2UyNGgiLCJoaWdoMjRoIiwibG93MjRoIiwiY2hhcnRDb250YWluZXJSZWYiLCJjaGFydFJlZiIsImNhbmRsZXN0aWNrU2VyaWVzUmVmIiwiaW5kaWNhdG9yU2VyaWVzUmVmcyIsIk1hcCIsIm1hcmtlclNlcmllc1JlZiIsImhpc3RvcmljYWxEYXRhUmVmIiwiY3VycmVudENhbmRsZVJlZiIsImxhc3RTaWduYWxSZWYiLCJnZXRJbnRlcnZhbFNlY29uZHMiLCJ0ZiIsInNhZmVseVJlbW92ZVNlcmllcyIsImNoYXJ0Iiwic2VyaWVzIiwicmVtb3ZlU2VyaWVzIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImdldERlY2ltYWxQbGFjZXMiLCJnZXRNaW5Nb3ZlIiwidG9VcHBlckNhc2UiLCJmb3JtYXRQcmljZSIsInByaWNlIiwidG9GaXhlZCIsImZvcm1hdFNpZ25hbFRleHQiLCJ0eXBlIiwiY2hlY2tGb3JTaWduYWwiLCJwcmV2RmFzdCIsInByZXZTbG93IiwiY3VyckZhc3QiLCJjdXJyU2xvdyIsImNhbmRsZSIsImRhdGEiLCJpc05hTiIsInByZXZIaXN0b2dyYW0iLCJjdXJySGlzdG9ncmFtIiwidGltZSIsInBvc2l0aW9uIiwiY29sb3IiLCJzaGFwZSIsInRleHQiLCJjbG9zZSIsInNpemUiLCJ2YWx1ZSIsImxvdyIsImhpZ2giLCJhdmdQcmljZSIsInJlZHVjZSIsInN1bSIsImQiLCJsZW5ndGgiLCJwcmljZVJhbmdlIiwicmFuZ2UiLCJNYXRoIiwibWF4IiwiYWJzIiwib2Zmc2V0IiwibWluIiwic2xpY2UiLCJtYXAiLCJnZXRIaXN0b2dyYW1TY2FsZUZhY3RvciIsIm1heEhpc3RvZ3JhbSIsImFkZFN0cmF0ZWd5SW5kaWNhdG9ycyIsImxvZyIsImN1cnJlbnQiLCJmb3JFYWNoIiwiY2xlYXIiLCJ1bmlxdWVEYXRhIiwiQXJyYXkiLCJmcm9tIiwiaXRlbSIsInZhbHVlcyIsInNvcnQiLCJhIiwiYiIsInByaWNlcyIsImZhc3RMaW5lIiwic2xvd0xpbmUiLCJoaXN0b2dyYW1EYXRhIiwibWFjZERhdGEiLCJtYWNkIiwic2lnbmFsIiwiaGlzdG9ncmFtIiwic2VsZWN0ZWRTdHJhdGVneSIsIm1hY2RTZXJpZXMiLCJhZGRMaW5lU2VyaWVzIiwibGluZVdpZHRoIiwidGl0bGUiLCJwcmljZUZvcm1hdCIsInByZWNpc2lvbiIsIm1pbk1vdmUiLCJwcmljZVNjYWxlSWQiLCJzaWduYWxTZXJpZXMiLCJoaXN0b2dyYW1TZXJpZXMiLCJhZGRIaXN0b2dyYW1TZXJpZXMiLCJiYXNlIiwibWFjZFNjYWxlIiwicHJpY2VTY2FsZSIsImFwcGx5T3B0aW9ucyIsInNjYWxlTWFyZ2lucyIsInRvcCIsImJvdHRvbSIsInZpc2libGUiLCJib3JkZXJWaXNpYmxlIiwic2V0IiwibWFjZExpbmVEYXRhIiwiaWR4IiwiZmlsdGVyIiwic2lnbmFsTGluZURhdGEiLCJzY2FsZUZhY3RvciIsImhpc3RvZ3JhbVNlcmllc0RhdGEiLCJzZXREYXRhIiwibGFzdE1BQ0QiLCJsYXN0U2lnbmFsIiwibGFzdEhpc3RvZ3JhbSIsInVwZGF0ZSIsImNvbG9ycyIsImluZGljYXRvcnMiLCJpbmRpY2F0b3IiLCJpbmRleCIsImxpbmVTZXJpZXMiLCJuYW1lIiwibGluZURhdGEiLCJsYXN0VmFsdWVWaXNpYmxlIiwicHJpY2VMaW5lVmlzaWJsZSIsImNyb3NzaGFpck1hcmtlclZpc2libGUiLCJsaW5lVmlzaWJsZSIsInNpZ25hbHMiLCJpIiwicHVzaCIsInNvcnRlZFNpZ25hbHMiLCJzZXRNYXJrZXJzIiwiY2hlY2tSZWFsVGltZVNpZ25hbCIsImdldCIsImV4aXN0aW5nTWFya2VycyIsIm1hcmtlcnMiLCJuZXdNYXJrZXJzIiwibWFya2VyIiwidXBkYXRlUHJpY2VTdGF0cyIsImxhc3QyNGgiLCJmb3JtYXR0ZWRDdXJyZW50UHJpY2UiLCJmb3JtYXR0ZWRIaWdoIiwiZm9ybWF0dGVkTG93IiwiZ2V0UHJpY2VGb3JtYXQiLCJpc0JUQ1BhaXIiLCJmb3JtYXQiLCJjcmVhdGVTZXJpZXNXaXRoRm9ybWF0Iiwib3B0aW9ucyIsImFkZENhbmRsZXN0aWNrU2VyaWVzIiwiY2hhcnRPcHRpb25zIiwibGF5b3V0IiwiYmFja2dyb3VuZCIsInRleHRDb2xvciIsImdyaWQiLCJ2ZXJ0TGluZXMiLCJob3J6TGluZXMiLCJ0aW1lU2NhbGUiLCJib3JkZXJDb2xvciIsInRpbWVWaXNpYmxlIiwicmlnaHRQcmljZVNjYWxlIiwiYXV0b1NjYWxlIiwibW9kZSIsImFsaWduTGFiZWxzIiwiZW50aXJlVGV4dE9ubHkiLCJ0aWNrc1Zpc2libGUiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiY2FuZGxlc3RpY2tTZXJpZXMiLCJ1cENvbG9yIiwiZG93bkNvbG9yIiwid2lja1VwQ29sb3IiLCJ3aWNrRG93bkNvbG9yIiwibG9jYWxpemF0aW9uIiwicHJpY2VGb3JtYXR0ZXIiLCJsb2FkRGF0YSIsInVuc3Vic2NyaWJlIiwiaW50ZXJ2YWxTZWNvbmRzIiwiY2FuZGxlVGltZXN0YW1wIiwiZmxvb3IiLCJvcGVuIiwidXBkYXRlZERhdGEiLCJoYW5kbGVSZXNpemUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlVHJhZGluZ1ZpZXdMb2dvIiwibG9nb0VsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicmVtb3ZlIiwiaGVhZGVyTG9nbyIsInF1ZXJ5U2VsZWN0b3IiLCJsb2dvVGltZW91dElkIiwic2V0VGltZW91dCIsImNyZWF0ZUluZGljYXRvclNlcmllcyIsInByaWNlQ29uZmlnIiwic2VyaWVzT3B0aW9ucyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGVQYWlyQ2hhbmdlIiwibmV3VG9rZW4iLCJuZXdCYXNlVG9rZW4iLCJsb2FkTmV3RGF0YSIsImZpdENvbnRlbnQiLCJwcmV2IiwiZGl2IiwiY2xhc3NOYW1lIiwib25FeGNoYW5nZUNoYW5nZSIsInJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ })

});