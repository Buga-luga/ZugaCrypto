"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy } = param;\n    _s();\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const formatTime = (time)=>{\n            let date;\n            if (typeof time === \"number\") {\n                date = new Date(time * 1000);\n            } else if (typeof time === \"string\") {\n                date = new Date(time);\n            } else {\n                // Handle BusinessDay format\n                const { year, month, day } = time;\n                date = new Date(year, month - 1, day);\n            }\n            const formatOptions = {\n                month: \"short\",\n                day: \"numeric\",\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n                hour12: false\n            };\n            // For daily timeframes, don't show time\n            if (timeframe === \"1d\") {\n                delete formatOptions.hour;\n                delete formatOptions.minute;\n            }\n            return date.toLocaleString(\"en-US\", formatOptions);\n        };\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\",\n                fontSize: 12,\n                fontFamily: \"Roboto, sans-serif\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            crosshair: {\n                mode: 1,\n                vertLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                },\n                horzLine: {\n                    width: 1,\n                    color: \"#758696\",\n                    style: 3\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true,\n                secondsVisible: false\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\"\n            },\n            localization: {\n                timeFormatter: formatTime\n            },\n            watermark: {\n                visible: false\n            }\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, {\n            ...chartOptions,\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        });\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\"\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        // Fetch historical data\n        const loadData = async ()=>{\n            try {\n                const historicalData = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe);\n                candlestickSeries.setData(historicalData.map((d)=>({\n                        time: d.time,\n                        open: d.open,\n                        high: d.high,\n                        low: d.low,\n                        close: d.close\n                    })));\n                // Apply strategy analysis if a strategy is selected\n                if (strategy !== \"none\") {\n                    const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n                    if (selectedStrategy) {\n                        // Clear previous indicators\n                        indicatorSeriesRefs.current.forEach((series)=>{\n                            chart.removeSeries(series);\n                        });\n                        indicatorSeriesRefs.current.clear();\n                        // Run strategy analysis\n                        const signal = selectedStrategy.analyze(historicalData);\n                        if (signal) {\n                            console.log(\"Strategy Signal:\", signal);\n                        }\n                        // Add strategy indicators if any\n                        if (selectedStrategy.indicators) {\n                            selectedStrategy.indicators.forEach((indicator)=>{\n                                const lineSeries = chart.addLineSeries({\n                                    color: \"#2962FF\",\n                                    lineWidth: 2\n                                });\n                                indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n                                if (indicator.data.length > 0) {\n                                    lineSeries.setData(indicator.data);\n                                }\n                            });\n                        }\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error loading historical data:\", error);\n            }\n        };\n        loadData();\n        chartRef.current = chart;\n        // Subscribe to real-time price updates with improved candle formation\n        let currentCandle = {\n            open: 0,\n            high: -Infinity,\n            low: Infinity,\n            close: 0,\n            time: 0\n        };\n        const getIntervalSeconds = (tf)=>{\n            switch(tf){\n                case \"1m\":\n                    return 60;\n                case \"5m\":\n                    return 300;\n                case \"15m\":\n                    return 900;\n                case \"30m\":\n                    return 1800;\n                case \"1h\":\n                    return 3600;\n                case \"4h\":\n                    return 14400;\n                case \"1d\":\n                    return 86400;\n                default:\n                    return 60;\n            }\n        };\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (candlestickSeriesRef.current) {\n                const intervalSeconds = getIntervalSeconds(timeframe);\n                const currentTimestamp = Math.floor(Date.now() / 1000);\n                const candleTimestamp = Math.floor(currentTimestamp / intervalSeconds) * intervalSeconds;\n                // If this is a new candle\n                if (candleTimestamp !== currentCandle.time) {\n                    // If there was a previous candle, finalize it\n                    if (currentCandle.time !== 0) {\n                        candlestickSeriesRef.current.update({\n                            time: currentCandle.time,\n                            open: currentCandle.open,\n                            high: currentCandle.high,\n                            low: currentCandle.low,\n                            close: currentCandle.close\n                        });\n                    }\n                    // Start a new candle\n                    currentCandle = {\n                        time: candleTimestamp,\n                        open: data.value,\n                        high: data.value,\n                        low: data.value,\n                        close: data.value\n                    };\n                } else {\n                    // Update existing candle\n                    if (data.value > currentCandle.high) currentCandle.high = data.value;\n                    if (data.value < currentCandle.low) currentCandle.low = data.value;\n                    currentCandle.close = data.value;\n                }\n                // Update the chart with the current candle state\n                candlestickSeriesRef.current.update({\n                    time: currentCandle.time,\n                    open: currentCandle.open,\n                    high: currentCandle.high,\n                    low: currentCandle.low,\n                    close: currentCandle.close\n                });\n            }\n        }, timeframe);\n        // Remove TradingView logo elements if they exist\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created\n        removeTradingViewLogo();\n        // Also run after a short delay to catch dynamically added elements\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            if (chartRef.current) {\n                chartRef.current.remove();\n            }\n        };\n    }, [\n        timeframe,\n        strategy\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: chartContainerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"e:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 268,\n        columnNumber: 10\n    }, this);\n}\n_s(CandlestickChart, \"/qnqdChQ3ddRTOsuezPPRaB8wtU=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts":
/*!**********************************************!*\
  !*** ./src/services/api/cryptoCompareAPI.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentPrice: function() { return /* binding */ getCurrentPrice; },\n/* harmony export */   getHistoricalData: function() { return /* binding */ getHistoricalData; },\n/* harmony export */   subscribeToPrice: function() { return /* binding */ subscribeToPrice; },\n/* harmony export */   subscribeToTrades: function() { return /* binding */ subscribeToTrades; }\n/* harmony export */ });\nconst TIMEFRAME_CONFIG = {\n    \"1m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 60\n    },\n    \"5m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 300\n    },\n    \"15m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 900\n    },\n    \"30m\": {\n        endpoint: \"histominute\",\n        limit: 1440,\n        interval: 1800\n    },\n    \"1h\": {\n        endpoint: \"histohour\",\n        limit: 720,\n        interval: 3600\n    },\n    \"4h\": {\n        endpoint: \"histohour\",\n        limit: 720,\n        interval: 14400\n    },\n    \"1d\": {\n        endpoint: \"histoday\",\n        limit: 365,\n        interval: 86400\n    },\n    \"1w\": {\n        endpoint: \"histoday\",\n        limit: 365,\n        interval: 604800\n    }\n};\nlet socket = null;\nlet priceUpdateCallbacks = [];\nlet tradeUpdateCallbacks = [];\nlet pendingSubscription = false;\nlet lastPrice = 0;\nlet reconnectAttempts = 0;\nlet currentTimeframe = \"1m\";\nconst MAX_RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 2000;\n// Fallback to REST API when WebSocket fails\nasync function fetchPriceUpdate() {\n    try {\n        const response = await fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD\");\n        const data = await response.json();\n        const price = data.USD;\n        const timestamp = Math.floor(Date.now() / 1000);\n        if (price && !isNaN(price) && price !== lastPrice) {\n            lastPrice = price;\n            priceUpdateCallbacks.forEach((callback)=>callback({\n                    time: timestamp,\n                    value: price\n                }));\n        }\n    } catch (error) {\n        console.error(\"Error fetching price via REST:\", error);\n    }\n}\nfunction sendSubscription(ws) {\n    const subscribeMsg = {\n        \"action\": \"SubAdd\",\n        \"subs\": [\n            \"5~CCCAGG~BTC~USD\",\n            \"2~Coinbase~BTC~USD\",\n            \"11~BTC~USD\" // Direct price feed\n        ]\n    };\n    try {\n        ws.send(JSON.stringify(subscribeMsg));\n        console.log(\"Subscribed to price feeds\");\n        pendingSubscription = false;\n    } catch (error) {\n        console.error(\"Error sending subscription:\", error);\n        pendingSubscription = true;\n    }\n}\n// Update the WebSocket message handler to respect timeframes\nfunction handlePriceUpdate(price, timestamp, timeframe) {\n    const config = TIMEFRAME_CONFIG[timeframe];\n    const interval = config.interval;\n    // Align timestamp to the current timeframe interval\n    const alignedTimestamp = Math.floor(timestamp / interval) * interval;\n    if (price && !isNaN(price) && price !== lastPrice) {\n        lastPrice = price;\n        priceUpdateCallbacks.forEach((callback)=>callback({\n                time: alignedTimestamp,\n                value: price\n            }));\n        if (tradeUpdateCallbacks.length > 0) {\n            tradeUpdateCallbacks.forEach((callback)=>callback({\n                    time: alignedTimestamp,\n                    price: price,\n                    volume24h: 0 // Volume will be updated separately\n                }));\n        }\n    }\n}\nfunction connectWebSocket() {\n    if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.OPEN) {\n        if (pendingSubscription) {\n            sendSubscription(socket);\n        }\n        return;\n    }\n    // Don't try to reconnect too many times\n    if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {\n        console.log(\"Max reconnection attempts reached, falling back to REST API\");\n        // Set up periodic REST API polling as fallback\n        const pollInterval = setInterval(fetchPriceUpdate, 5000);\n        return;\n    }\n    try {\n        // Close existing socket if any\n        if (socket) {\n            socket.close();\n            socket = null;\n        }\n        socket = new WebSocket(\"wss://streamer.cryptocompare.com/v2\");\n        socket.onopen = ()=>{\n            console.log(\"Connected to CryptoCompare WebSocket\");\n            reconnectAttempts = 0; // Reset attempts on successful connection\n            if (socket && socket.readyState === WebSocket.OPEN) {\n                sendSubscription(socket);\n            } else {\n                pendingSubscription = true;\n            }\n        };\n        socket.onmessage = (event)=>{\n            try {\n                const data = JSON.parse(event.data);\n                if (data.TYPE === \"20\" && data.MESSAGE === \"SUBSCRIBECOMPLETE\") {\n                    console.log(\"Successfully subscribed to feeds\");\n                    return;\n                }\n                const timestamp = Math.floor(Date.now() / 1000);\n                let price = null;\n                if (data.TYPE === \"11\" || data.TYPE === \"2\" || data.TYPE === \"5\") {\n                    price = parseFloat(data.PRICE);\n                    if (price && !isNaN(price)) {\n                        handlePriceUpdate(price, timestamp, currentTimeframe);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error processing message:\", error);\n            }\n        };\n        socket.onerror = (error)=>{\n            console.error(\"WebSocket error:\", error);\n            reconnectAttempts++;\n            reconnect();\n        };\n        socket.onclose = (event)=>{\n            console.log(\"WebSocket closed with code \".concat(event.code, \", reason: \").concat(event.reason));\n            reconnect();\n        };\n        // Ping every 15 seconds to keep connection alive\n        const pingInterval = setInterval(()=>{\n            if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.OPEN) {\n                try {\n                    socket.send(JSON.stringify({\n                        \"action\": \"PING\"\n                    }));\n                } catch (error) {\n                    console.error(\"Error sending ping:\", error);\n                    reconnect();\n                }\n            }\n        }, 15000);\n        // Clean up ping interval on socket close\n        socket.addEventListener(\"close\", ()=>clearInterval(pingInterval));\n    } catch (error) {\n        console.error(\"Error creating WebSocket:\", error);\n        reconnectAttempts++;\n        setTimeout(connectWebSocket, RECONNECT_DELAY);\n    }\n}\nfunction reconnect() {\n    if (socket) {\n        try {\n            socket.close();\n        } catch (error) {\n            console.error(\"Error closing socket:\", error);\n        }\n        socket = null;\n    }\n    setTimeout(connectWebSocket, RECONNECT_DELAY * Math.min(reconnectAttempts, 5));\n}\nfunction subscribeToPrice(callback) {\n    let timeframe = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"1m\";\n    currentTimeframe = timeframe;\n    priceUpdateCallbacks.push(callback);\n    // Immediately get current price via REST API\n    getCurrentPrice().then((price)=>{\n        const timestamp = Math.floor(Date.now() / 1000);\n        callback({\n            time: timestamp,\n            value: price\n        });\n    }).catch(console.error);\n    // If this is the first subscriber, connect to WebSocket\n    if (priceUpdateCallbacks.length === 1) {\n        connectWebSocket();\n    }\n    return ()=>{\n        priceUpdateCallbacks = priceUpdateCallbacks.filter((cb)=>cb !== callback);\n        if (priceUpdateCallbacks.length === 0 && tradeUpdateCallbacks.length === 0 && socket) {\n            socket.close();\n            socket = null;\n        }\n    };\n}\nfunction subscribeToTrades(callback) {\n    tradeUpdateCallbacks.push(callback);\n    // If this is the first subscriber, connect to WebSocket\n    if (tradeUpdateCallbacks.length === 1 && priceUpdateCallbacks.length === 0) {\n        connectWebSocket();\n    }\n    return ()=>{\n        tradeUpdateCallbacks = tradeUpdateCallbacks.filter((cb)=>cb !== callback);\n        if (priceUpdateCallbacks.length === 0 && tradeUpdateCallbacks.length === 0 && socket) {\n            socket.close();\n            socket = null;\n        }\n    };\n}\nasync function getCurrentPrice() {\n    try {\n        const response = await fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD\");\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data.USD;\n    } catch (error) {\n        console.error(\"Error fetching price:\", error);\n        throw error;\n    }\n}\nasync function getHistoricalData() {\n    let timeframe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"1m\";\n    try {\n        var _data_Data;\n        const config = TIMEFRAME_CONFIG[timeframe];\n        const endTime = Math.floor(Date.now() / 1000);\n        // Calculate the appropriate aggregate parameter based on timeframe\n        let aggregate = 1;\n        if (config.endpoint === \"histominute\") {\n            aggregate = config.interval / 60;\n        } else if (config.endpoint === \"histohour\") {\n            aggregate = config.interval / 3600;\n        } else if (config.endpoint === \"histoday\") {\n            aggregate = config.interval / 86400;\n        }\n        const url = \"https://min-api.cryptocompare.com/data/v2/\".concat(config.endpoint, \"?fsym=BTC&tsym=USD&limit=\").concat(config.limit, \"&toTs=\").concat(endTime, \"&aggregate=\").concat(aggregate);\n        console.log(\"Fetching historical data for \".concat(timeframe, \" timeframe...\"));\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (!((_data_Data = data.Data) === null || _data_Data === void 0 ? void 0 : _data_Data.Data)) {\n            throw new Error(\"Invalid data format received from API\");\n        }\n        return data.Data.Data;\n    } catch (error) {\n        console.error(\"Error fetching historical data:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/strategies/index.ts":
/*!******************************************!*\
  !*** ./src/services/strategies/index.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStrategies: function() { return /* binding */ getStrategies; },\n/* harmony export */   getStrategy: function() { return /* binding */ getStrategy; },\n/* harmony export */   registerStrategy: function() { return /* binding */ registerStrategy; },\n/* harmony export */   strategyRegistry: function() { return /* binding */ strategyRegistry; }\n/* harmony export */ });\n/* harmony import */ var _sma_crossover__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sma-crossover */ \"(app-pages-browser)/./src/services/strategies/sma-crossover.ts\");\nclass StrategyRegistry {\n    registerStrategy(strategy) {\n        this.strategies.set(strategy.id, strategy);\n    }\n    getStrategies() {\n        return Array.from(this.strategies.values());\n    }\n    getStrategy(id) {\n        return this.strategies.get(id);\n    }\n    constructor(){\n        this.strategies = new Map();\n    }\n}\n// Create a singleton instance\nconst strategyRegistry = new StrategyRegistry();\n// Export the registration function\nconst registerStrategy = (strategy)=>strategyRegistry.registerStrategy(strategy);\n// Export the getter functions\nconst getStrategies = ()=>strategyRegistry.getStrategies();\nconst getStrategy = (id)=>strategyRegistry.getStrategy(id);\n// Import all strategy implementations\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9zdHJhdGVnaWVzL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBbUJBLE1BQU1BO0lBT0pDLGlCQUFpQkMsUUFBa0IsRUFBRTtRQUNuQyxJQUFJLENBQUNDLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDRixTQUFTRyxFQUFFLEVBQUVIO0lBQ25DO0lBRUFJLGdCQUE0QjtRQUMxQixPQUFPQyxNQUFNQyxJQUFJLENBQUMsSUFBSSxDQUFDTCxVQUFVLENBQUNNLE1BQU07SUFDMUM7SUFFQUMsWUFBWUwsRUFBVSxFQUF3QjtRQUM1QyxPQUFPLElBQUksQ0FBQ0YsVUFBVSxDQUFDUSxHQUFHLENBQUNOO0lBQzdCO0lBZEFPLGFBQWM7UUFDWixJQUFJLENBQUNULFVBQVUsR0FBRyxJQUFJVTtJQUN4QjtBQWFGO0FBRUEsOEJBQThCO0FBQ3ZCLE1BQU1DLG1CQUFtQixJQUFJZCxtQkFBbUI7QUFFdkQsbUNBQW1DO0FBQzVCLE1BQU1DLG1CQUFtQixDQUFDQyxXQUF1QlksaUJBQWlCYixnQkFBZ0IsQ0FBQ0MsVUFBVTtBQUVwRyw4QkFBOEI7QUFDdkIsTUFBTUksZ0JBQWdCLElBQU1RLGlCQUFpQlIsYUFBYSxHQUFHO0FBQzdELE1BQU1JLGNBQWMsQ0FBQ0wsS0FBZVMsaUJBQWlCSixXQUFXLENBQUNMLElBQUk7QUFLNUUsc0NBQXNDO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3NlcnZpY2VzL3N0cmF0ZWdpZXMvaW5kZXgudHM/YzA0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW5kbGVzdGlja0RhdGEgfSBmcm9tICdsaWdodHdlaWdodC1jaGFydHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdHJhdGVneVNpZ25hbCB7XHJcbiAgdHlwZTogJ2J1eScgfCAnc2VsbCc7XHJcbiAgcHJpY2U6IG51bWJlcjtcclxuICB0aW1lOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyYXRlZ3kge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgYW5hbHl6ZTogKGRhdGE6IENhbmRsZXN0aWNrRGF0YVtdKSA9PiBTdHJhdGVneVNpZ25hbCB8IG51bGw7XHJcbiAgaW5kaWNhdG9ycz86IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGRhdGE6IGFueVtdOyAgLy8gV2UnbGwgdHlwZSB0aGlzIG1vcmUgc3BlY2lmaWNhbGx5IHdoZW4gaW1wbGVtZW50aW5nIGluZGljYXRvcnNcclxuICB9W107XHJcbn1cclxuXHJcbmNsYXNzIFN0cmF0ZWd5UmVnaXN0cnkge1xyXG4gIHByaXZhdGUgc3RyYXRlZ2llczogTWFwPHN0cmluZywgU3RyYXRlZ3k+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc3RyYXRlZ2llcyA9IG5ldyBNYXAoKTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyU3RyYXRlZ3koc3RyYXRlZ3k6IFN0cmF0ZWd5KSB7XHJcbiAgICB0aGlzLnN0cmF0ZWdpZXMuc2V0KHN0cmF0ZWd5LmlkLCBzdHJhdGVneSk7XHJcbiAgfVxyXG5cclxuICBnZXRTdHJhdGVnaWVzKCk6IFN0cmF0ZWd5W10ge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5zdHJhdGVnaWVzLnZhbHVlcygpKTtcclxuICB9XHJcblxyXG4gIGdldFN0cmF0ZWd5KGlkOiBzdHJpbmcpOiBTdHJhdGVneSB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5zdHJhdGVnaWVzLmdldChpZCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBDcmVhdGUgYSBzaW5nbGV0b24gaW5zdGFuY2VcclxuZXhwb3J0IGNvbnN0IHN0cmF0ZWd5UmVnaXN0cnkgPSBuZXcgU3RyYXRlZ3lSZWdpc3RyeSgpO1xyXG5cclxuLy8gRXhwb3J0IHRoZSByZWdpc3RyYXRpb24gZnVuY3Rpb25cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyU3RyYXRlZ3kgPSAoc3RyYXRlZ3k6IFN0cmF0ZWd5KSA9PiBzdHJhdGVneVJlZ2lzdHJ5LnJlZ2lzdGVyU3RyYXRlZ3koc3RyYXRlZ3kpO1xyXG5cclxuLy8gRXhwb3J0IHRoZSBnZXR0ZXIgZnVuY3Rpb25zXHJcbmV4cG9ydCBjb25zdCBnZXRTdHJhdGVnaWVzID0gKCkgPT4gc3RyYXRlZ3lSZWdpc3RyeS5nZXRTdHJhdGVnaWVzKCk7XHJcbmV4cG9ydCBjb25zdCBnZXRTdHJhdGVneSA9IChpZDogc3RyaW5nKSA9PiBzdHJhdGVneVJlZ2lzdHJ5LmdldFN0cmF0ZWd5KGlkKTtcclxuXHJcbi8vIEV4cG9ydCBzdHJhdGVneSBJRHMgYXMgYSB0eXBlXHJcbmV4cG9ydCB0eXBlIFN0cmF0ZWd5SWQgPSAnbm9uZScgfCAnc21hX2Nyb3Nzb3ZlcicgfCAncnNpX2RpdmVyZ2VuY2UnIHwgJ21hY2QnO1xyXG5cclxuLy8gSW1wb3J0IGFsbCBzdHJhdGVneSBpbXBsZW1lbnRhdGlvbnNcclxuaW1wb3J0ICcuL3NtYS1jcm9zc292ZXInOyAiXSwibmFtZXMiOlsiU3RyYXRlZ3lSZWdpc3RyeSIsInJlZ2lzdGVyU3RyYXRlZ3kiLCJzdHJhdGVneSIsInN0cmF0ZWdpZXMiLCJzZXQiLCJpZCIsImdldFN0cmF0ZWdpZXMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJnZXRTdHJhdGVneSIsImdldCIsImNvbnN0cnVjdG9yIiwiTWFwIiwic3RyYXRlZ3lSZWdpc3RyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/strategies/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/strategies/sma-crossover.ts":
/*!**************************************************!*\
  !*** ./src/services/strategies/sma-crossover.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n\nfunction calculateSMA(data, period) {\n    const sma = [];\n    for(let i = 0; i < data.length; i++){\n        if (i < period - 1) {\n            sma.push(NaN);\n            continue;\n        }\n        let sum = 0;\n        for(let j = 0; j < period; j++){\n            sum += data[i - j];\n        }\n        sma.push(sum / period);\n    }\n    return sma;\n}\nconst smaCrossoverStrategy = {\n    id: \"sma_crossover\",\n    name: \"SMA Crossover\",\n    description: \"Generates signals based on crossovers between short-term and long-term SMAs\",\n    analyze: (data)=>{\n        const prices = data.map((d)=>d.close);\n        const shortPeriod = 10;\n        const longPeriod = 20;\n        const shortSMA = calculateSMA(prices, shortPeriod);\n        const longSMA = calculateSMA(prices, longPeriod);\n        // Need at least two points to compare crossover\n        if (shortSMA.length < 2 || longSMA.length < 2) return null;\n        const last = shortSMA.length - 1;\n        const prev = last - 1;\n        // Check for crossover\n        const isCrossUp = shortSMA[prev] <= longSMA[prev] && shortSMA[last] > longSMA[last];\n        const isCrossDown = shortSMA[prev] >= longSMA[prev] && shortSMA[last] < longSMA[last];\n        if (isCrossUp) {\n            return {\n                type: \"buy\",\n                price: data[last].close,\n                time: data[last].time\n            };\n        }\n        if (isCrossDown) {\n            return {\n                type: \"sell\",\n                price: data[last].close,\n                time: data[last].time\n            };\n        }\n        return null;\n    },\n    indicators: [\n        {\n            name: \"Short SMA\",\n            data: []\n        },\n        {\n            name: \"Long SMA\",\n            data: []\n        }\n    ]\n};\n// Register the strategy\n(0,_index__WEBPACK_IMPORTED_MODULE_0__.registerStrategy)(smaCrossoverStrategy);\n/* harmony default export */ __webpack_exports__[\"default\"] = (smaCrossoverStrategy);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9zdHJhdGVnaWVzL3NtYS1jcm9zc292ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFDcUU7QUFFckUsU0FBU0MsYUFBYUMsSUFBYyxFQUFFQyxNQUFjO0lBQ2xELE1BQU1DLE1BQWdCLEVBQUU7SUFDeEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILEtBQUtJLE1BQU0sRUFBRUQsSUFBSztRQUNwQyxJQUFJQSxJQUFJRixTQUFTLEdBQUc7WUFDbEJDLElBQUlHLElBQUksQ0FBQ0M7WUFDVDtRQUNGO1FBRUEsSUFBSUMsTUFBTTtRQUNWLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxRQUFRTyxJQUFLO1lBQy9CRCxPQUFPUCxJQUFJLENBQUNHLElBQUlLLEVBQUU7UUFDcEI7UUFDQU4sSUFBSUcsSUFBSSxDQUFDRSxNQUFNTjtJQUNqQjtJQUNBLE9BQU9DO0FBQ1Q7QUFFQSxNQUFNTyx1QkFBaUM7SUFDckNDLElBQUk7SUFDSkMsTUFBTTtJQUNOQyxhQUFhO0lBQ2JDLFNBQVMsQ0FBQ2I7UUFDUixNQUFNYyxTQUFTZCxLQUFLZSxHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLEtBQUs7UUFDcEMsTUFBTUMsY0FBYztRQUNwQixNQUFNQyxhQUFhO1FBRW5CLE1BQU1DLFdBQVdyQixhQUFhZSxRQUFRSTtRQUN0QyxNQUFNRyxVQUFVdEIsYUFBYWUsUUFBUUs7UUFFckMsZ0RBQWdEO1FBQ2hELElBQUlDLFNBQVNoQixNQUFNLEdBQUcsS0FBS2lCLFFBQVFqQixNQUFNLEdBQUcsR0FBRyxPQUFPO1FBRXRELE1BQU1rQixPQUFPRixTQUFTaEIsTUFBTSxHQUFHO1FBQy9CLE1BQU1tQixPQUFPRCxPQUFPO1FBRXBCLHNCQUFzQjtRQUN0QixNQUFNRSxZQUFZSixRQUFRLENBQUNHLEtBQUssSUFBSUYsT0FBTyxDQUFDRSxLQUFLLElBQUlILFFBQVEsQ0FBQ0UsS0FBSyxHQUFHRCxPQUFPLENBQUNDLEtBQUs7UUFDbkYsTUFBTUcsY0FBY0wsUUFBUSxDQUFDRyxLQUFLLElBQUlGLE9BQU8sQ0FBQ0UsS0FBSyxJQUFJSCxRQUFRLENBQUNFLEtBQUssR0FBR0QsT0FBTyxDQUFDQyxLQUFLO1FBRXJGLElBQUlFLFdBQVc7WUFDYixPQUFPO2dCQUNMRSxNQUFNO2dCQUNOQyxPQUFPM0IsSUFBSSxDQUFDc0IsS0FBSyxDQUFDTCxLQUFLO2dCQUN2QlcsTUFBTTVCLElBQUksQ0FBQ3NCLEtBQUssQ0FBQ00sSUFBSTtZQUN2QjtRQUNGO1FBRUEsSUFBSUgsYUFBYTtZQUNmLE9BQU87Z0JBQ0xDLE1BQU07Z0JBQ05DLE9BQU8zQixJQUFJLENBQUNzQixLQUFLLENBQUNMLEtBQUs7Z0JBQ3ZCVyxNQUFNNUIsSUFBSSxDQUFDc0IsS0FBSyxDQUFDTSxJQUFJO1lBQ3ZCO1FBQ0Y7UUFFQSxPQUFPO0lBQ1Q7SUFDQUMsWUFBWTtRQUNWO1lBQ0VsQixNQUFNO1lBQ05YLE1BQU0sRUFBRTtRQUNWO1FBQ0E7WUFDRVcsTUFBTTtZQUNOWCxNQUFNLEVBQUU7UUFDVjtLQUNEO0FBQ0g7QUFFQSx3QkFBd0I7QUFDeEJGLHdEQUFnQkEsQ0FBQ1c7QUFFakIsK0RBQWVBLG9CQUFvQkEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvc2VydmljZXMvc3RyYXRlZ2llcy9zbWEtY3Jvc3NvdmVyLnRzPzQ3YTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FuZGxlc3RpY2tEYXRhIH0gZnJvbSAnbGlnaHR3ZWlnaHQtY2hhcnRzJztcclxuaW1wb3J0IHsgU3RyYXRlZ3ksIFN0cmF0ZWd5U2lnbmFsLCByZWdpc3RlclN0cmF0ZWd5IH0gZnJvbSAnLi9pbmRleCc7XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVTTUEoZGF0YTogbnVtYmVyW10sIHBlcmlvZDogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gIGNvbnN0IHNtYTogbnVtYmVyW10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChpIDwgcGVyaW9kIC0gMSkge1xyXG4gICAgICBzbWEucHVzaChOYU4pO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc3VtID0gMDtcclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGVyaW9kOyBqKyspIHtcclxuICAgICAgc3VtICs9IGRhdGFbaSAtIGpdO1xyXG4gICAgfVxyXG4gICAgc21hLnB1c2goc3VtIC8gcGVyaW9kKTtcclxuICB9XHJcbiAgcmV0dXJuIHNtYTtcclxufVxyXG5cclxuY29uc3Qgc21hQ3Jvc3NvdmVyU3RyYXRlZ3k6IFN0cmF0ZWd5ID0ge1xyXG4gIGlkOiAnc21hX2Nyb3Nzb3ZlcicsXHJcbiAgbmFtZTogJ1NNQSBDcm9zc292ZXInLFxyXG4gIGRlc2NyaXB0aW9uOiAnR2VuZXJhdGVzIHNpZ25hbHMgYmFzZWQgb24gY3Jvc3NvdmVycyBiZXR3ZWVuIHNob3J0LXRlcm0gYW5kIGxvbmctdGVybSBTTUFzJyxcclxuICBhbmFseXplOiAoZGF0YTogQ2FuZGxlc3RpY2tEYXRhW10pID0+IHtcclxuICAgIGNvbnN0IHByaWNlcyA9IGRhdGEubWFwKGQgPT4gZC5jbG9zZSk7XHJcbiAgICBjb25zdCBzaG9ydFBlcmlvZCA9IDEwO1xyXG4gICAgY29uc3QgbG9uZ1BlcmlvZCA9IDIwO1xyXG5cclxuICAgIGNvbnN0IHNob3J0U01BID0gY2FsY3VsYXRlU01BKHByaWNlcywgc2hvcnRQZXJpb2QpO1xyXG4gICAgY29uc3QgbG9uZ1NNQSA9IGNhbGN1bGF0ZVNNQShwcmljZXMsIGxvbmdQZXJpb2QpO1xyXG5cclxuICAgIC8vIE5lZWQgYXQgbGVhc3QgdHdvIHBvaW50cyB0byBjb21wYXJlIGNyb3Nzb3ZlclxyXG4gICAgaWYgKHNob3J0U01BLmxlbmd0aCA8IDIgfHwgbG9uZ1NNQS5sZW5ndGggPCAyKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBjb25zdCBsYXN0ID0gc2hvcnRTTUEubGVuZ3RoIC0gMTtcclxuICAgIGNvbnN0IHByZXYgPSBsYXN0IC0gMTtcclxuXHJcbiAgICAvLyBDaGVjayBmb3IgY3Jvc3NvdmVyXHJcbiAgICBjb25zdCBpc0Nyb3NzVXAgPSBzaG9ydFNNQVtwcmV2XSA8PSBsb25nU01BW3ByZXZdICYmIHNob3J0U01BW2xhc3RdID4gbG9uZ1NNQVtsYXN0XTtcclxuICAgIGNvbnN0IGlzQ3Jvc3NEb3duID0gc2hvcnRTTUFbcHJldl0gPj0gbG9uZ1NNQVtwcmV2XSAmJiBzaG9ydFNNQVtsYXN0XSA8IGxvbmdTTUFbbGFzdF07XHJcblxyXG4gICAgaWYgKGlzQ3Jvc3NVcCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6ICdidXknLFxyXG4gICAgICAgIHByaWNlOiBkYXRhW2xhc3RdLmNsb3NlLFxyXG4gICAgICAgIHRpbWU6IGRhdGFbbGFzdF0udGltZSBhcyBudW1iZXIsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzQ3Jvc3NEb3duKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogJ3NlbGwnLFxyXG4gICAgICAgIHByaWNlOiBkYXRhW2xhc3RdLmNsb3NlLFxyXG4gICAgICAgIHRpbWU6IGRhdGFbbGFzdF0udGltZSBhcyBudW1iZXIsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfSxcclxuICBpbmRpY2F0b3JzOiBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdTaG9ydCBTTUEnLFxyXG4gICAgICBkYXRhOiBbXSwgLy8gVGhpcyB3aWxsIGJlIHBvcHVsYXRlZCB3aGVuIHRoZSBzdHJhdGVneSBydW5zXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnTG9uZyBTTUEnLFxyXG4gICAgICBkYXRhOiBbXSwgLy8gVGhpcyB3aWxsIGJlIHBvcHVsYXRlZCB3aGVuIHRoZSBzdHJhdGVneSBydW5zXHJcbiAgICB9LFxyXG4gIF0sXHJcbn07XHJcblxyXG4vLyBSZWdpc3RlciB0aGUgc3RyYXRlZ3lcclxucmVnaXN0ZXJTdHJhdGVneShzbWFDcm9zc292ZXJTdHJhdGVneSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzbWFDcm9zc292ZXJTdHJhdGVneTsgIl0sIm5hbWVzIjpbInJlZ2lzdGVyU3RyYXRlZ3kiLCJjYWxjdWxhdGVTTUEiLCJkYXRhIiwicGVyaW9kIiwic21hIiwiaSIsImxlbmd0aCIsInB1c2giLCJOYU4iLCJzdW0iLCJqIiwic21hQ3Jvc3NvdmVyU3RyYXRlZ3kiLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImFuYWx5emUiLCJwcmljZXMiLCJtYXAiLCJkIiwiY2xvc2UiLCJzaG9ydFBlcmlvZCIsImxvbmdQZXJpb2QiLCJzaG9ydFNNQSIsImxvbmdTTUEiLCJsYXN0IiwicHJldiIsImlzQ3Jvc3NVcCIsImlzQ3Jvc3NEb3duIiwidHlwZSIsInByaWNlIiwidGltZSIsImluZGljYXRvcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/strategies/sma-crossover.ts\n"));

/***/ })

});