"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* harmony import */ var _services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/moving-averages */ \"(app-pages-browser)/./src/services/strategies/moving-averages.ts\");\n/* harmony import */ var _TickerHeader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TickerHeader */ \"(app-pages-browser)/./src/components/Chart/TickerHeader.tsx\");\n/* harmony import */ var _utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/priceFormat */ \"(app-pages-browser)/./src/utils/priceFormat.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy, token = \"BTC\", baseToken = \"USDT\", exchange = \"CryptoCompare\", onPairChange = ()=>{} } = param;\n    _s();\n    const [selectedExchange, setSelectedExchange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(exchange);\n    const [selectedBaseToken, setSelectedBaseToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(baseToken);\n    const [currentPrice, setCurrentPrice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>getDefaultPrice(baseToken));\n    const [priceStats, setPriceStats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>({\n            change24h: getDefaultPrice(baseToken),\n            high24h: getDefaultPrice(baseToken),\n            low24h: getDefaultPrice(baseToken)\n        }));\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSignalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Function to get interval in seconds\n    const getIntervalSeconds = (tf)=>{\n        switch(tf){\n            case \"1m\":\n                return 60;\n            case \"5m\":\n                return 300;\n            case \"15m\":\n                return 900;\n            case \"30m\":\n                return 1800;\n            case \"1h\":\n                return 3600;\n            case \"4h\":\n                return 14400;\n            case \"1d\":\n                return 86400;\n            default:\n                return 60;\n        }\n    };\n    // Function to safely remove a series\n    const safelyRemoveSeries = (chart, series)=>{\n        try {\n            if (series && chart) {\n                chart.removeSeries(series);\n            }\n        } catch (e) {\n            console.error(\"Error removing series:\", e);\n        }\n    };\n    // Function to get appropriate decimal places based on base token\n    const getDecimalPlaces = (baseToken)=>{\n        return baseToken === \"BTC\" ? 8 : 2;\n    };\n    // Function to get appropriate min move based on base token\n    const getMinMove = (baseToken)=>{\n        return baseToken.toUpperCase() === \"BTC\" ? 0.00000001 : 0.01;\n    };\n    // Function to format price based on base token\n    const formatPrice = (price, baseToken)=>{\n        if (baseToken === \"BTC\") {\n            return price.toFixed(8); // Show 8 decimal places for BTC pairs\n        }\n        return price.toFixed(2); // Show 2 decimal places for other pairs\n    };\n    // Function to format signal text\n    const formatSignalText = (type, price, baseToken)=>{\n        return \"\".concat(type, \" \").concat(formatPrice(price, baseToken));\n    };\n    // Function to check for crossover signals\n    const checkForSignal = (prevFast, prevSlow, currFast, currSlow, candle, data)=>{\n        if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n            if (strategy === \"macd_crossover\") {\n                const prevHistogram = prevFast - prevSlow;\n                const currHistogram = currFast - currSlow;\n                if (prevHistogram <= 0 && currHistogram > 0) {\n                    return {\n                        time: candle.time,\n                        position: \"belowBar\",\n                        color: \"#26a69a\",\n                        shape: \"arrowUp\",\n                        text: formatSignalText(\"Buy\", candle.close, baseToken),\n                        size: 2,\n                        value: candle.low * 0.999\n                    };\n                } else if (prevHistogram >= 0 && currHistogram < 0) {\n                    return {\n                        time: candle.time,\n                        position: \"aboveBar\",\n                        color: \"#ef5350\",\n                        shape: \"arrowDown\",\n                        text: formatSignalText(\"Sell\", candle.close, baseToken),\n                        size: 2,\n                        value: candle.high * 1.001\n                    };\n                }\n            } else {\n                const avgPrice = data.reduce((sum, d)=>sum + d.close, 0) / data.length;\n                const priceRange = data.reduce((range, d)=>Math.max(range, Math.abs(d.high - d.low)), 0);\n                const offset = priceRange * 0.75;\n                if (prevFast <= prevSlow && currFast > currSlow) {\n                    return {\n                        time: candle.time,\n                        position: \"belowBar\",\n                        color: \"#26a69a\",\n                        shape: \"arrowUp\",\n                        text: formatSignalText(\"Buy\", candle.close, baseToken),\n                        size: 2,\n                        value: Math.min(...data.slice(-10).map((d)=>d.low)) - offset\n                    };\n                } else if (prevFast >= prevSlow && currFast < currSlow) {\n                    return {\n                        time: candle.time,\n                        position: \"aboveBar\",\n                        color: \"#ef5350\",\n                        shape: \"arrowDown\",\n                        text: formatSignalText(\"Sell\", candle.close, baseToken),\n                        size: 2,\n                        value: Math.max(...data.slice(-10).map((d)=>d.high)) + offset\n                    };\n                }\n            }\n        }\n        return null;\n    };\n    // Function to get histogram scale factor based on timeframe\n    const getHistogramScaleFactor = (tf, maxHistogram)=>{\n        if (maxHistogram === 0) return 1;\n        switch(tf){\n            case \"1h\":\n            case \"4h\":\n            case \"1d\":\n            case \"1w\":\n                return 100 / maxHistogram; // Much larger scaling for higher timeframes\n            default:\n                return 20 / maxHistogram; // Original scaling for lower timeframes\n        }\n    };\n    // Function to add strategy indicators\n    const addStrategyIndicators = (chart, data)=>{\n        console.log(\"Adding strategy indicators\");\n        // Clear any existing indicators\n        indicatorSeriesRefs.current.forEach((series)=>safelyRemoveSeries(chart, series));\n        indicatorSeriesRefs.current.clear();\n        if (markerSeriesRef.current) {\n            safelyRemoveSeries(chart, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n        }\n        if (strategy === \"none\") return;\n        // Ensure data is sorted and deduplicated by time\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        let histogramData = [];\n        // Calculate indicators based on strategy type\n        if (strategy === \"macd_crossover\") {\n            const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n            fastLine = macdData.macd;\n            slowLine = macdData.signal;\n            histogramData = macdData.histogram;\n        } else {\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n        }\n        // Add indicator lines\n        const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n        if (!selectedStrategy) return;\n        if (strategy === \"macd_crossover\") {\n            // Create MACD series with separate price scale\n            const macdSeries = chart.addLineSeries({\n                color: \"#2962FF\",\n                lineWidth: 2,\n                title: \"MACD\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\"\n            });\n            const signalSeries = chart.addLineSeries({\n                color: \"#FF6B6B\",\n                lineWidth: 2,\n                title: \"Signal\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\"\n            });\n            const histogramSeries = chart.addHistogramSeries({\n                color: \"#26a69a\",\n                title: \"Histogram\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\",\n                base: 0\n            });\n            // Configure the price scale for MACD\n            const macdScale = chart.priceScale(\"overlay\");\n            if (macdScale) {\n                macdScale.applyOptions({\n                    scaleMargins: {\n                        top: 0.7,\n                        bottom: 0.1\n                    },\n                    visible: true,\n                    borderVisible: true\n                });\n            }\n            indicatorSeriesRefs.current.set(\"MACD\", macdSeries);\n            indicatorSeriesRefs.current.set(\"Signal\", signalSeries);\n            indicatorSeriesRefs.current.set(\"Histogram\", histogramSeries);\n            // Set data for each series\n            const macdLineData = fastLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            const signalLineData = slowLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            // Scale histogram values with dynamic scaling\n            const maxHistogram = Math.max(...histogramData.map(Math.abs));\n            const scaleFactor = getHistogramScaleFactor(timeframe, maxHistogram);\n            const histogramSeriesData = histogramData.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value * scaleFactor,\n                    color: value >= 0 ? \"#26a69a\" : \"#ef5350\"\n                })).filter((d)=>d.value !== null);\n            macdSeries.setData(macdLineData);\n            signalSeries.setData(signalLineData);\n            histogramSeries.setData(histogramSeriesData);\n            // Also update the real-time update scaling factor\n            if (macdSeries && signalSeries && histogramSeries) {\n                const lastMACD = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: fastLine[fastLine.length - 1]\n                };\n                const lastSignal = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: slowLine[slowLine.length - 1]\n                };\n                const lastHistogram = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: histogramData[histogramData.length - 1] * scaleFactor,\n                    color: histogramData[histogramData.length - 1] >= 0 ? \"#26a69a\" : \"#ef5350\"\n                };\n                macdSeries.update(lastMACD);\n                signalSeries.update(lastSignal);\n                histogramSeries.update(lastHistogram);\n            }\n        } else {\n            // Handle other strategies\n            const colors = [\n                \"#2962FF\",\n                \"#FF6B6B\"\n            ];\n            selectedStrategy.indicators.forEach((indicator, index)=>{\n                const lineSeries = chart.addLineSeries({\n                    color: colors[index],\n                    lineWidth: 2,\n                    title: indicator.name,\n                    priceFormat: {\n                        type: \"price\",\n                        precision: getDecimalPlaces(baseToken),\n                        minMove: getMinMove(baseToken)\n                    }\n                });\n                indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n                const lineData = (index === 0 ? fastLine : slowLine).map((value, idx)=>({\n                        time: uniqueData[idx].time,\n                        value: isNaN(value) ? null : value\n                    })).filter((d)=>d.value !== null).sort((a, b)=>a.time - b.time);\n                lineSeries.setData(lineData);\n            });\n        }\n        // Create marker series\n        markerSeriesRef.current = chart.addLineSeries({\n            lastValueVisible: false,\n            priceLineVisible: false,\n            crosshairMarkerVisible: false,\n            lineVisible: false,\n            lineWidth: 1,\n            color: \"rgba(0, 0, 0, 0)\",\n            priceScaleId: \"right\"\n        });\n        // Find and set signals\n        const signals = [];\n        for(let i = 1; i < uniqueData.length; i++){\n            const signal = checkForSignal(fastLine[i - 1], slowLine[i - 1], fastLine[i], slowLine[i], uniqueData[i], uniqueData.slice(Math.max(0, i - 10), i + 1));\n            if (signal) {\n                signals.push(signal);\n            }\n        }\n        if (signals.length > 0) {\n            const sortedSignals = signals.sort((a, b)=>a.time - b.time);\n            markerSeriesRef.current.setMarkers(sortedSignals);\n            markerSeriesRef.current.setData(sortedSignals.map((signal)=>({\n                    time: signal.time,\n                    value: signal.value\n                })));\n        }\n    };\n    // Modify the real-time signal check\n    const checkRealTimeSignal = (data)=>{\n        if (!markerSeriesRef.current || data.length < 2) return;\n        // Ensure data is sorted and deduplicated\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        let histogramData = [];\n        // Calculate indicators based on strategy type\n        if (strategy === \"macd_crossover\") {\n            const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n            fastLine = macdData.macd;\n            slowLine = macdData.signal;\n            histogramData = macdData.histogram;\n            // Update MACD series if they exist\n            const macdSeries = indicatorSeriesRefs.current.get(\"MACD\");\n            const signalSeries = indicatorSeriesRefs.current.get(\"Signal\");\n            const histogramSeries = indicatorSeriesRefs.current.get(\"Histogram\");\n            if (macdSeries && signalSeries && histogramSeries) {\n                // Scale histogram values with dynamic scaling\n                const maxHistogram = Math.max(...histogramData.map(Math.abs));\n                const scaleFactor = getHistogramScaleFactor(timeframe, maxHistogram);\n                const lastMACD = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: fastLine[fastLine.length - 1]\n                };\n                const lastSignal = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: slowLine[slowLine.length - 1]\n                };\n                const lastHistogram = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: histogramData[histogramData.length - 1] * scaleFactor,\n                    color: histogramData[histogramData.length - 1] >= 0 ? \"#26a69a\" : \"#ef5350\"\n                };\n                macdSeries.update(lastMACD);\n                signalSeries.update(lastSignal);\n                histogramSeries.update(lastHistogram);\n            }\n        } else {\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n        }\n        const signal = checkForSignal(fastLine[fastLine.length - 2], slowLine[slowLine.length - 2], fastLine[fastLine.length - 1], slowLine[slowLine.length - 1], uniqueData[uniqueData.length - 1], uniqueData.slice(-10));\n        if (signal) {\n            const existingMarkers = markerSeriesRef.current.markers() || [];\n            const newMarkers = [\n                ...existingMarkers,\n                signal\n            ].sort((a, b)=>a.time - b.time);\n            console.log(\"Adding real-time \".concat(signal.text, \" signal\"));\n            markerSeriesRef.current.setMarkers(newMarkers);\n            // Update marker series data\n            markerSeriesRef.current.setData(newMarkers.map((marker)=>({\n                    time: marker.time,\n                    value: marker.value\n                })));\n        }\n    };\n    // Function to update price stats\n    const updatePriceStats = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((data)=>{\n        if (data.length < 2) return;\n        const last24h = data.slice(-24); // Assuming hourly data\n        const currentPrice = last24h[last24h.length - 1].close;\n        const high24h = Math.max(...last24h.map((d)=>d.high));\n        const low24h = Math.min(...last24h.map((d)=>d.low));\n        // Get the candlestick series' price format\n        const candlestickSeries = candlestickSeriesRef.current;\n        if (!candlestickSeries) return;\n        const priceFormat = candlestickSeries.options().priceFormat;\n        if (!priceFormat) return;\n        // Format prices using the same precision and minMove as the chart\n        const formatPrice = (price)=>{\n            if (typeof price !== \"number\" || isNaN(price)) return getDefaultPrice(baseToken);\n            return price.toFixed(priceFormat.precision);\n        };\n        // Update state with formatted values\n        const formattedCurrentPrice = formatPrice(currentPrice);\n        const formattedHigh = formatPrice(high24h);\n        const formattedLow = formatPrice(low24h);\n        setCurrentPrice(formattedCurrentPrice);\n        setPriceStats({\n            change24h: formattedCurrentPrice,\n            high24h: formattedHigh,\n            low24h: formattedLow\n        });\n    }, [\n        baseToken\n    ]);\n    // Effect for strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (chartRef.current && historicalDataRef.current.length > 0) {\n            addStrategyIndicators(chartRef.current, historicalDataRef.current);\n        }\n    }, [\n        strategy\n    ]);\n    // Price format configuration\n    const getPriceFormat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((baseToken)=>{\n        const isBTCPair = baseToken === \"BTC\";\n        return {\n            type: \"price\",\n            precision: isBTCPair ? 8 : 2,\n            minMove: isBTCPair ? 0.00000001 : 0.01,\n            format: (price)=>{\n                if (typeof price !== \"number\" || isNaN(price)) {\n                    return isBTCPair ? \"0.00000000\" : \"0.00\";\n                }\n                return price.toFixed(isBTCPair ? 8 : 2);\n            }\n        };\n    }, []);\n    // Create series with price format\n    const createSeriesWithFormat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((chart, options, priceFormat)=>{\n        return chart.addCandlestickSeries({\n            ...options,\n            priceFormat: {\n                type: priceFormat.type,\n                precision: priceFormat.precision,\n                minMove: priceFormat.minMove\n            }\n        });\n    }, []);\n    // Function to get default price format based on base token\n    const getDefaultPrice = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((baseToken)=>{\n        return baseToken.toUpperCase() === \"BTC\" ? \"0.00000000\" : \"0.00\";\n    }, []);\n    // Main chart initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\",\n                visible: true,\n                scaleMargins: {\n                    top: 0.1,\n                    bottom: 0.4\n                },\n                autoScale: true,\n                mode: 0,\n                alignLabels: true,\n                borderVisible: true,\n                entireTextOnly: true,\n                ticksVisible: true\n            },\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, chartOptions);\n        // Create candlestick series with price format\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\",\n            priceFormat: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(baseToken)\n        });\n        // Configure the price scale\n        const priceScale = chart.priceScale(\"right\");\n        priceScale.applyOptions({\n            scaleMargins: {\n                top: 0.1,\n                bottom: 0.4\n            },\n            autoScale: true,\n            mode: 0,\n            alignLabels: true,\n            borderVisible: true,\n            entireTextOnly: true,\n            ticksVisible: true\n        });\n        // Set the price formatter for the scale\n        chart.applyOptions({\n            localization: {\n                priceFormatter: (price)=>formatPrice(price, baseToken)\n            }\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Load initial data\n        const loadData = async ()=>{\n            try {\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe, token, baseToken);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                updatePriceStats(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadData();\n        // Real-time updates\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (!candlestickSeriesRef.current) return;\n            const intervalSeconds = getIntervalSeconds(timeframe);\n            const candleTimestamp = Math.floor(data.time / intervalSeconds) * intervalSeconds;\n            // If this is a new candle\n            if (!currentCandleRef.current || candleTimestamp !== currentCandleRef.current.time) {\n                // If we had a previous candle, add it to historical data and check for signals\n                if (currentCandleRef.current) {\n                    historicalDataRef.current = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    // Update strategies with the new historical data\n                    if (strategy !== \"none\" && chartRef.current) {\n                        addStrategyIndicators(chartRef.current, historicalDataRef.current);\n                    }\n                }\n                // Start new candle\n                currentCandleRef.current = {\n                    time: candleTimestamp,\n                    open: data.value,\n                    high: data.value,\n                    low: data.value,\n                    close: data.value\n                };\n            } else {\n                // Update current candle\n                currentCandleRef.current.high = Math.max(currentCandleRef.current.high, data.value);\n                currentCandleRef.current.low = Math.min(currentCandleRef.current.low, data.value);\n                currentCandleRef.current.close = data.value;\n                // Check for real-time signals with current candle\n                if (strategy !== \"none\" && chartRef.current && historicalDataRef.current.length > 0) {\n                    const updatedData = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    checkRealTimeSignal(updatedData);\n                }\n            }\n            // Update the chart with current candle\n            candlestickSeriesRef.current.update(currentCandleRef.current);\n            // Update price stats with the latest data\n            if (historicalDataRef.current.length > 0) {\n                updatePriceStats([\n                    ...historicalDataRef.current,\n                    currentCandleRef.current\n                ]);\n            }\n        }, timeframe, token, baseToken);\n        // Handle window resize\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        // Remove TradingView logo elements\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created and after a delay\n        removeTradingViewLogo();\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        // Function to create indicator series with correct price format\n        const createIndicatorSeries = (type, options)=>{\n            const priceConfig = getPriceFormat(baseToken);\n            const seriesOptions = {\n                ...options,\n                priceFormat: {\n                    type: \"price\",\n                    precision: priceConfig.precision,\n                    minMove: priceConfig.minMove\n                }\n            };\n            return type === \"line\" ? chart.addLineSeries(seriesOptions) : chart.addHistogramSeries(seriesOptions);\n        };\n        // Add MACD series with proper price formatting\n        if (strategy === \"macd_crossover\") {\n            const macdSeries = createIndicatorSeries(\"line\", {\n                color: \"#2962FF\",\n                lineWidth: 2,\n                title: \"MACD\",\n                priceScaleId: \"overlay\"\n            });\n            const signalSeries = createIndicatorSeries(\"line\", {\n                color: \"#FF6B6B\",\n                lineWidth: 2,\n                title: \"Signal\",\n                priceScaleId: \"overlay\"\n            });\n            const histogramSeries = createIndicatorSeries(\"histogram\", {\n                color: \"#26a69a\",\n                title: \"Histogram\",\n                priceScaleId: \"overlay\",\n                base: 0\n            });\n            indicatorSeriesRefs.current.set(\"MACD\", macdSeries);\n            indicatorSeriesRefs.current.set(\"Signal\", signalSeries);\n            indicatorSeriesRefs.current.set(\"Histogram\", histogramSeries);\n        }\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            chart.remove();\n        };\n    }, [\n        timeframe\n    ]);\n    // Handle trading pair change\n    const handlePairChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newToken, newBaseToken)=>{\n        onPairChange(newToken, newBaseToken);\n        // Reset price states with correct format for the new base token\n        const defaultPrice = getDefaultPrice(newBaseToken);\n        setCurrentPrice(defaultPrice);\n        setPriceStats({\n            change24h: defaultPrice,\n            high24h: defaultPrice,\n            low24h: defaultPrice\n        });\n        const chart = chartRef.current;\n        const candlestickSeries = candlestickSeriesRef.current;\n        if (!chart || !candlestickSeries) return;\n        const loadNewData = async ()=>{\n            try {\n                // Update candlestick series price format\n                candlestickSeries.applyOptions({\n                    priceFormat: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken)\n                });\n                // Update price scale format\n                chart.applyOptions({\n                    localization: {\n                        priceFormatter: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken).formatter\n                    }\n                });\n                // Update indicator series price formats\n                indicatorSeriesRefs.current.forEach((series)=>{\n                    series.applyOptions({\n                        priceFormat: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken)\n                    });\n                });\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe, newToken, newBaseToken);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                updatePriceStats(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n                // Force chart to recalculate price scale\n                chart.timeScale().fitContent();\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadNewData();\n    }, [\n        timeframe,\n        strategy,\n        updatePriceStats,\n        onPairChange,\n        getDefaultPrice\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TickerHeader__WEBPACK_IMPORTED_MODULE_6__.TickerHeader, {\n                token: token,\n                baseToken: baseToken,\n                exchange: exchange,\n                currentPrice: currentPrice,\n                priceStats: priceStats,\n                onExchangeChange: setSelectedExchange,\n                onPairChange: handlePairChange\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 897,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: chartContainerRef,\n                className: \"flex-1\"\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 906,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 896,\n        columnNumber: 5\n    }, this);\n}\n_s(CandlestickChart, \"13oYip514q3a/3FIm3Bq6meOqwo=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NhbmRsZXN0aWNrQ2hhcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUVpRTtBQUNoQjtBQUNnRDtBQUNqQztBQU9qQjtBQUNEO0FBUWpCO0FBbUJ0QixTQUFTZSxpQkFBaUIsS0FPVDtRQVBTLEVBQy9CQyxTQUFTLEVBQ1RDLFFBQVEsRUFDUkMsUUFBUSxLQUFLLEVBQ2JDLFlBQVksTUFBTSxFQUNsQkMsV0FBVyxlQUFlLEVBQzFCQyxlQUFlLEtBQU8sQ0FBQyxFQUNELEdBUFM7O0lBUS9CLE1BQU0sQ0FBQ0Msa0JBQWtCQyxvQkFBb0IsR0FBR3JCLCtDQUFRQSxDQUFDa0I7SUFDekQsTUFBTSxDQUFDSSxtQkFBbUJDLHFCQUFxQixHQUFHdkIsK0NBQVFBLENBQUNpQjtJQUMzRCxNQUFNLENBQUNPLGNBQWNDLGdCQUFnQixHQUFHekIsK0NBQVFBLENBQVMsSUFBTTBCLGdCQUFnQlQ7SUFDL0UsTUFBTSxDQUFDVSxZQUFZQyxjQUFjLEdBQUc1QiwrQ0FBUUEsQ0FBQyxJQUFPO1lBQ2xENkIsV0FBV0gsZ0JBQWdCVDtZQUMzQmEsU0FBU0osZ0JBQWdCVDtZQUN6QmMsUUFBUUwsZ0JBQWdCVDtRQUMxQjtJQUNBLE1BQU1lLG9CQUFvQmpDLDZDQUFNQSxDQUFpQjtJQUNqRCxNQUFNa0MsV0FBV2xDLDZDQUFNQSxDQUFtQjtJQUMxQyxNQUFNbUMsdUJBQXVCbkMsNkNBQU1BLENBQU07SUFDekMsTUFBTW9DLHNCQUFzQnBDLDZDQUFNQSxDQUFtQixJQUFJcUM7SUFDekQsTUFBTUMsa0JBQWtCdEMsNkNBQU1BLENBQU07SUFDcEMsTUFBTXVDLG9CQUFvQnZDLDZDQUFNQSxDQUFRLEVBQUU7SUFDMUMsTUFBTXdDLG1CQUFtQnhDLDZDQUFNQSxDQUFNO0lBQ3JDLE1BQU15QyxnQkFBZ0J6Qyw2Q0FBTUEsQ0FBZ0Q7SUFFNUUsc0NBQXNDO0lBQ3RDLE1BQU0wQyxxQkFBcUIsQ0FB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QTtnQkFDUEMsV0FBV0E7Z0JBQ1hDLFVBQVVBO2dCQUNWTSxjQUFjQTtnQkFDZEcsWUFBWUE7Z0JBQ1pzTixrQkFBa0I1TjtnQkFDbEJGLGNBQWNxTjs7Ozs7OzBCQUVoQiw4REFBQ087Z0JBQUlHLEtBQUtsTjtnQkFBbUJnTixXQUFVOzs7Ozs7Ozs7Ozs7QUFHN0M7R0FwMkJnQm5PO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NhbmRsZXN0aWNrQ2hhcnQudHN4PzhkNDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0IHsgVGltZSwgSUNoYXJ0QXBpLCBDaGFydE9wdGlvbnMsIERlZXBQYXJ0aWFsLCBMaW5lV2lkdGgsIEJ1c2luZXNzRGF5LCBVVENUaW1lc3RhbXAgfSBmcm9tICdsaWdodHdlaWdodC1jaGFydHMnO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0IH0gZnJvbSAnbGlnaHR3ZWlnaHQtY2hhcnRzJztcbmltcG9ydCB7IGdldEhpc3RvcmljYWxEYXRhLCBzdWJzY3JpYmVUb1ByaWNlLCBUaW1lZnJhbWUgfSBmcm9tICdAL3NlcnZpY2VzL2FwaS9jcnlwdG9Db21wYXJlQVBJJztcbmltcG9ydCB7IFN0cmF0ZWd5SWQsIGdldFN0cmF0ZWd5IH0gZnJvbSAnQC9zZXJ2aWNlcy9zdHJhdGVnaWVzJztcbmltcG9ydCB7IFxuICBjYWxjdWxhdGVFTUEsXG4gIGNhbGN1bGF0ZVNNQSxcbiAgY2FsY3VsYXRlVEVNQSxcbiAgY2FsY3VsYXRlSE1BLFxuICBjYWxjdWxhdGVNQUNEXG59IGZyb20gJ0Avc2VydmljZXMvc3RyYXRlZ2llcy9tb3ZpbmctYXZlcmFnZXMnO1xuaW1wb3J0IHsgVGlja2VySGVhZGVyIH0gZnJvbSAnLi9UaWNrZXJIZWFkZXInO1xuaW1wb3J0IHsgXG4gIGdldENoYXJ0UHJpY2VGb3JtYXQsIFxuICBnZXRTY2FsZUZvcm1hdCwgXG4gIGZvcm1hdFByaWNlLCBcbiAgaXNCVENQYWlyLFxuICBERUZBVUxUX0JUQ19GT1JNQVQsXG4gIERFRkFVTFRfVVNEVF9GT1JNQVRcbn0gZnJvbSAnQC91dGlscy9wcmljZUZvcm1hdCc7XG5cbmludGVyZmFjZSBDYW5kbGVzdGlja0NoYXJ0UHJvcHMge1xuICB0aW1lZnJhbWU6IFRpbWVmcmFtZTtcbiAgc3RyYXRlZ3k6IFN0cmF0ZWd5SWQ7XG4gIHRva2VuPzogc3RyaW5nO1xuICBiYXNlVG9rZW4/OiBzdHJpbmc7XG4gIGV4Y2hhbmdlPzogc3RyaW5nO1xuICBvblBhaXJDaGFuZ2U/OiAodG9rZW46IHN0cmluZywgYmFzZVRva2VuOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBDYW5kbGUge1xuICB0aW1lOiBUaW1lO1xuICBvcGVuOiBudW1iZXI7XG4gIGhpZ2g6IG51bWJlcjtcbiAgbG93OiBudW1iZXI7XG4gIGNsb3NlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDYW5kbGVzdGlja0NoYXJ0KHsgXG4gIHRpbWVmcmFtZSwgXG4gIHN0cmF0ZWd5LCBcbiAgdG9rZW4gPSAnQlRDJywgXG4gIGJhc2VUb2tlbiA9ICdVU0RUJyxcbiAgZXhjaGFuZ2UgPSAnQ3J5cHRvQ29tcGFyZScsXG4gIG9uUGFpckNoYW5nZSA9ICgpID0+IHt9IFxufTogQ2FuZGxlc3RpY2tDaGFydFByb3BzKSB7XG4gIGNvbnN0IFtzZWxlY3RlZEV4Y2hhbmdlLCBzZXRTZWxlY3RlZEV4Y2hhbmdlXSA9IHVzZVN0YXRlKGV4Y2hhbmdlKTtcbiAgY29uc3QgW3NlbGVjdGVkQmFzZVRva2VuLCBzZXRTZWxlY3RlZEJhc2VUb2tlbl0gPSB1c2VTdGF0ZShiYXNlVG9rZW4pO1xuICBjb25zdCBbY3VycmVudFByaWNlLCBzZXRDdXJyZW50UHJpY2VdID0gdXNlU3RhdGU8c3RyaW5nPigoKSA9PiBnZXREZWZhdWx0UHJpY2UoYmFzZVRva2VuKSk7XG4gIGNvbnN0IFtwcmljZVN0YXRzLCBzZXRQcmljZVN0YXRzXSA9IHVzZVN0YXRlKCgpID0+ICh7XG4gICAgY2hhbmdlMjRoOiBnZXREZWZhdWx0UHJpY2UoYmFzZVRva2VuKSxcbiAgICBoaWdoMjRoOiBnZXREZWZhdWx0UHJpY2UoYmFzZVRva2VuKSxcbiAgICBsb3cyNGg6IGdldERlZmF1bHRQcmljZShiYXNlVG9rZW4pXG4gIH0pKTtcbiAgY29uc3QgY2hhcnRDb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZjxJQ2hhcnRBcGkgfCBudWxsPihudWxsKTtcbiAgY29uc3QgY2FuZGxlc3RpY2tTZXJpZXNSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcbiAgY29uc3QgaW5kaWNhdG9yU2VyaWVzUmVmcyA9IHVzZVJlZjxNYXA8c3RyaW5nLCBhbnk+PihuZXcgTWFwKCkpO1xuICBjb25zdCBtYXJrZXJTZXJpZXNSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcbiAgY29uc3QgaGlzdG9yaWNhbERhdGFSZWYgPSB1c2VSZWY8YW55W10+KFtdKTtcbiAgY29uc3QgY3VycmVudENhbmRsZVJlZiA9IHVzZVJlZjxhbnk+KG51bGwpO1xuICBjb25zdCBsYXN0U2lnbmFsUmVmID0gdXNlUmVmPHsgdGltZTogbnVtYmVyLCB0eXBlOiAnYnV5JyB8ICdzZWxsJyB9IHwgbnVsbD4obnVsbCk7XG5cbiAgLy8gRnVuY3Rpb24gdG8gZ2V0IGludGVydmFsIGluIHNlY29uZHNcbiAgY29uc3QgZ2V0SW50ZXJ2YWxTZWNvbmRzID0gKHRmOiBUaW1lZnJhbWUpOiBudW1iZXIgPT4ge1xuICAgIHN3aXRjaCAodGYpIHtcbiAgICAgIGNhc2UgJzFtJzogcmV0dXJuIDYwO1xuICAgICAgY2FzZSAnNW0nOiByZXR1cm4gMzAwO1xuICAgICAgY2FzZSAnMTVtJzogcmV0dXJuIDkwMDtcbiAgICAgIGNhc2UgJzMwbSc6IHJldHVybiAxODAwO1xuICAgICAgY2FzZSAnMWgnOiByZXR1cm4gMzYwMDtcbiAgICAgIGNhc2UgJzRoJzogcmV0dXJuIDE0NDAwO1xuICAgICAgY2FzZSAnMWQnOiByZXR1cm4gODY0MDA7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gNjA7XG4gICAgfVxuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIHNhZmVseSByZW1vdmUgYSBzZXJpZXNcbiAgY29uc3Qgc2FmZWx5UmVtb3ZlU2VyaWVzID0gKGNoYXJ0OiBJQ2hhcnRBcGksIHNlcmllczogYW55KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChzZXJpZXMgJiYgY2hhcnQpIHtcbiAgICAgICAgY2hhcnQucmVtb3ZlU2VyaWVzKHNlcmllcyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVtb3Zpbmcgc2VyaWVzOicsIGUpO1xuICAgIH1cbiAgfTtcblxuICAvLyBGdW5jdGlvbiB0byBnZXQgYXBwcm9wcmlhdGUgZGVjaW1hbCBwbGFjZXMgYmFzZWQgb24gYmFzZSB0b2tlblxuICBjb25zdCBnZXREZWNpbWFsUGxhY2VzID0gKGJhc2VUb2tlbjogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gYmFzZVRva2VuID09PSAnQlRDJyA/IDggOiAyO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGdldCBhcHByb3ByaWF0ZSBtaW4gbW92ZSBiYXNlZCBvbiBiYXNlIHRva2VuXG4gIGNvbnN0IGdldE1pbk1vdmUgPSAoYmFzZVRva2VuOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgIHJldHVybiBiYXNlVG9rZW4udG9VcHBlckNhc2UoKSA9PT0gJ0JUQycgPyAwLjAwMDAwMDAxIDogMC4wMTtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiB0byBmb3JtYXQgcHJpY2UgYmFzZWQgb24gYmFzZSB0b2tlblxuICBjb25zdCBmb3JtYXRQcmljZSA9IChwcmljZTogbnVtYmVyLCBiYXNlVG9rZW46IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgaWYgKGJhc2VUb2tlbiA9PT0gJ0JUQycpIHtcbiAgICAgIHJldHVybiBwcmljZS50b0ZpeGVkKDgpOyAgLy8gU2hvdyA4IGRlY2ltYWwgcGxhY2VzIGZvciBCVEMgcGFpcnNcbiAgICB9XG4gICAgcmV0dXJuIHByaWNlLnRvRml4ZWQoMik7ICAgIC8vIFNob3cgMiBkZWNpbWFsIHBsYWNlcyBmb3Igb3RoZXIgcGFpcnNcbiAgfTtcblxuICAvLyBGdW5jdGlvbiB0byBmb3JtYXQgc2lnbmFsIHRleHRcbiAgY29uc3QgZm9ybWF0U2lnbmFsVGV4dCA9ICh0eXBlOiBzdHJpbmcsIHByaWNlOiBudW1iZXIsIGJhc2VUb2tlbjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gYCR7dHlwZX0gJHtmb3JtYXRQcmljZShwcmljZSwgYmFzZVRva2VuKX1gO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGZvciBjcm9zc292ZXIgc2lnbmFsc1xuICBjb25zdCBjaGVja0ZvclNpZ25hbCA9IChcbiAgICBwcmV2RmFzdDogbnVtYmVyLFxuICAgIHByZXZTbG93OiBudW1iZXIsXG4gICAgY3VyckZhc3Q6IG51bWJlcixcbiAgICBjdXJyU2xvdzogbnVtYmVyLFxuICAgIGNhbmRsZTogYW55LFxuICAgIGRhdGE6IGFueVtdXG4gICkgPT4ge1xuICAgIGlmICghaXNOYU4ocHJldkZhc3QpICYmICFpc05hTihwcmV2U2xvdykgJiYgIWlzTmFOKGN1cnJGYXN0KSAmJiAhaXNOYU4oY3VyclNsb3cpKSB7XG4gICAgICBpZiAoc3RyYXRlZ3kgPT09ICdtYWNkX2Nyb3Nzb3ZlcicpIHtcbiAgICAgICAgY29uc3QgcHJldkhpc3RvZ3JhbSA9IHByZXZGYXN0IC0gcHJldlNsb3c7XG4gICAgICAgIGNvbnN0IGN1cnJIaXN0b2dyYW0gPSBjdXJyRmFzdCAtIGN1cnJTbG93O1xuICAgICAgICBcbiAgICAgICAgaWYgKHByZXZIaXN0b2dyYW0gPD0gMCAmJiBjdXJySGlzdG9ncmFtID4gMCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aW1lOiBjYW5kbGUudGltZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYmVsb3dCYXInLFxuICAgICAgICAgICAgY29sb3I6ICcjMjZhNjlhJyxcbiAgICAgICAgICAgIHNoYXBlOiAnYXJyb3dVcCcsXG4gICAgICAgICAgICB0ZXh0OiBmb3JtYXRTaWduYWxUZXh0KCdCdXknLCBjYW5kbGUuY2xvc2UsIGJhc2VUb2tlbiksXG4gICAgICAgICAgICBzaXplOiAyLFxuICAgICAgICAgICAgdmFsdWU6IGNhbmRsZS5sb3cgKiAwLjk5OSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByZXZIaXN0b2dyYW0gPj0gMCAmJiBjdXJySGlzdG9ncmFtIDwgMCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aW1lOiBjYW5kbGUudGltZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJvdmVCYXInLFxuICAgICAgICAgICAgY29sb3I6ICcjZWY1MzUwJyxcbiAgICAgICAgICAgIHNoYXBlOiAnYXJyb3dEb3duJyxcbiAgICAgICAgICAgIHRleHQ6IGZvcm1hdFNpZ25hbFRleHQoJ1NlbGwnLCBjYW5kbGUuY2xvc2UsIGJhc2VUb2tlbiksXG4gICAgICAgICAgICBzaXplOiAyLFxuICAgICAgICAgICAgdmFsdWU6IGNhbmRsZS5oaWdoICogMS4wMDEsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYXZnUHJpY2UgPSBkYXRhLnJlZHVjZSgoc3VtLCBkKSA9PiBzdW0gKyBkLmNsb3NlLCAwKSAvIGRhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCBwcmljZVJhbmdlID0gZGF0YS5yZWR1Y2UoKHJhbmdlLCBkKSA9PiBNYXRoLm1heChyYW5nZSwgTWF0aC5hYnMoZC5oaWdoIC0gZC5sb3cpKSwgMCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHByaWNlUmFuZ2UgKiAwLjc1O1xuXG4gICAgICAgIGlmIChwcmV2RmFzdCA8PSBwcmV2U2xvdyAmJiBjdXJyRmFzdCA+IGN1cnJTbG93KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IGNhbmRsZS50aW1lLFxuICAgICAgICAgICAgcG9zaXRpb246ICdiZWxvd0JhcicsXG4gICAgICAgICAgICBjb2xvcjogJyMyNmE2OWEnLFxuICAgICAgICAgICAgc2hhcGU6ICdhcnJvd1VwJyxcbiAgICAgICAgICAgIHRleHQ6IGZvcm1hdFNpZ25hbFRleHQoJ0J1eScsIGNhbmRsZS5jbG9zZSwgYmFzZVRva2VuKSxcbiAgICAgICAgICAgIHNpemU6IDIsXG4gICAgICAgICAgICB2YWx1ZTogTWF0aC5taW4oLi4uZGF0YS5zbGljZSgtMTApLm1hcChkID0+IGQubG93KSkgLSBvZmZzZXQsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2RmFzdCA+PSBwcmV2U2xvdyAmJiBjdXJyRmFzdCA8IGN1cnJTbG93KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IGNhbmRsZS50aW1lLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYm92ZUJhcicsXG4gICAgICAgICAgICBjb2xvcjogJyNlZjUzNTAnLFxuICAgICAgICAgICAgc2hhcGU6ICdhcnJvd0Rvd24nLFxuICAgICAgICAgICAgdGV4dDogZm9ybWF0U2lnbmFsVGV4dCgnU2VsbCcsIGNhbmRsZS5jbG9zZSwgYmFzZVRva2VuKSxcbiAgICAgICAgICAgIHNpemU6IDIsXG4gICAgICAgICAgICB2YWx1ZTogTWF0aC5tYXgoLi4uZGF0YS5zbGljZSgtMTApLm1hcChkID0+IGQuaGlnaCkpICsgb2Zmc2V0LFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gdG8gZ2V0IGhpc3RvZ3JhbSBzY2FsZSBmYWN0b3IgYmFzZWQgb24gdGltZWZyYW1lXG4gIGNvbnN0IGdldEhpc3RvZ3JhbVNjYWxlRmFjdG9yID0gKHRmOiBUaW1lZnJhbWUsIG1heEhpc3RvZ3JhbTogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICBpZiAobWF4SGlzdG9ncmFtID09PSAwKSByZXR1cm4gMTtcbiAgICBcbiAgICBzd2l0Y2ggKHRmKSB7XG4gICAgICBjYXNlICcxaCc6XG4gICAgICBjYXNlICc0aCc6XG4gICAgICBjYXNlICcxZCc6XG4gICAgICBjYXNlICcxdyc6XG4gICAgICAgIHJldHVybiAxMDAgLyBtYXhIaXN0b2dyYW07IC8vIE11Y2ggbGFyZ2VyIHNjYWxpbmcgZm9yIGhpZ2hlciB0aW1lZnJhbWVzXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gMjAgLyBtYXhIaXN0b2dyYW07IC8vIE9yaWdpbmFsIHNjYWxpbmcgZm9yIGxvd2VyIHRpbWVmcmFtZXNcbiAgICB9XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gdG8gYWRkIHN0cmF0ZWd5IGluZGljYXRvcnNcbiAgY29uc3QgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzID0gKGNoYXJ0OiBJQ2hhcnRBcGksIGRhdGE6IGFueVtdKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0FkZGluZyBzdHJhdGVneSBpbmRpY2F0b3JzJyk7XG4gICAgXG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGluZGljYXRvcnNcbiAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuZm9yRWFjaChzZXJpZXMgPT4gc2FmZWx5UmVtb3ZlU2VyaWVzKGNoYXJ0LCBzZXJpZXMpKTtcbiAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuY2xlYXIoKTtcbiAgICBcbiAgICBpZiAobWFya2VyU2VyaWVzUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNhZmVseVJlbW92ZVNlcmllcyhjaGFydCwgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQpO1xuICAgICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChzdHJhdGVneSA9PT0gJ25vbmUnKSByZXR1cm47XG5cbiAgICAvLyBFbnN1cmUgZGF0YSBpcyBzb3J0ZWQgYW5kIGRlZHVwbGljYXRlZCBieSB0aW1lXG4gICAgY29uc3QgdW5pcXVlRGF0YSA9IEFycmF5LmZyb20obmV3IE1hcChkYXRhLm1hcChpdGVtID0+IFtpdGVtLnRpbWUsIGl0ZW1dKSkudmFsdWVzKCkpXG4gICAgICAuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcblxuICAgIGNvbnN0IHByaWNlcyA9IHVuaXF1ZURhdGEubWFwKGQgPT4gZC5jbG9zZSk7XG4gICAgbGV0IGZhc3RMaW5lOiBudW1iZXJbXSA9IFtdO1xuICAgIGxldCBzbG93TGluZTogbnVtYmVyW10gPSBbXTtcbiAgICBsZXQgaGlzdG9ncmFtRGF0YTogbnVtYmVyW10gPSBbXTtcblxuICAgIC8vIENhbGN1bGF0ZSBpbmRpY2F0b3JzIGJhc2VkIG9uIHN0cmF0ZWd5IHR5cGVcbiAgICBpZiAoc3RyYXRlZ3kgPT09ICdtYWNkX2Nyb3Nzb3ZlcicpIHtcbiAgICAgIGNvbnN0IG1hY2REYXRhID0gY2FsY3VsYXRlTUFDRChwcmljZXMpO1xuICAgICAgZmFzdExpbmUgPSBtYWNkRGF0YS5tYWNkO1xuICAgICAgc2xvd0xpbmUgPSBtYWNkRGF0YS5zaWduYWw7XG4gICAgICBoaXN0b2dyYW1EYXRhID0gbWFjZERhdGEuaGlzdG9ncmFtO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICAgIGNhc2UgJ2VtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlU01BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RlbWFfY3Jvc3NvdmVyJzpcbiAgICAgICAgICBmYXN0TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCA3KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dvbGRlbl9jcm9zcyc6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCA1MCk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdodWxsX2Nyb3Nzb3Zlcic6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVITUEocHJpY2VzLCA5KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZUhNQShwcmljZXMsIDIxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZW1hXzVfMTMnOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgNSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAxMyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGluZGljYXRvciBsaW5lc1xuICAgIGNvbnN0IHNlbGVjdGVkU3RyYXRlZ3kgPSBnZXRTdHJhdGVneShzdHJhdGVneSk7XG4gICAgaWYgKCFzZWxlY3RlZFN0cmF0ZWd5KSByZXR1cm47XG5cbiAgICBpZiAoc3RyYXRlZ3kgPT09ICdtYWNkX2Nyb3Nzb3ZlcicpIHtcbiAgICAgIC8vIENyZWF0ZSBNQUNEIHNlcmllcyB3aXRoIHNlcGFyYXRlIHByaWNlIHNjYWxlXG4gICAgICBjb25zdCBtYWNkU2VyaWVzID0gY2hhcnQuYWRkTGluZVNlcmllcyh7XG4gICAgICAgIGNvbG9yOiAnIzI5NjJGRicsXG4gICAgICAgIGxpbmVXaWR0aDogMixcbiAgICAgICAgdGl0bGU6ICdNQUNEJyxcbiAgICAgICAgcHJpY2VGb3JtYXQ6IHtcbiAgICAgICAgICB0eXBlOiAncHJpY2UnLFxuICAgICAgICAgIHByZWNpc2lvbjogZ2V0RGVjaW1hbFBsYWNlcyhiYXNlVG9rZW4pLFxuICAgICAgICAgIG1pbk1vdmU6IGdldE1pbk1vdmUoYmFzZVRva2VuKSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJpY2VTY2FsZUlkOiAnb3ZlcmxheScsXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2lnbmFsU2VyaWVzID0gY2hhcnQuYWRkTGluZVNlcmllcyh7XG4gICAgICAgIGNvbG9yOiAnI0ZGNkI2QicsXG4gICAgICAgIGxpbmVXaWR0aDogMixcbiAgICAgICAgdGl0bGU6ICdTaWduYWwnLFxuICAgICAgICBwcmljZUZvcm1hdDoge1xuICAgICAgICAgIHR5cGU6ICdwcmljZScsXG4gICAgICAgICAgcHJlY2lzaW9uOiBnZXREZWNpbWFsUGxhY2VzKGJhc2VUb2tlbiksXG4gICAgICAgICAgbWluTW92ZTogZ2V0TWluTW92ZShiYXNlVG9rZW4pLFxuICAgICAgICB9LFxuICAgICAgICBwcmljZVNjYWxlSWQ6ICdvdmVybGF5JyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBoaXN0b2dyYW1TZXJpZXMgPSBjaGFydC5hZGRIaXN0b2dyYW1TZXJpZXMoe1xuICAgICAgICBjb2xvcjogJyMyNmE2OWEnLFxuICAgICAgICB0aXRsZTogJ0hpc3RvZ3JhbScsXG4gICAgICAgIHByaWNlRm9ybWF0OiB7XG4gICAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgICBwcmVjaXNpb246IGdldERlY2ltYWxQbGFjZXMoYmFzZVRva2VuKSxcbiAgICAgICAgICBtaW5Nb3ZlOiBnZXRNaW5Nb3ZlKGJhc2VUb2tlbiksXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlU2NhbGVJZDogJ292ZXJsYXknLFxuICAgICAgICBiYXNlOiAwLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIENvbmZpZ3VyZSB0aGUgcHJpY2Ugc2NhbGUgZm9yIE1BQ0RcbiAgICAgIGNvbnN0IG1hY2RTY2FsZSA9IGNoYXJ0LnByaWNlU2NhbGUoJ292ZXJsYXknKTtcbiAgICAgIGlmIChtYWNkU2NhbGUpIHtcbiAgICAgICAgbWFjZFNjYWxlLmFwcGx5T3B0aW9ucyh7XG4gICAgICAgICAgc2NhbGVNYXJnaW5zOiB7XG4gICAgICAgICAgICB0b3A6IDAuNyxcbiAgICAgICAgICAgIGJvdHRvbTogMC4xLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICBib3JkZXJWaXNpYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LnNldCgnTUFDRCcsIG1hY2RTZXJpZXMpO1xuICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LnNldCgnU2lnbmFsJywgc2lnbmFsU2VyaWVzKTtcbiAgICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5zZXQoJ0hpc3RvZ3JhbScsIGhpc3RvZ3JhbVNlcmllcyk7XG5cbiAgICAgIC8vIFNldCBkYXRhIGZvciBlYWNoIHNlcmllc1xuICAgICAgY29uc3QgbWFjZExpbmVEYXRhID0gZmFzdExpbmUubWFwKCh2YWx1ZSwgaWR4KSA9PiAoe1xuICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW2lkeF0udGltZSxcbiAgICAgICAgdmFsdWU6IGlzTmFOKHZhbHVlKSA/IG51bGwgOiB2YWx1ZVxuICAgICAgfSkpLmZpbHRlcihkID0+IGQudmFsdWUgIT09IG51bGwpO1xuXG4gICAgICBjb25zdCBzaWduYWxMaW5lRGF0YSA9IHNsb3dMaW5lLm1hcCgodmFsdWUsIGlkeCkgPT4gKHtcbiAgICAgICAgdGltZTogdW5pcXVlRGF0YVtpZHhdLnRpbWUsXG4gICAgICAgIHZhbHVlOiBpc05hTih2YWx1ZSkgPyBudWxsIDogdmFsdWVcbiAgICAgIH0pKS5maWx0ZXIoZCA9PiBkLnZhbHVlICE9PSBudWxsKTtcblxuICAgICAgLy8gU2NhbGUgaGlzdG9ncmFtIHZhbHVlcyB3aXRoIGR5bmFtaWMgc2NhbGluZ1xuICAgICAgY29uc3QgbWF4SGlzdG9ncmFtID0gTWF0aC5tYXgoLi4uaGlzdG9ncmFtRGF0YS5tYXAoTWF0aC5hYnMpKTtcbiAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gZ2V0SGlzdG9ncmFtU2NhbGVGYWN0b3IodGltZWZyYW1lLCBtYXhIaXN0b2dyYW0pO1xuXG4gICAgICBjb25zdCBoaXN0b2dyYW1TZXJpZXNEYXRhID0gaGlzdG9ncmFtRGF0YS5tYXAoKHZhbHVlLCBpZHgpID0+ICh7XG4gICAgICAgIHRpbWU6IHVuaXF1ZURhdGFbaWR4XS50aW1lLFxuICAgICAgICB2YWx1ZTogaXNOYU4odmFsdWUpID8gbnVsbCA6IHZhbHVlICogc2NhbGVGYWN0b3IsXG4gICAgICAgIGNvbG9yOiB2YWx1ZSA+PSAwID8gJyMyNmE2OWEnIDogJyNlZjUzNTAnXG4gICAgICB9KSkuZmlsdGVyKGQgPT4gZC52YWx1ZSAhPT0gbnVsbCk7XG5cbiAgICAgIG1hY2RTZXJpZXMuc2V0RGF0YShtYWNkTGluZURhdGEpO1xuICAgICAgc2lnbmFsU2VyaWVzLnNldERhdGEoc2lnbmFsTGluZURhdGEpO1xuICAgICAgaGlzdG9ncmFtU2VyaWVzLnNldERhdGEoaGlzdG9ncmFtU2VyaWVzRGF0YSk7XG5cbiAgICAgIC8vIEFsc28gdXBkYXRlIHRoZSByZWFsLXRpbWUgdXBkYXRlIHNjYWxpbmcgZmFjdG9yXG4gICAgICBpZiAobWFjZFNlcmllcyAmJiBzaWduYWxTZXJpZXMgJiYgaGlzdG9ncmFtU2VyaWVzKSB7XG4gICAgICAgIGNvbnN0IGxhc3RNQUNEID0ge1xuICAgICAgICAgIHRpbWU6IHVuaXF1ZURhdGFbdW5pcXVlRGF0YS5sZW5ndGggLSAxXS50aW1lLFxuICAgICAgICAgIHZhbHVlOiBmYXN0TGluZVtmYXN0TGluZS5sZW5ndGggLSAxXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGxhc3RTaWduYWwgPSB7XG4gICAgICAgICAgdGltZTogdW5pcXVlRGF0YVt1bmlxdWVEYXRhLmxlbmd0aCAtIDFdLnRpbWUsXG4gICAgICAgICAgdmFsdWU6IHNsb3dMaW5lW3Nsb3dMaW5lLmxlbmd0aCAtIDFdXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbGFzdEhpc3RvZ3JhbSA9IHtcbiAgICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW3VuaXF1ZURhdGEubGVuZ3RoIC0gMV0udGltZSxcbiAgICAgICAgICB2YWx1ZTogaGlzdG9ncmFtRGF0YVtoaXN0b2dyYW1EYXRhLmxlbmd0aCAtIDFdICogc2NhbGVGYWN0b3IsXG4gICAgICAgICAgY29sb3I6IGhpc3RvZ3JhbURhdGFbaGlzdG9ncmFtRGF0YS5sZW5ndGggLSAxXSA+PSAwID8gJyMyNmE2OWEnIDogJyNlZjUzNTAnXG4gICAgICAgIH07XG5cbiAgICAgICAgbWFjZFNlcmllcy51cGRhdGUobGFzdE1BQ0QpO1xuICAgICAgICBzaWduYWxTZXJpZXMudXBkYXRlKGxhc3RTaWduYWwpO1xuICAgICAgICBoaXN0b2dyYW1TZXJpZXMudXBkYXRlKGxhc3RIaXN0b2dyYW0pO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBvdGhlciBzdHJhdGVnaWVzXG4gICAgICBjb25zdCBjb2xvcnMgPSBbJyMyOTYyRkYnLCAnI0ZGNkI2QiddO1xuICAgICAgICBzZWxlY3RlZFN0cmF0ZWd5LmluZGljYXRvcnMuZm9yRWFjaCgoaW5kaWNhdG9yLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGxpbmVTZXJpZXMgPSBjaGFydC5hZGRMaW5lU2VyaWVzKHtcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvcnNbaW5kZXhdLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAyLFxuICAgICAgICAgICAgdGl0bGU6IGluZGljYXRvci5uYW1lLFxuICAgICAgICAgICAgcHJpY2VGb3JtYXQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ3ByaWNlJyxcbiAgICAgICAgICAgICAgcHJlY2lzaW9uOiBnZXREZWNpbWFsUGxhY2VzKGJhc2VUb2tlbiksXG4gICAgICAgICAgICAgIG1pbk1vdmU6IGdldE1pbk1vdmUoYmFzZVRva2VuKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LnNldChpbmRpY2F0b3IubmFtZSwgbGluZVNlcmllcyk7XG5cbiAgICAgICAgY29uc3QgbGluZURhdGEgPSAoaW5kZXggPT09IDAgPyBmYXN0TGluZSA6IHNsb3dMaW5lKVxuICAgICAgICAgIC5tYXAoKHZhbHVlLCBpZHgpID0+ICh7XG4gICAgICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW2lkeF0udGltZSxcbiAgICAgICAgICAgIHZhbHVlOiBpc05hTih2YWx1ZSkgPyBudWxsIDogdmFsdWVcbiAgICAgICAgICB9KSlcbiAgICAgICAgICAuZmlsdGVyKGQgPT4gZC52YWx1ZSAhPT0gbnVsbClcbiAgICAgICAgICAuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcblxuICAgICAgICAgIGxpbmVTZXJpZXMuc2V0RGF0YShsaW5lRGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBtYXJrZXIgc2VyaWVzXG4gICAgbWFya2VyU2VyaWVzUmVmLmN1cnJlbnQgPSBjaGFydC5hZGRMaW5lU2VyaWVzKHtcbiAgICAgIGxhc3RWYWx1ZVZpc2libGU6IGZhbHNlLFxuICAgICAgcHJpY2VMaW5lVmlzaWJsZTogZmFsc2UsXG4gICAgICBjcm9zc2hhaXJNYXJrZXJWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGxpbmVXaWR0aDogMSBhcyBMaW5lV2lkdGgsXG4gICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLFxuICAgICAgcHJpY2VTY2FsZUlkOiAncmlnaHQnLCAvLyBBbHdheXMgdXNlIHJpZ2h0IHNjYWxlIGZvciBtYXJrZXJzXG4gICAgfSk7XG5cbiAgICAvLyBGaW5kIGFuZCBzZXQgc2lnbmFsc1xuICAgIGNvbnN0IHNpZ25hbHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHVuaXF1ZURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNpZ25hbCA9IGNoZWNrRm9yU2lnbmFsKFxuICAgICAgICBmYXN0TGluZVtpIC0gMV0sXG4gICAgICAgIHNsb3dMaW5lW2kgLSAxXSxcbiAgICAgICAgZmFzdExpbmVbaV0sXG4gICAgICAgIHNsb3dMaW5lW2ldLFxuICAgICAgICB1bmlxdWVEYXRhW2ldLFxuICAgICAgICB1bmlxdWVEYXRhLnNsaWNlKE1hdGgubWF4KDAsIGkgLSAxMCksIGkgKyAxKVxuICAgICAgKTtcbiAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgc2lnbmFscy5wdXNoKHNpZ25hbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNpZ25hbHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgc29ydGVkU2lnbmFscyA9IHNpZ25hbHMuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcbiAgICAgIG1hcmtlclNlcmllc1JlZi5jdXJyZW50LnNldE1hcmtlcnMoc29ydGVkU2lnbmFscyk7XG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXREYXRhKHNvcnRlZFNpZ25hbHMubWFwKHNpZ25hbCA9PiAoe1xuICAgICAgICB0aW1lOiBzaWduYWwudGltZSxcbiAgICAgICAgdmFsdWU6IHNpZ25hbC52YWx1ZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gTW9kaWZ5IHRoZSByZWFsLXRpbWUgc2lnbmFsIGNoZWNrXG4gIGNvbnN0IGNoZWNrUmVhbFRpbWVTaWduYWwgPSAoZGF0YTogYW55W10pID0+IHtcbiAgICBpZiAoIW1hcmtlclNlcmllc1JlZi5jdXJyZW50IHx8IGRhdGEubGVuZ3RoIDwgMikgcmV0dXJuO1xuXG4gICAgLy8gRW5zdXJlIGRhdGEgaXMgc29ydGVkIGFuZCBkZWR1cGxpY2F0ZWRcbiAgICBjb25zdCB1bmlxdWVEYXRhID0gQXJyYXkuZnJvbShuZXcgTWFwKGRhdGEubWFwKGl0ZW0gPT4gW2l0ZW0udGltZSwgaXRlbV0pKS52YWx1ZXMoKSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiAoYS50aW1lIGFzIG51bWJlcikgLSAoYi50aW1lIGFzIG51bWJlcikpO1xuXG4gICAgY29uc3QgcHJpY2VzID0gdW5pcXVlRGF0YS5tYXAoZCA9PiBkLmNsb3NlKTtcbiAgICBsZXQgZmFzdExpbmU6IG51bWJlcltdID0gW107XG4gICAgbGV0IHNsb3dMaW5lOiBudW1iZXJbXSA9IFtdO1xuICAgIGxldCBoaXN0b2dyYW1EYXRhOiBudW1iZXJbXSA9IFtdO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGluZGljYXRvcnMgYmFzZWQgb24gc3RyYXRlZ3kgdHlwZVxuICAgIGlmIChzdHJhdGVneSA9PT0gJ21hY2RfY3Jvc3NvdmVyJykge1xuICAgICAgY29uc3QgbWFjZERhdGEgPSBjYWxjdWxhdGVNQUNEKHByaWNlcyk7XG4gICAgICBmYXN0TGluZSA9IG1hY2REYXRhLm1hY2Q7XG4gICAgICBzbG93TGluZSA9IG1hY2REYXRhLnNpZ25hbDtcbiAgICAgIGhpc3RvZ3JhbURhdGEgPSBtYWNkRGF0YS5oaXN0b2dyYW07XG5cbiAgICAgIC8vIFVwZGF0ZSBNQUNEIHNlcmllcyBpZiB0aGV5IGV4aXN0XG4gICAgICBjb25zdCBtYWNkU2VyaWVzID0gaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LmdldCgnTUFDRCcpO1xuICAgICAgY29uc3Qgc2lnbmFsU2VyaWVzID0gaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LmdldCgnU2lnbmFsJyk7XG4gICAgICBjb25zdCBoaXN0b2dyYW1TZXJpZXMgPSBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuZ2V0KCdIaXN0b2dyYW0nKTtcblxuICAgICAgaWYgKG1hY2RTZXJpZXMgJiYgc2lnbmFsU2VyaWVzICYmIGhpc3RvZ3JhbVNlcmllcykge1xuICAgICAgICAvLyBTY2FsZSBoaXN0b2dyYW0gdmFsdWVzIHdpdGggZHluYW1pYyBzY2FsaW5nXG4gICAgICAgIGNvbnN0IG1heEhpc3RvZ3JhbSA9IE1hdGgubWF4KC4uLmhpc3RvZ3JhbURhdGEubWFwKE1hdGguYWJzKSk7XG4gICAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gZ2V0SGlzdG9ncmFtU2NhbGVGYWN0b3IodGltZWZyYW1lLCBtYXhIaXN0b2dyYW0pO1xuXG4gICAgICAgIGNvbnN0IGxhc3RNQUNEID0ge1xuICAgICAgICAgIHRpbWU6IHVuaXF1ZURhdGFbdW5pcXVlRGF0YS5sZW5ndGggLSAxXS50aW1lLFxuICAgICAgICAgIHZhbHVlOiBmYXN0TGluZVtmYXN0TGluZS5sZW5ndGggLSAxXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGxhc3RTaWduYWwgPSB7XG4gICAgICAgICAgdGltZTogdW5pcXVlRGF0YVt1bmlxdWVEYXRhLmxlbmd0aCAtIDFdLnRpbWUsXG4gICAgICAgICAgdmFsdWU6IHNsb3dMaW5lW3Nsb3dMaW5lLmxlbmd0aCAtIDFdXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbGFzdEhpc3RvZ3JhbSA9IHtcbiAgICAgICAgICB0aW1lOiB1bmlxdWVEYXRhW3VuaXF1ZURhdGEubGVuZ3RoIC0gMV0udGltZSxcbiAgICAgICAgICB2YWx1ZTogaGlzdG9ncmFtRGF0YVtoaXN0b2dyYW1EYXRhLmxlbmd0aCAtIDFdICogc2NhbGVGYWN0b3IsXG4gICAgICAgICAgY29sb3I6IGhpc3RvZ3JhbURhdGFbaGlzdG9ncmFtRGF0YS5sZW5ndGggLSAxXSA+PSAwID8gJyMyNmE2OWEnIDogJyNlZjUzNTAnXG4gICAgICAgIH07XG5cbiAgICAgICAgbWFjZFNlcmllcy51cGRhdGUobGFzdE1BQ0QpO1xuICAgICAgICBzaWduYWxTZXJpZXMudXBkYXRlKGxhc3RTaWduYWwpO1xuICAgICAgICBoaXN0b2dyYW1TZXJpZXMudXBkYXRlKGxhc3RIaXN0b2dyYW0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICAgIGNhc2UgJ2VtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NtYV9jcm9zc292ZXInOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlU01BKHByaWNlcywgOSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RlbWFfY3Jvc3NvdmVyJzpcbiAgICAgICAgICBmYXN0TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCA3KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZVRFTUEocHJpY2VzLCAyMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dvbGRlbl9jcm9zcyc6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCA1MCk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVTTUEocHJpY2VzLCAyMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdodWxsX2Nyb3Nzb3Zlcic6XG4gICAgICAgICAgZmFzdExpbmUgPSBjYWxjdWxhdGVITUEocHJpY2VzLCA5KTtcbiAgICAgICAgICBzbG93TGluZSA9IGNhbGN1bGF0ZUhNQShwcmljZXMsIDIxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZW1hXzVfMTMnOlxuICAgICAgICAgIGZhc3RMaW5lID0gY2FsY3VsYXRlRU1BKHByaWNlcywgNSk7XG4gICAgICAgICAgc2xvd0xpbmUgPSBjYWxjdWxhdGVFTUEocHJpY2VzLCAxMyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2lnbmFsID0gY2hlY2tGb3JTaWduYWwoXG4gICAgICBmYXN0TGluZVtmYXN0TGluZS5sZW5ndGggLSAyXSxcbiAgICAgIHNsb3dMaW5lW3Nsb3dMaW5lLmxlbmd0aCAtIDJdLFxuICAgICAgZmFzdExpbmVbZmFzdExpbmUubGVuZ3RoIC0gMV0sXG4gICAgICBzbG93TGluZVtzbG93TGluZS5sZW5ndGggLSAxXSxcbiAgICAgIHVuaXF1ZURhdGFbdW5pcXVlRGF0YS5sZW5ndGggLSAxXSxcbiAgICAgIHVuaXF1ZURhdGEuc2xpY2UoLTEwKVxuICAgICk7XG5cbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBjb25zdCBleGlzdGluZ01hcmtlcnMgPSBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5tYXJrZXJzKCkgfHwgW107XG4gICAgICBjb25zdCBuZXdNYXJrZXJzID0gWy4uLmV4aXN0aW5nTWFya2Vycywgc2lnbmFsXVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gKGEudGltZSBhcyBudW1iZXIpIC0gKGIudGltZSBhcyBudW1iZXIpKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYEFkZGluZyByZWFsLXRpbWUgJHtzaWduYWwudGV4dH0gc2lnbmFsYCk7XG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXRNYXJrZXJzKG5ld01hcmtlcnMpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgbWFya2VyIHNlcmllcyBkYXRhXG4gICAgICBtYXJrZXJTZXJpZXNSZWYuY3VycmVudC5zZXREYXRhKG5ld01hcmtlcnMubWFwKG1hcmtlciA9PiAoe1xuICAgICAgICB0aW1lOiBtYXJrZXIudGltZSxcbiAgICAgICAgdmFsdWU6IG1hcmtlci52YWx1ZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gdG8gdXBkYXRlIHByaWNlIHN0YXRzXG4gIGNvbnN0IHVwZGF0ZVByaWNlU3RhdHMgPSB1c2VDYWxsYmFjaygoZGF0YTogYW55W10pID0+IHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAyKSByZXR1cm47XG5cbiAgICBjb25zdCBsYXN0MjRoID0gZGF0YS5zbGljZSgtMjQpOyAvLyBBc3N1bWluZyBob3VybHkgZGF0YVxuICAgIGNvbnN0IGN1cnJlbnRQcmljZSA9IGxhc3QyNGhbbGFzdDI0aC5sZW5ndGggLSAxXS5jbG9zZTtcbiAgICBjb25zdCBoaWdoMjRoID0gTWF0aC5tYXgoLi4ubGFzdDI0aC5tYXAoZCA9PiBkLmhpZ2gpKTtcbiAgICBjb25zdCBsb3cyNGggPSBNYXRoLm1pbiguLi5sYXN0MjRoLm1hcChkID0+IGQubG93KSk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBjYW5kbGVzdGljayBzZXJpZXMnIHByaWNlIGZvcm1hdFxuICAgIGNvbnN0IGNhbmRsZXN0aWNrU2VyaWVzID0gY2FuZGxlc3RpY2tTZXJpZXNSZWYuY3VycmVudDtcbiAgICBpZiAoIWNhbmRsZXN0aWNrU2VyaWVzKSByZXR1cm47XG5cbiAgICBjb25zdCBwcmljZUZvcm1hdCA9IGNhbmRsZXN0aWNrU2VyaWVzLm9wdGlvbnMoKS5wcmljZUZvcm1hdDtcbiAgICBpZiAoIXByaWNlRm9ybWF0KSByZXR1cm47XG4gICAgXG4gICAgLy8gRm9ybWF0IHByaWNlcyB1c2luZyB0aGUgc2FtZSBwcmVjaXNpb24gYW5kIG1pbk1vdmUgYXMgdGhlIGNoYXJ0XG4gICAgY29uc3QgZm9ybWF0UHJpY2UgPSAocHJpY2U6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwcmljZSAhPT0gJ251bWJlcicgfHwgaXNOYU4ocHJpY2UpKSByZXR1cm4gZ2V0RGVmYXVsdFByaWNlKGJhc2VUb2tlbik7XG4gICAgICByZXR1cm4gcHJpY2UudG9GaXhlZChwcmljZUZvcm1hdC5wcmVjaXNpb24pO1xuICAgIH07XG5cbiAgICAvLyBVcGRhdGUgc3RhdGUgd2l0aCBmb3JtYXR0ZWQgdmFsdWVzXG4gICAgY29uc3QgZm9ybWF0dGVkQ3VycmVudFByaWNlID0gZm9ybWF0UHJpY2UoY3VycmVudFByaWNlKTtcbiAgICBjb25zdCBmb3JtYXR0ZWRIaWdoID0gZm9ybWF0UHJpY2UoaGlnaDI0aCk7XG4gICAgY29uc3QgZm9ybWF0dGVkTG93ID0gZm9ybWF0UHJpY2UobG93MjRoKTtcblxuICAgIHNldEN1cnJlbnRQcmljZShmb3JtYXR0ZWRDdXJyZW50UHJpY2UpO1xuICAgIHNldFByaWNlU3RhdHMoe1xuICAgICAgY2hhbmdlMjRoOiBmb3JtYXR0ZWRDdXJyZW50UHJpY2UsXG4gICAgICBoaWdoMjRoOiBmb3JtYXR0ZWRIaWdoLFxuICAgICAgbG93MjRoOiBmb3JtYXR0ZWRMb3dcbiAgICB9KTtcbiAgfSwgW2Jhc2VUb2tlbl0pO1xuXG4gIC8vIEVmZmVjdCBmb3Igc3RyYXRlZ3kgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjaGFydFJlZi5jdXJyZW50ICYmIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQubGVuZ3RoID4gMCkge1xuICAgICAgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzKGNoYXJ0UmVmLmN1cnJlbnQsIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgfSwgW3N0cmF0ZWd5XSk7XG5cbiAgLy8gUHJpY2UgZm9ybWF0IGNvbmZpZ3VyYXRpb25cbiAgY29uc3QgZ2V0UHJpY2VGb3JtYXQgPSB1c2VDYWxsYmFjaygoYmFzZVRva2VuOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBpc0JUQ1BhaXIgPSBiYXNlVG9rZW4gPT09ICdCVEMnO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAncHJpY2UnIGFzIGNvbnN0LFxuICAgICAgcHJlY2lzaW9uOiBpc0JUQ1BhaXIgPyA4IDogMixcbiAgICAgIG1pbk1vdmU6IGlzQlRDUGFpciA/IDAuMDAwMDAwMDEgOiAwLjAxLFxuICAgICAgZm9ybWF0OiAocHJpY2U6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHByaWNlICE9PSAnbnVtYmVyJyB8fCBpc05hTihwcmljZSkpIHtcbiAgICAgICAgICByZXR1cm4gaXNCVENQYWlyID8gJzAuMDAwMDAwMDAnIDogJzAuMDAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmljZS50b0ZpeGVkKGlzQlRDUGFpciA/IDggOiAyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLy8gQ3JlYXRlIHNlcmllcyB3aXRoIHByaWNlIGZvcm1hdFxuICBjb25zdCBjcmVhdGVTZXJpZXNXaXRoRm9ybWF0ID0gdXNlQ2FsbGJhY2soKFxuICAgIGNoYXJ0OiBJQ2hhcnRBcGksXG4gICAgb3B0aW9uczogYW55LFxuICAgIHByaWNlRm9ybWF0OiBhbnlcbiAgKSA9PiB7XG4gICAgcmV0dXJuIGNoYXJ0LmFkZENhbmRsZXN0aWNrU2VyaWVzKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBwcmljZUZvcm1hdDoge1xuICAgICAgICB0eXBlOiBwcmljZUZvcm1hdC50eXBlLFxuICAgICAgICBwcmVjaXNpb246IHByaWNlRm9ybWF0LnByZWNpc2lvbixcbiAgICAgICAgbWluTW92ZTogcHJpY2VGb3JtYXQubWluTW92ZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICAvLyBGdW5jdGlvbiB0byBnZXQgZGVmYXVsdCBwcmljZSBmb3JtYXQgYmFzZWQgb24gYmFzZSB0b2tlblxuICBjb25zdCBnZXREZWZhdWx0UHJpY2UgPSB1c2VDYWxsYmFjaygoYmFzZVRva2VuOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYmFzZVRva2VuLnRvVXBwZXJDYXNlKCkgPT09ICdCVEMnID8gJzAuMDAwMDAwMDAnIDogJzAuMDAnO1xuICB9LCBbXSk7XG5cbiAgLy8gTWFpbiBjaGFydCBpbml0aWFsaXphdGlvbiBlZmZlY3RcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGNvbnN0IGNoYXJ0T3B0aW9uczogRGVlcFBhcnRpYWw8Q2hhcnRPcHRpb25zPiA9IHtcbiAgICAgIGxheW91dDoge1xuICAgICAgICBiYWNrZ3JvdW5kOiB7IGNvbG9yOiAnIzFFMjIyRCcgfSxcbiAgICAgICAgdGV4dENvbG9yOiAnI0RERCcsXG4gICAgICB9LFxuICAgICAgZ3JpZDoge1xuICAgICAgICB2ZXJ0TGluZXM6IHsgY29sb3I6ICcjMkIyQjQzJyB9LFxuICAgICAgICBob3J6TGluZXM6IHsgY29sb3I6ICcjMkIyQjQzJyB9LFxuICAgICAgfSxcbiAgICAgIHRpbWVTY2FsZToge1xuICAgICAgICBib3JkZXJDb2xvcjogJyMyQjJCNDMnLFxuICAgICAgICB0aW1lVmlzaWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICByaWdodFByaWNlU2NhbGU6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjMkIyQjQzJyxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgc2NhbGVNYXJnaW5zOiB7XG4gICAgICAgICAgdG9wOiAwLjEsXG4gICAgICAgICAgYm90dG9tOiAwLjQsXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9TY2FsZTogdHJ1ZSxcbiAgICAgICAgbW9kZTogMCwgLy8gTm9ybWFsIG1vZGUgaW5zdGVhZCBvZiBwZXJjZW50YWdlXG4gICAgICAgIGFsaWduTGFiZWxzOiB0cnVlLFxuICAgICAgICBib3JkZXJWaXNpYmxlOiB0cnVlLFxuICAgICAgICBlbnRpcmVUZXh0T25seTogdHJ1ZSxcbiAgICAgICAgdGlja3NWaXNpYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHdpZHRoOiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCxcbiAgICB9O1xuXG4gICAgY29uc3QgY2hhcnQgPSBjcmVhdGVDaGFydChjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LCBjaGFydE9wdGlvbnMpO1xuXG4gICAgLy8gQ3JlYXRlIGNhbmRsZXN0aWNrIHNlcmllcyB3aXRoIHByaWNlIGZvcm1hdFxuICAgIGNvbnN0IGNhbmRsZXN0aWNrU2VyaWVzID0gY2hhcnQuYWRkQ2FuZGxlc3RpY2tTZXJpZXMoe1xuICAgICAgdXBDb2xvcjogJyMyNmE2OWEnLFxuICAgICAgZG93bkNvbG9yOiAnI2VmNTM1MCcsXG4gICAgICBib3JkZXJWaXNpYmxlOiBmYWxzZSxcbiAgICAgIHdpY2tVcENvbG9yOiAnIzI2YTY5YScsXG4gICAgICB3aWNrRG93bkNvbG9yOiAnI2VmNTM1MCcsXG4gICAgICBwcmljZUZvcm1hdDogZ2V0Q2hhcnRQcmljZUZvcm1hdChiYXNlVG9rZW4pLFxuICAgIH0pO1xuXG4gICAgLy8gQ29uZmlndXJlIHRoZSBwcmljZSBzY2FsZVxuICAgIGNvbnN0IHByaWNlU2NhbGUgPSBjaGFydC5wcmljZVNjYWxlKCdyaWdodCcpO1xuICAgIHByaWNlU2NhbGUuYXBwbHlPcHRpb25zKHtcbiAgICAgIHNjYWxlTWFyZ2luczoge1xuICAgICAgICB0b3A6IDAuMSxcbiAgICAgICAgYm90dG9tOiAwLjQsXG4gICAgICB9LFxuICAgICAgYXV0b1NjYWxlOiB0cnVlLFxuICAgICAgbW9kZTogMCwgLy8gTm9ybWFsIG1vZGUgaW5zdGVhZCBvZiBwZXJjZW50YWdlXG4gICAgICBhbGlnbkxhYmVsczogdHJ1ZSxcbiAgICAgIGJvcmRlclZpc2libGU6IHRydWUsXG4gICAgICBlbnRpcmVUZXh0T25seTogdHJ1ZSxcbiAgICAgIHRpY2tzVmlzaWJsZTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIC8vIFNldCB0aGUgcHJpY2UgZm9ybWF0dGVyIGZvciB0aGUgc2NhbGVcbiAgICBjaGFydC5hcHBseU9wdGlvbnMoe1xuICAgICAgbG9jYWxpemF0aW9uOiB7XG4gICAgICAgIHByaWNlRm9ybWF0dGVyOiAocHJpY2U6IG51bWJlcikgPT4gZm9ybWF0UHJpY2UocHJpY2UsIGJhc2VUb2tlbiksXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgY2FuZGxlc3RpY2tTZXJpZXNSZWYuY3VycmVudCA9IGNhbmRsZXN0aWNrU2VyaWVzO1xuICAgIGNoYXJ0UmVmLmN1cnJlbnQgPSBjaGFydDtcblxuICAgIC8vIExvYWQgaW5pdGlhbCBkYXRhXG4gICAgY29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0SGlzdG9yaWNhbERhdGEodGltZWZyYW1lLCB0b2tlbiwgYmFzZVRva2VuKTtcbiAgICAgICAgaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudCA9IGRhdGE7XG4gICAgICAgIFxuICAgICAgICBjYW5kbGVzdGlja1Nlcmllcy5zZXREYXRhKGRhdGEpO1xuICAgICAgICB1cGRhdGVQcmljZVN0YXRzKGRhdGEpO1xuXG4gICAgICAgIGlmIChzdHJhdGVneSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzKGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBkYXRhOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbG9hZERhdGEoKTtcblxuICAgIC8vIFJlYWwtdGltZSB1cGRhdGVzXG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSBzdWJzY3JpYmVUb1ByaWNlKChkYXRhKSA9PiB7XG4gICAgICBpZiAoIWNhbmRsZXN0aWNrU2VyaWVzUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgY29uc3QgaW50ZXJ2YWxTZWNvbmRzID0gZ2V0SW50ZXJ2YWxTZWNvbmRzKHRpbWVmcmFtZSk7XG4gICAgICBjb25zdCBjYW5kbGVUaW1lc3RhbXAgPSBNYXRoLmZsb29yKGRhdGEudGltZSAvIGludGVydmFsU2Vjb25kcykgKiBpbnRlcnZhbFNlY29uZHM7XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSBuZXcgY2FuZGxlXG4gICAgICBpZiAoIWN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCB8fCBjYW5kbGVUaW1lc3RhbXAgIT09IGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC50aW1lKSB7XG4gICAgICAgIC8vIElmIHdlIGhhZCBhIHByZXZpb3VzIGNhbmRsZSwgYWRkIGl0IHRvIGhpc3RvcmljYWwgZGF0YSBhbmQgY2hlY2sgZm9yIHNpZ25hbHNcbiAgICAgICAgaWYgKGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudCkge1xuICAgICAgICAgIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQgPSBbLi4uaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudCwgY3VycmVudENhbmRsZVJlZi5jdXJyZW50XTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBVcGRhdGUgc3RyYXRlZ2llcyB3aXRoIHRoZSBuZXcgaGlzdG9yaWNhbCBkYXRhXG4gICAgICAgICAgaWYgKHN0cmF0ZWd5ICE9PSAnbm9uZScgJiYgY2hhcnRSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgYWRkU3RyYXRlZ3lJbmRpY2F0b3JzKGNoYXJ0UmVmLmN1cnJlbnQsIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IG5ldyBjYW5kbGVcbiAgICAgICAgY3VycmVudENhbmRsZVJlZi5jdXJyZW50ID0ge1xuICAgICAgICAgIHRpbWU6IGNhbmRsZVRpbWVzdGFtcCxcbiAgICAgICAgICBvcGVuOiBkYXRhLnZhbHVlLFxuICAgICAgICAgIGhpZ2g6IGRhdGEudmFsdWUsXG4gICAgICAgICAgbG93OiBkYXRhLnZhbHVlLFxuICAgICAgICAgIGNsb3NlOiBkYXRhLnZhbHVlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVcGRhdGUgY3VycmVudCBjYW5kbGVcbiAgICAgICAgY3VycmVudENhbmRsZVJlZi5jdXJyZW50LmhpZ2ggPSBNYXRoLm1heChjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQuaGlnaCwgZGF0YS52YWx1ZSk7XG4gICAgICAgIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudC5sb3cgPSBNYXRoLm1pbihjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQubG93LCBkYXRhLnZhbHVlKTtcbiAgICAgICAgY3VycmVudENhbmRsZVJlZi5jdXJyZW50LmNsb3NlID0gZGF0YS52YWx1ZTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgcmVhbC10aW1lIHNpZ25hbHMgd2l0aCBjdXJyZW50IGNhbmRsZVxuICAgICAgICBpZiAoc3RyYXRlZ3kgIT09ICdub25lJyAmJiBjaGFydFJlZi5jdXJyZW50ICYmIGhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZWREYXRhID0gWy4uLmhpc3RvcmljYWxEYXRhUmVmLmN1cnJlbnQsIGN1cnJlbnRDYW5kbGVSZWYuY3VycmVudF07XG4gICAgICAgICAgY2hlY2tSZWFsVGltZVNpZ25hbCh1cGRhdGVkRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHRoZSBjaGFydCB3aXRoIGN1cnJlbnQgY2FuZGxlXG4gICAgICBjYW5kbGVzdGlja1Nlcmllc1JlZi5jdXJyZW50LnVwZGF0ZShjdXJyZW50Q2FuZGxlUmVmLmN1cnJlbnQpO1xuXG4gICAgICAvLyBVcGRhdGUgcHJpY2Ugc3RhdHMgd2l0aCB0aGUgbGF0ZXN0IGRhdGFcbiAgICAgIGlmIChoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXBkYXRlUHJpY2VTdGF0cyhbLi4uaGlzdG9yaWNhbERhdGFSZWYuY3VycmVudCwgY3VycmVudENhbmRsZVJlZi5jdXJyZW50XSk7XG4gICAgICB9XG4gICAgfSwgdGltZWZyYW1lLCB0b2tlbiwgYmFzZVRva2VuKTtcblxuICAgIC8vIEhhbmRsZSB3aW5kb3cgcmVzaXplXG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgaWYgKGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQgJiYgY2hhcnRSZWYuY3VycmVudCkge1xuICAgICAgICBjaGFydFJlZi5jdXJyZW50LmFwcGx5T3B0aW9ucyh7XG4gICAgICAgICAgd2lkdGg6IGNoYXJ0Q29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBjaGFydENvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuXG4gICAgLy8gUmVtb3ZlIFRyYWRpbmdWaWV3IGxvZ28gZWxlbWVudHNcbiAgICBjb25zdCByZW1vdmVUcmFkaW5nVmlld0xvZ28gPSAoKSA9PiB7XG4gICAgICBjb25zdCBsb2dvRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0di1hdHRyLWxvZ28nKTtcbiAgICAgIGlmIChsb2dvRWxlbWVudCkge1xuICAgICAgICBsb2dvRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaGVhZGVyTG9nbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50di1oZWFkZXJfX2xpbmsnKTtcbiAgICAgIGlmIChoZWFkZXJMb2dvKSB7XG4gICAgICAgIGhlYWRlckxvZ28ucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFJ1biBsb2dvIHJlbW92YWwgYWZ0ZXIgY2hhcnQgaXMgY3JlYXRlZCBhbmQgYWZ0ZXIgYSBkZWxheVxuICAgIHJlbW92ZVRyYWRpbmdWaWV3TG9nbygpO1xuICAgIGNvbnN0IGxvZ29UaW1lb3V0SWQgPSBzZXRUaW1lb3V0KHJlbW92ZVRyYWRpbmdWaWV3TG9nbywgMTAwKTtcblxuICAgIC8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBpbmRpY2F0b3Igc2VyaWVzIHdpdGggY29ycmVjdCBwcmljZSBmb3JtYXRcbiAgICBjb25zdCBjcmVhdGVJbmRpY2F0b3JTZXJpZXMgPSAoXG4gICAgICB0eXBlOiAnbGluZScgfCAnaGlzdG9ncmFtJyxcbiAgICAgIG9wdGlvbnM6IGFueVxuICAgICkgPT4ge1xuICAgICAgY29uc3QgcHJpY2VDb25maWcgPSBnZXRQcmljZUZvcm1hdChiYXNlVG9rZW4pO1xuICAgICAgY29uc3Qgc2VyaWVzT3B0aW9ucyA9IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgcHJpY2VGb3JtYXQ6IHtcbiAgICAgICAgICB0eXBlOiAncHJpY2UnLFxuICAgICAgICAgIHByZWNpc2lvbjogcHJpY2VDb25maWcucHJlY2lzaW9uLFxuICAgICAgICAgIG1pbk1vdmU6IHByaWNlQ29uZmlnLm1pbk1vdmUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ2xpbmUnIFxuICAgICAgICA/IGNoYXJ0LmFkZExpbmVTZXJpZXMoc2VyaWVzT3B0aW9ucylcbiAgICAgICAgOiBjaGFydC5hZGRIaXN0b2dyYW1TZXJpZXMoc2VyaWVzT3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBNQUNEIHNlcmllcyB3aXRoIHByb3BlciBwcmljZSBmb3JtYXR0aW5nXG4gICAgaWYgKHN0cmF0ZWd5ID09PSAnbWFjZF9jcm9zc292ZXInKSB7XG4gICAgICBjb25zdCBtYWNkU2VyaWVzID0gY3JlYXRlSW5kaWNhdG9yU2VyaWVzKCdsaW5lJywge1xuICAgICAgICBjb2xvcjogJyMyOTYyRkYnLFxuICAgICAgICBsaW5lV2lkdGg6IDIsXG4gICAgICAgIHRpdGxlOiAnTUFDRCcsXG4gICAgICAgIHByaWNlU2NhbGVJZDogJ292ZXJsYXknLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNpZ25hbFNlcmllcyA9IGNyZWF0ZUluZGljYXRvclNlcmllcygnbGluZScsIHtcbiAgICAgICAgY29sb3I6ICcjRkY2QjZCJyxcbiAgICAgICAgbGluZVdpZHRoOiAyLFxuICAgICAgICB0aXRsZTogJ1NpZ25hbCcsXG4gICAgICAgIHByaWNlU2NhbGVJZDogJ292ZXJsYXknLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGhpc3RvZ3JhbVNlcmllcyA9IGNyZWF0ZUluZGljYXRvclNlcmllcygnaGlzdG9ncmFtJywge1xuICAgICAgICBjb2xvcjogJyMyNmE2OWEnLFxuICAgICAgICB0aXRsZTogJ0hpc3RvZ3JhbScsXG4gICAgICAgIHByaWNlU2NhbGVJZDogJ292ZXJsYXknLFxuICAgICAgICBiYXNlOiAwLFxuICAgICAgfSk7XG5cbiAgICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5zZXQoJ01BQ0QnLCBtYWNkU2VyaWVzKTtcbiAgICAgIGluZGljYXRvclNlcmllc1JlZnMuY3VycmVudC5zZXQoJ1NpZ25hbCcsIHNpZ25hbFNlcmllcyk7XG4gICAgICBpbmRpY2F0b3JTZXJpZXNSZWZzLmN1cnJlbnQuc2V0KCdIaXN0b2dyYW0nLCBoaXN0b2dyYW1TZXJpZXMpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgIGNsZWFyVGltZW91dChsb2dvVGltZW91dElkKTtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICBjaGFydC5yZW1vdmUoKTtcbiAgICB9O1xuICB9LCBbdGltZWZyYW1lXSk7XG5cbiAgLy8gSGFuZGxlIHRyYWRpbmcgcGFpciBjaGFuZ2VcbiAgY29uc3QgaGFuZGxlUGFpckNoYW5nZSA9IHVzZUNhbGxiYWNrKChuZXdUb2tlbjogc3RyaW5nLCBuZXdCYXNlVG9rZW46IHN0cmluZykgPT4ge1xuICAgIG9uUGFpckNoYW5nZShuZXdUb2tlbiwgbmV3QmFzZVRva2VuKTtcbiAgICBcbiAgICAvLyBSZXNldCBwcmljZSBzdGF0ZXMgd2l0aCBjb3JyZWN0IGZvcm1hdCBmb3IgdGhlIG5ldyBiYXNlIHRva2VuXG4gICAgY29uc3QgZGVmYXVsdFByaWNlID0gZ2V0RGVmYXVsdFByaWNlKG5ld0Jhc2VUb2tlbik7XG4gICAgc2V0Q3VycmVudFByaWNlKGRlZmF1bHRQcmljZSk7XG4gICAgc2V0UHJpY2VTdGF0cyh7XG4gICAgICBjaGFuZ2UyNGg6IGRlZmF1bHRQcmljZSxcbiAgICAgIGhpZ2gyNGg6IGRlZmF1bHRQcmljZSxcbiAgICAgIGxvdzI0aDogZGVmYXVsdFByaWNlXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgY2hhcnQgPSBjaGFydFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNhbmRsZXN0aWNrU2VyaWVzID0gY2FuZGxlc3RpY2tTZXJpZXNSZWYuY3VycmVudDtcbiAgICBcbiAgICBpZiAoIWNoYXJ0IHx8ICFjYW5kbGVzdGlja1NlcmllcykgcmV0dXJuO1xuXG4gICAgY29uc3QgbG9hZE5ld0RhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBVcGRhdGUgY2FuZGxlc3RpY2sgc2VyaWVzIHByaWNlIGZvcm1hdFxuICAgICAgICBjYW5kbGVzdGlja1Nlcmllcy5hcHBseU9wdGlvbnMoe1xuICAgICAgICAgIHByaWNlRm9ybWF0OiBnZXRDaGFydFByaWNlRm9ybWF0KG5ld0Jhc2VUb2tlbiksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBwcmljZSBzY2FsZSBmb3JtYXRcbiAgICAgICAgY2hhcnQuYXBwbHlPcHRpb25zKHtcbiAgICAgICAgICBsb2NhbGl6YXRpb246IHtcbiAgICAgICAgICAgIHByaWNlRm9ybWF0dGVyOiBnZXRDaGFydFByaWNlRm9ybWF0KG5ld0Jhc2VUb2tlbikuZm9ybWF0dGVyLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBpbmRpY2F0b3Igc2VyaWVzIHByaWNlIGZvcm1hdHNcbiAgICAgICAgaW5kaWNhdG9yU2VyaWVzUmVmcy5jdXJyZW50LmZvckVhY2goc2VyaWVzID0+IHtcbiAgICAgICAgICBzZXJpZXMuYXBwbHlPcHRpb25zKHtcbiAgICAgICAgICAgIHByaWNlRm9ybWF0OiBnZXRDaGFydFByaWNlRm9ybWF0KG5ld0Jhc2VUb2tlbiksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRIaXN0b3JpY2FsRGF0YSh0aW1lZnJhbWUsIG5ld1Rva2VuLCBuZXdCYXNlVG9rZW4pO1xuICAgICAgICBoaXN0b3JpY2FsRGF0YVJlZi5jdXJyZW50ID0gZGF0YTtcbiAgICAgICAgXG4gICAgICAgIGNhbmRsZXN0aWNrU2VyaWVzLnNldERhdGEoZGF0YSk7XG4gICAgICAgIHVwZGF0ZVByaWNlU3RhdHMoZGF0YSk7XG5cbiAgICAgICAgaWYgKHN0cmF0ZWd5ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICBhZGRTdHJhdGVneUluZGljYXRvcnMoY2hhcnQsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yY2UgY2hhcnQgdG8gcmVjYWxjdWxhdGUgcHJpY2Ugc2NhbGVcbiAgICAgICAgY2hhcnQudGltZVNjYWxlKCkuZml0Q29udGVudCgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBkYXRhOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbG9hZE5ld0RhdGEoKTtcbiAgfSwgW3RpbWVmcmFtZSwgc3RyYXRlZ3ksIHVwZGF0ZVByaWNlU3RhdHMsIG9uUGFpckNoYW5nZSwgZ2V0RGVmYXVsdFByaWNlXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgdy1mdWxsIGgtZnVsbFwiPlxuICAgICAgPFRpY2tlckhlYWRlclxuICAgICAgICB0b2tlbj17dG9rZW59XG4gICAgICAgIGJhc2VUb2tlbj17YmFzZVRva2VufVxuICAgICAgICBleGNoYW5nZT17ZXhjaGFuZ2V9XG4gICAgICAgIGN1cnJlbnRQcmljZT17Y3VycmVudFByaWNlfVxuICAgICAgICBwcmljZVN0YXRzPXtwcmljZVN0YXRzfVxuICAgICAgICBvbkV4Y2hhbmdlQ2hhbmdlPXtzZXRTZWxlY3RlZEV4Y2hhbmdlfVxuICAgICAgICBvblBhaXJDaGFuZ2U9e2hhbmRsZVBhaXJDaGFuZ2V9XG4gICAgICAvPlxuICAgICAgPGRpdiByZWY9e2NoYXJ0Q29udGFpbmVyUmVmfSBjbGFzc05hbWU9XCJmbGV4LTFcIiAvPlxuICAgIDwvZGl2PlxuICApO1xufSAiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsImNyZWF0ZUNoYXJ0IiwiZ2V0SGlzdG9yaWNhbERhdGEiLCJzdWJzY3JpYmVUb1ByaWNlIiwiZ2V0U3RyYXRlZ3kiLCJjYWxjdWxhdGVFTUEiLCJjYWxjdWxhdGVTTUEiLCJjYWxjdWxhdGVURU1BIiwiY2FsY3VsYXRlSE1BIiwiY2FsY3VsYXRlTUFDRCIsIlRpY2tlckhlYWRlciIsImdldENoYXJ0UHJpY2VGb3JtYXQiLCJDYW5kbGVzdGlja0NoYXJ0IiwidGltZWZyYW1lIiwic3RyYXRlZ3kiLCJ0b2tlbiIsImJhc2VUb2tlbiIsImV4Y2hhbmdlIiwib25QYWlyQ2hhbmdlIiwic2VsZWN0ZWRFeGNoYW5nZSIsInNldFNlbGVjdGVkRXhjaGFuZ2UiLCJzZWxlY3RlZEJhc2VUb2tlbiIsInNldFNlbGVjdGVkQmFzZVRva2VuIiwiY3VycmVudFByaWNlIiwic2V0Q3VycmVudFByaWNlIiwiZ2V0RGVmYXVsdFByaWNlIiwicHJpY2VTdGF0cyIsInNldFByaWNlU3RhdHMiLCJjaGFuZ2UyNGgiLCJoaWdoMjRoIiwibG93MjRoIiwiY2hhcnRDb250YWluZXJSZWYiLCJjaGFydFJlZiIsImNhbmRsZXN0aWNrU2VyaWVzUmVmIiwiaW5kaWNhdG9yU2VyaWVzUmVmcyIsIk1hcCIsIm1hcmtlclNlcmllc1JlZiIsImhpc3RvcmljYWxEYXRhUmVmIiwiY3VycmVudENhbmRsZVJlZiIsImxhc3RTaWduYWxSZWYiLCJnZXRJbnRlcnZhbFNlY29uZHMiLCJ0ZiIsInNhZmVseVJlbW92ZVNlcmllcyIsImNoYXJ0Iiwic2VyaWVzIiwicmVtb3ZlU2VyaWVzIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImdldERlY2ltYWxQbGFjZXMiLCJnZXRNaW5Nb3ZlIiwidG9VcHBlckNhc2UiLCJmb3JtYXRQcmljZSIsInByaWNlIiwidG9GaXhlZCIsImZvcm1hdFNpZ25hbFRleHQiLCJ0eXBlIiwiY2hlY2tGb3JTaWduYWwiLCJwcmV2RmFzdCIsInByZXZTbG93IiwiY3VyckZhc3QiLCJjdXJyU2xvdyIsImNhbmRsZSIsImRhdGEiLCJpc05hTiIsInByZXZIaXN0b2dyYW0iLCJjdXJySGlzdG9ncmFtIiwidGltZSIsInBvc2l0aW9uIiwiY29sb3IiLCJzaGFwZSIsInRleHQiLCJjbG9zZSIsInNpemUiLCJ2YWx1ZSIsImxvdyIsImhpZ2giLCJhdmdQcmljZSIsInJlZHVjZSIsInN1bSIsImQiLCJsZW5ndGgiLCJwcmljZVJhbmdlIiwicmFuZ2UiLCJNYXRoIiwibWF4IiwiYWJzIiwib2Zmc2V0IiwibWluIiwic2xpY2UiLCJtYXAiLCJnZXRIaXN0b2dyYW1TY2FsZUZhY3RvciIsIm1heEhpc3RvZ3JhbSIsImFkZFN0cmF0ZWd5SW5kaWNhdG9ycyIsImxvZyIsImN1cnJlbnQiLCJmb3JFYWNoIiwiY2xlYXIiLCJ1bmlxdWVEYXRhIiwiQXJyYXkiLCJmcm9tIiwiaXRlbSIsInZhbHVlcyIsInNvcnQiLCJhIiwiYiIsInByaWNlcyIsImZhc3RMaW5lIiwic2xvd0xpbmUiLCJoaXN0b2dyYW1EYXRhIiwibWFjZERhdGEiLCJtYWNkIiwic2lnbmFsIiwiaGlzdG9ncmFtIiwic2VsZWN0ZWRTdHJhdGVneSIsIm1hY2RTZXJpZXMiLCJhZGRMaW5lU2VyaWVzIiwibGluZVdpZHRoIiwidGl0bGUiLCJwcmljZUZvcm1hdCIsInByZWNpc2lvbiIsIm1pbk1vdmUiLCJwcmljZVNjYWxlSWQiLCJzaWduYWxTZXJpZXMiLCJoaXN0b2dyYW1TZXJpZXMiLCJhZGRIaXN0b2dyYW1TZXJpZXMiLCJiYXNlIiwibWFjZFNjYWxlIiwicHJpY2VTY2FsZSIsImFwcGx5T3B0aW9ucyIsInNjYWxlTWFyZ2lucyIsInRvcCIsImJvdHRvbSIsInZpc2libGUiLCJib3JkZXJWaXNpYmxlIiwic2V0IiwibWFjZExpbmVEYXRhIiwiaWR4IiwiZmlsdGVyIiwic2lnbmFsTGluZURhdGEiLCJzY2FsZUZhY3RvciIsImhpc3RvZ3JhbVNlcmllc0RhdGEiLCJzZXREYXRhIiwibGFzdE1BQ0QiLCJsYXN0U2lnbmFsIiwibGFzdEhpc3RvZ3JhbSIsInVwZGF0ZSIsImNvbG9ycyIsImluZGljYXRvcnMiLCJpbmRpY2F0b3IiLCJpbmRleCIsImxpbmVTZXJpZXMiLCJuYW1lIiwibGluZURhdGEiLCJsYXN0VmFsdWVWaXNpYmxlIiwicHJpY2VMaW5lVmlzaWJsZSIsImNyb3NzaGFpck1hcmtlclZpc2libGUiLCJsaW5lVmlzaWJsZSIsInNpZ25hbHMiLCJpIiwicHVzaCIsInNvcnRlZFNpZ25hbHMiLCJzZXRNYXJrZXJzIiwiY2hlY2tSZWFsVGltZVNpZ25hbCIsImdldCIsImV4aXN0aW5nTWFya2VycyIsIm1hcmtlcnMiLCJuZXdNYXJrZXJzIiwibWFya2VyIiwidXBkYXRlUHJpY2VTdGF0cyIsImxhc3QyNGgiLCJjYW5kbGVzdGlja1NlcmllcyIsIm9wdGlvbnMiLCJmb3JtYXR0ZWRDdXJyZW50UHJpY2UiLCJmb3JtYXR0ZWRIaWdoIiwiZm9ybWF0dGVkTG93IiwiZ2V0UHJpY2VGb3JtYXQiLCJpc0JUQ1BhaXIiLCJmb3JtYXQiLCJjcmVhdGVTZXJpZXNXaXRoRm9ybWF0IiwiYWRkQ2FuZGxlc3RpY2tTZXJpZXMiLCJjaGFydE9wdGlvbnMiLCJsYXlvdXQiLCJiYWNrZ3JvdW5kIiwidGV4dENvbG9yIiwiZ3JpZCIsInZlcnRMaW5lcyIsImhvcnpMaW5lcyIsInRpbWVTY2FsZSIsImJvcmRlckNvbG9yIiwidGltZVZpc2libGUiLCJyaWdodFByaWNlU2NhbGUiLCJhdXRvU2NhbGUiLCJtb2RlIiwiYWxpZ25MYWJlbHMiLCJlbnRpcmVUZXh0T25seSIsInRpY2tzVmlzaWJsZSIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ1cENvbG9yIiwiZG93bkNvbG9yIiwid2lja1VwQ29sb3IiLCJ3aWNrRG93bkNvbG9yIiwibG9jYWxpemF0aW9uIiwicHJpY2VGb3JtYXR0ZXIiLCJsb2FkRGF0YSIsInVuc3Vic2NyaWJlIiwiaW50ZXJ2YWxTZWNvbmRzIiwiY2FuZGxlVGltZXN0YW1wIiwiZmxvb3IiLCJvcGVuIiwidXBkYXRlZERhdGEiLCJoYW5kbGVSZXNpemUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlVHJhZGluZ1ZpZXdMb2dvIiwibG9nb0VsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicmVtb3ZlIiwiaGVhZGVyTG9nbyIsInF1ZXJ5U2VsZWN0b3IiLCJsb2dvVGltZW91dElkIiwic2V0VGltZW91dCIsImNyZWF0ZUluZGljYXRvclNlcmllcyIsInByaWNlQ29uZmlnIiwic2VyaWVzT3B0aW9ucyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGVQYWlyQ2hhbmdlIiwibmV3VG9rZW4iLCJuZXdCYXNlVG9rZW4iLCJkZWZhdWx0UHJpY2UiLCJsb2FkTmV3RGF0YSIsImZvcm1hdHRlciIsImZpdENvbnRlbnQiLCJkaXYiLCJjbGFzc05hbWUiLCJvbkV4Y2hhbmdlQ2hhbmdlIiwicmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ })

});