"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx":
/*!***************************************************!*\
  !*** ./src/components/Chart/CandlestickChart.tsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandlestickChart: function() { return /* binding */ CandlestickChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lightweight_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lightweight-charts */ \"(app-pages-browser)/./node_modules/lightweight-charts/dist/lightweight-charts.development.mjs\");\n/* harmony import */ var _services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/api/cryptoCompareAPI */ \"(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\");\n/* harmony import */ var _services_strategies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/strategies */ \"(app-pages-browser)/./src/services/strategies/index.ts\");\n/* harmony import */ var _services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/strategies/moving-averages */ \"(app-pages-browser)/./src/services/strategies/moving-averages.ts\");\n/* harmony import */ var _TickerHeader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TickerHeader */ \"(app-pages-browser)/./src/components/Chart/TickerHeader.tsx\");\n/* harmony import */ var _utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/priceFormat */ \"(app-pages-browser)/./src/utils/priceFormat.ts\");\n/* __next_internal_client_entry_do_not_use__ CandlestickChart auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nfunction CandlestickChart(param) {\n    let { timeframe, strategy, token = \"BTC\", baseToken = \"USDT\", exchange = \"CryptoCompare\", onPairChange = ()=>{} } = param;\n    _s();\n    const [selectedExchange, setSelectedExchange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(exchange);\n    const [selectedBaseToken, setSelectedBaseToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(baseToken);\n    const [currentPrice, setCurrentPrice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"0.00\");\n    const [priceStats, setPriceStats] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        change24h: \"0.00\",\n        high24h: \"0.00\",\n        low24h: \"0.00\"\n    });\n    const chartContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const candlestickSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const indicatorSeriesRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const markerSeriesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const historicalDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const currentCandleRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastSignalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Function to get interval in seconds\n    const getIntervalSeconds = (tf)=>{\n        switch(tf){\n            case \"1m\":\n                return 60;\n            case \"5m\":\n                return 300;\n            case \"15m\":\n                return 900;\n            case \"30m\":\n                return 1800;\n            case \"1h\":\n                return 3600;\n            case \"4h\":\n                return 14400;\n            case \"1d\":\n                return 86400;\n            default:\n                return 60;\n        }\n    };\n    // Function to safely remove a series\n    const safelyRemoveSeries = (chart, series)=>{\n        try {\n            if (series && chart) {\n                chart.removeSeries(series);\n            }\n        } catch (e) {\n            console.error(\"Error removing series:\", e);\n        }\n    };\n    // Function to get appropriate decimal places based on base token\n    const getDecimalPlaces = (baseToken)=>{\n        return baseToken === \"BTC\" ? 8 : 2;\n    };\n    // Function to get appropriate min move based on base token\n    const getMinMove = (baseToken)=>{\n        return baseToken.toUpperCase() === \"BTC\" ? 0.00000001 : 0.01;\n    };\n    // Function to format price based on base token\n    const formatPrice = (price, baseToken)=>{\n        if (baseToken === \"BTC\") {\n            return price.toFixed(8); // Show 8 decimal places for BTC pairs\n        }\n        return price.toFixed(2); // Show 2 decimal places for other pairs\n    };\n    // Function to format signal text\n    const formatSignalText = (type, price, baseToken)=>{\n        return \"\".concat(type, \" \").concat(formatPrice(price, baseToken));\n    };\n    // Function to check for crossover signals\n    const checkForSignal = (prevFast, prevSlow, currFast, currSlow, candle, data)=>{\n        if (!isNaN(prevFast) && !isNaN(prevSlow) && !isNaN(currFast) && !isNaN(currSlow)) {\n            if (strategy === \"macd_crossover\") {\n                const prevHistogram = prevFast - prevSlow;\n                const currHistogram = currFast - currSlow;\n                if (prevHistogram <= 0 && currHistogram > 0) {\n                    return {\n                        time: candle.time,\n                        position: \"belowBar\",\n                        color: \"#26a69a\",\n                        shape: \"arrowUp\",\n                        text: formatSignalText(\"Buy\", candle.close, baseToken),\n                        size: 2,\n                        value: candle.low * 0.999\n                    };\n                } else if (prevHistogram >= 0 && currHistogram < 0) {\n                    return {\n                        time: candle.time,\n                        position: \"aboveBar\",\n                        color: \"#ef5350\",\n                        shape: \"arrowDown\",\n                        text: formatSignalText(\"Sell\", candle.close, baseToken),\n                        size: 2,\n                        value: candle.high * 1.001\n                    };\n                }\n            } else {\n                const avgPrice = data.reduce((sum, d)=>sum + d.close, 0) / data.length;\n                const priceRange = data.reduce((range, d)=>Math.max(range, Math.abs(d.high - d.low)), 0);\n                const offset = priceRange * 0.75;\n                if (prevFast <= prevSlow && currFast > currSlow) {\n                    return {\n                        time: candle.time,\n                        position: \"belowBar\",\n                        color: \"#26a69a\",\n                        shape: \"arrowUp\",\n                        text: formatSignalText(\"Buy\", candle.close, baseToken),\n                        size: 2,\n                        value: Math.min(...data.slice(-10).map((d)=>d.low)) - offset\n                    };\n                } else if (prevFast >= prevSlow && currFast < currSlow) {\n                    return {\n                        time: candle.time,\n                        position: \"aboveBar\",\n                        color: \"#ef5350\",\n                        shape: \"arrowDown\",\n                        text: formatSignalText(\"Sell\", candle.close, baseToken),\n                        size: 2,\n                        value: Math.max(...data.slice(-10).map((d)=>d.high)) + offset\n                    };\n                }\n            }\n        }\n        return null;\n    };\n    // Function to get histogram scale factor based on timeframe\n    const getHistogramScaleFactor = (tf, maxHistogram)=>{\n        if (maxHistogram === 0) return 1;\n        switch(tf){\n            case \"1h\":\n            case \"4h\":\n            case \"1d\":\n            case \"1w\":\n                return 100 / maxHistogram; // Much larger scaling for higher timeframes\n            default:\n                return 20 / maxHistogram; // Original scaling for lower timeframes\n        }\n    };\n    // Function to add strategy indicators\n    const addStrategyIndicators = (chart, data)=>{\n        console.log(\"Adding strategy indicators\");\n        // Clear any existing indicators\n        indicatorSeriesRefs.current.forEach((series)=>safelyRemoveSeries(chart, series));\n        indicatorSeriesRefs.current.clear();\n        if (markerSeriesRef.current) {\n            safelyRemoveSeries(chart, markerSeriesRef.current);\n            markerSeriesRef.current = null;\n        }\n        if (strategy === \"none\") return;\n        // Ensure data is sorted and deduplicated by time\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        let histogramData = [];\n        // Calculate indicators based on strategy type\n        if (strategy === \"macd_crossover\") {\n            const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n            fastLine = macdData.macd;\n            slowLine = macdData.signal;\n            histogramData = macdData.histogram;\n        } else {\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n        }\n        // Add indicator lines\n        const selectedStrategy = (0,_services_strategies__WEBPACK_IMPORTED_MODULE_4__.getStrategy)(strategy);\n        if (!selectedStrategy) return;\n        if (strategy === \"macd_crossover\") {\n            // Create MACD series with separate price scale\n            const macdSeries = chart.addLineSeries({\n                color: \"#2962FF\",\n                lineWidth: 2,\n                title: \"MACD\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\"\n            });\n            const signalSeries = chart.addLineSeries({\n                color: \"#FF6B6B\",\n                lineWidth: 2,\n                title: \"Signal\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\"\n            });\n            const histogramSeries = chart.addHistogramSeries({\n                color: \"#26a69a\",\n                title: \"Histogram\",\n                priceFormat: {\n                    type: \"price\",\n                    precision: getDecimalPlaces(baseToken),\n                    minMove: getMinMove(baseToken)\n                },\n                priceScaleId: \"overlay\",\n                base: 0\n            });\n            // Configure the price scale for MACD\n            const macdScale = chart.priceScale(\"overlay\");\n            if (macdScale) {\n                macdScale.applyOptions({\n                    scaleMargins: {\n                        top: 0.7,\n                        bottom: 0.1\n                    },\n                    visible: true,\n                    borderVisible: true\n                });\n            }\n            indicatorSeriesRefs.current.set(\"MACD\", macdSeries);\n            indicatorSeriesRefs.current.set(\"Signal\", signalSeries);\n            indicatorSeriesRefs.current.set(\"Histogram\", histogramSeries);\n            // Set data for each series\n            const macdLineData = fastLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            const signalLineData = slowLine.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value\n                })).filter((d)=>d.value !== null);\n            // Scale histogram values with dynamic scaling\n            const maxHistogram = Math.max(...histogramData.map(Math.abs));\n            const scaleFactor = getHistogramScaleFactor(timeframe, maxHistogram);\n            const histogramSeriesData = histogramData.map((value, idx)=>({\n                    time: uniqueData[idx].time,\n                    value: isNaN(value) ? null : value * scaleFactor,\n                    color: value >= 0 ? \"#26a69a\" : \"#ef5350\"\n                })).filter((d)=>d.value !== null);\n            macdSeries.setData(macdLineData);\n            signalSeries.setData(signalLineData);\n            histogramSeries.setData(histogramSeriesData);\n            // Also update the real-time update scaling factor\n            if (macdSeries && signalSeries && histogramSeries) {\n                const lastMACD = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: fastLine[fastLine.length - 1]\n                };\n                const lastSignal = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: slowLine[slowLine.length - 1]\n                };\n                const lastHistogram = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: histogramData[histogramData.length - 1] * scaleFactor,\n                    color: histogramData[histogramData.length - 1] >= 0 ? \"#26a69a\" : \"#ef5350\"\n                };\n                macdSeries.update(lastMACD);\n                signalSeries.update(lastSignal);\n                histogramSeries.update(lastHistogram);\n            }\n        } else {\n            // Handle other strategies\n            const colors = [\n                \"#2962FF\",\n                \"#FF6B6B\"\n            ];\n            selectedStrategy.indicators.forEach((indicator, index)=>{\n                const lineSeries = chart.addLineSeries({\n                    color: colors[index],\n                    lineWidth: 2,\n                    title: indicator.name,\n                    priceFormat: {\n                        type: \"price\",\n                        precision: getDecimalPlaces(baseToken),\n                        minMove: getMinMove(baseToken)\n                    }\n                });\n                indicatorSeriesRefs.current.set(indicator.name, lineSeries);\n                const lineData = (index === 0 ? fastLine : slowLine).map((value, idx)=>({\n                        time: uniqueData[idx].time,\n                        value: isNaN(value) ? null : value\n                    })).filter((d)=>d.value !== null).sort((a, b)=>a.time - b.time);\n                lineSeries.setData(lineData);\n            });\n        }\n        // Create marker series\n        markerSeriesRef.current = chart.addLineSeries({\n            lastValueVisible: false,\n            priceLineVisible: false,\n            crosshairMarkerVisible: false,\n            lineVisible: false,\n            lineWidth: 1,\n            color: \"rgba(0, 0, 0, 0)\",\n            priceScaleId: \"right\"\n        });\n        // Find and set signals\n        const signals = [];\n        for(let i = 1; i < uniqueData.length; i++){\n            const signal = checkForSignal(fastLine[i - 1], slowLine[i - 1], fastLine[i], slowLine[i], uniqueData[i], uniqueData.slice(Math.max(0, i - 10), i + 1));\n            if (signal) {\n                signals.push(signal);\n            }\n        }\n        if (signals.length > 0) {\n            const sortedSignals = signals.sort((a, b)=>a.time - b.time);\n            markerSeriesRef.current.setMarkers(sortedSignals);\n            markerSeriesRef.current.setData(sortedSignals.map((signal)=>({\n                    time: signal.time,\n                    value: signal.value\n                })));\n        }\n    };\n    // Modify the real-time signal check\n    const checkRealTimeSignal = (data)=>{\n        if (!markerSeriesRef.current || data.length < 2) return;\n        // Ensure data is sorted and deduplicated\n        const uniqueData = Array.from(new Map(data.map((item)=>[\n                item.time,\n                item\n            ])).values()).sort((a, b)=>a.time - b.time);\n        const prices = uniqueData.map((d)=>d.close);\n        let fastLine = [];\n        let slowLine = [];\n        let histogramData = [];\n        // Calculate indicators based on strategy type\n        if (strategy === \"macd_crossover\") {\n            const macdData = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateMACD)(prices);\n            fastLine = macdData.macd;\n            slowLine = macdData.signal;\n            histogramData = macdData.histogram;\n            // Update MACD series if they exist\n            const macdSeries = indicatorSeriesRefs.current.get(\"MACD\");\n            const signalSeries = indicatorSeriesRefs.current.get(\"Signal\");\n            const histogramSeries = indicatorSeriesRefs.current.get(\"Histogram\");\n            if (macdSeries && signalSeries && histogramSeries) {\n                // Scale histogram values with dynamic scaling\n                const maxHistogram = Math.max(...histogramData.map(Math.abs));\n                const scaleFactor = getHistogramScaleFactor(timeframe, maxHistogram);\n                const lastMACD = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: fastLine[fastLine.length - 1]\n                };\n                const lastSignal = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: slowLine[slowLine.length - 1]\n                };\n                const lastHistogram = {\n                    time: uniqueData[uniqueData.length - 1].time,\n                    value: histogramData[histogramData.length - 1] * scaleFactor,\n                    color: histogramData[histogramData.length - 1] >= 0 ? \"#26a69a\" : \"#ef5350\"\n                };\n                macdSeries.update(lastMACD);\n                signalSeries.update(lastSignal);\n                histogramSeries.update(lastHistogram);\n            }\n        } else {\n            switch(strategy){\n                case \"ema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 21);\n                    break;\n                case \"sma_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 21);\n                    break;\n                case \"tema_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 7);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateTEMA)(prices, 21);\n                    break;\n                case \"golden_cross\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 50);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateSMA)(prices, 200);\n                    break;\n                case \"hull_crossover\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 9);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateHMA)(prices, 21);\n                    break;\n                case \"ema_5_13\":\n                    fastLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 5);\n                    slowLine = (0,_services_strategies_moving_averages__WEBPACK_IMPORTED_MODULE_5__.calculateEMA)(prices, 13);\n                    break;\n            }\n        }\n        const signal = checkForSignal(fastLine[fastLine.length - 2], slowLine[slowLine.length - 2], fastLine[fastLine.length - 1], slowLine[slowLine.length - 1], uniqueData[uniqueData.length - 1], uniqueData.slice(-10));\n        if (signal) {\n            const existingMarkers = markerSeriesRef.current.markers() || [];\n            const newMarkers = [\n                ...existingMarkers,\n                signal\n            ].sort((a, b)=>a.time - b.time);\n            console.log(\"Adding real-time \".concat(signal.text, \" signal\"));\n            markerSeriesRef.current.setMarkers(newMarkers);\n            // Update marker series data\n            markerSeriesRef.current.setData(newMarkers.map((marker)=>({\n                    time: marker.time,\n                    value: marker.value\n                })));\n        }\n    };\n    // Function to update price stats\n    const updatePriceStats = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((data)=>{\n        if (data.length < 2) return;\n        const last24h = data.slice(-24); // Assuming hourly data\n        const currentPrice = last24h[last24h.length - 1].close;\n        const high24h = Math.max(...last24h.map((d)=>d.high));\n        const low24h = Math.min(...last24h.map((d)=>d.low));\n        // Get the candlestick series' price format\n        const candlestickSeries = candlestickSeriesRef.current;\n        if (!candlestickSeries) return;\n        const priceFormat = candlestickSeries.options().priceFormat;\n        if (!priceFormat) return;\n        // Format prices using the same precision and minMove as the chart\n        const formatPrice = (price)=>{\n            if (typeof price !== \"number\" || isNaN(price)) return \"0.00\";\n            return price.toFixed(priceFormat.precision);\n        };\n        // Update state with formatted values\n        const formattedCurrentPrice = formatPrice(currentPrice);\n        const formattedHigh = formatPrice(high24h);\n        const formattedLow = formatPrice(low24h);\n        setCurrentPrice(formattedCurrentPrice);\n        setPriceStats({\n            change24h: formattedCurrentPrice,\n            high24h: formattedHigh,\n            low24h: formattedLow\n        });\n    }, []);\n    // Effect for strategy changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (chartRef.current && historicalDataRef.current.length > 0) {\n            addStrategyIndicators(chartRef.current, historicalDataRef.current);\n        }\n    }, [\n        strategy\n    ]);\n    // Price format configuration\n    const getPriceFormat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((baseToken)=>{\n        const isBTCPair = baseToken === \"BTC\";\n        return {\n            type: \"price\",\n            precision: isBTCPair ? 8 : 2,\n            minMove: isBTCPair ? 0.00000001 : 0.01,\n            format: (price)=>{\n                if (typeof price !== \"number\" || isNaN(price)) {\n                    return isBTCPair ? \"0.00000000\" : \"0.00\";\n                }\n                return price.toFixed(isBTCPair ? 8 : 2);\n            }\n        };\n    }, []);\n    // Create series with price format\n    const createSeriesWithFormat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((chart, options, priceFormat)=>{\n        return chart.addCandlestickSeries({\n            ...options,\n            priceFormat: {\n                type: priceFormat.type,\n                precision: priceFormat.precision,\n                minMove: priceFormat.minMove\n            }\n        });\n    }, []);\n    // Main chart initialization effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!chartContainerRef.current) return;\n        const chartOptions = {\n            layout: {\n                background: {\n                    color: \"#1E222D\"\n                },\n                textColor: \"#DDD\"\n            },\n            grid: {\n                vertLines: {\n                    color: \"#2B2B43\"\n                },\n                horzLines: {\n                    color: \"#2B2B43\"\n                }\n            },\n            timeScale: {\n                borderColor: \"#2B2B43\",\n                timeVisible: true\n            },\n            rightPriceScale: {\n                borderColor: \"#2B2B43\",\n                visible: true,\n                scaleMargins: {\n                    top: 0.1,\n                    bottom: 0.4\n                },\n                autoScale: true,\n                mode: 0,\n                alignLabels: true,\n                borderVisible: true,\n                entireTextOnly: true,\n                ticksVisible: true\n            },\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight\n        };\n        const chart = (0,lightweight_charts__WEBPACK_IMPORTED_MODULE_2__.createChart)(chartContainerRef.current, chartOptions);\n        // Create candlestick series with price format\n        const candlestickSeries = chart.addCandlestickSeries({\n            upColor: \"#26a69a\",\n            downColor: \"#ef5350\",\n            borderVisible: false,\n            wickUpColor: \"#26a69a\",\n            wickDownColor: \"#ef5350\",\n            priceFormat: (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(baseToken)\n        });\n        // Configure the price scale\n        const priceScale = chart.priceScale(\"right\");\n        priceScale.applyOptions({\n            scaleMargins: {\n                top: 0.1,\n                bottom: 0.4\n            },\n            autoScale: true,\n            mode: 0,\n            alignLabels: true,\n            borderVisible: true,\n            entireTextOnly: true,\n            ticksVisible: true\n        });\n        // Set the price formatter for the scale\n        chart.applyOptions({\n            localization: {\n                priceFormatter: (price)=>formatPrice(price, baseToken)\n            }\n        });\n        candlestickSeriesRef.current = candlestickSeries;\n        chartRef.current = chart;\n        // Load initial data\n        const loadData = async ()=>{\n            try {\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe, token, baseToken);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                updatePriceStats(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadData();\n        // Real-time updates\n        const unsubscribe = (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.subscribeToPrice)((data)=>{\n            if (!candlestickSeriesRef.current) return;\n            const intervalSeconds = getIntervalSeconds(timeframe);\n            const candleTimestamp = Math.floor(data.time / intervalSeconds) * intervalSeconds;\n            // If this is a new candle\n            if (!currentCandleRef.current || candleTimestamp !== currentCandleRef.current.time) {\n                // If we had a previous candle, add it to historical data and check for signals\n                if (currentCandleRef.current) {\n                    historicalDataRef.current = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    // Update strategies with the new historical data\n                    if (strategy !== \"none\" && chartRef.current) {\n                        addStrategyIndicators(chartRef.current, historicalDataRef.current);\n                    }\n                }\n                // Start new candle\n                currentCandleRef.current = {\n                    time: candleTimestamp,\n                    open: data.value,\n                    high: data.value,\n                    low: data.value,\n                    close: data.value\n                };\n            } else {\n                // Update current candle\n                currentCandleRef.current.high = Math.max(currentCandleRef.current.high, data.value);\n                currentCandleRef.current.low = Math.min(currentCandleRef.current.low, data.value);\n                currentCandleRef.current.close = data.value;\n                // Check for real-time signals with current candle\n                if (strategy !== \"none\" && chartRef.current && historicalDataRef.current.length > 0) {\n                    const updatedData = [\n                        ...historicalDataRef.current,\n                        currentCandleRef.current\n                    ];\n                    checkRealTimeSignal(updatedData);\n                }\n            }\n            // Update the chart with current candle\n            candlestickSeriesRef.current.update(currentCandleRef.current);\n            // Update price stats with the latest data\n            if (historicalDataRef.current.length > 0) {\n                updatePriceStats([\n                    ...historicalDataRef.current,\n                    currentCandleRef.current\n                ]);\n            }\n        }, timeframe, token, baseToken);\n        // Handle window resize\n        const handleResize = ()=>{\n            if (chartContainerRef.current && chartRef.current) {\n                chartRef.current.applyOptions({\n                    width: chartContainerRef.current.clientWidth,\n                    height: chartContainerRef.current.clientHeight\n                });\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        // Remove TradingView logo elements\n        const removeTradingViewLogo = ()=>{\n            const logoElement = document.getElementById(\"tv-attr-logo\");\n            if (logoElement) {\n                logoElement.remove();\n            }\n            const headerLogo = document.querySelector(\".tv-header__link\");\n            if (headerLogo) {\n                headerLogo.remove();\n            }\n        };\n        // Run logo removal after chart is created and after a delay\n        removeTradingViewLogo();\n        const logoTimeoutId = setTimeout(removeTradingViewLogo, 100);\n        // Function to create indicator series with correct price format\n        const createIndicatorSeries = (type, options)=>{\n            const priceConfig = getPriceFormat(baseToken);\n            const seriesOptions = {\n                ...options,\n                priceFormat: {\n                    type: \"price\",\n                    precision: priceConfig.precision,\n                    minMove: priceConfig.minMove\n                }\n            };\n            return type === \"line\" ? chart.addLineSeries(seriesOptions) : chart.addHistogramSeries(seriesOptions);\n        };\n        // Add MACD series with proper price formatting\n        if (strategy === \"macd_crossover\") {\n            const macdSeries = createIndicatorSeries(\"line\", {\n                color: \"#2962FF\",\n                lineWidth: 2,\n                title: \"MACD\",\n                priceScaleId: \"overlay\"\n            });\n            const signalSeries = createIndicatorSeries(\"line\", {\n                color: \"#FF6B6B\",\n                lineWidth: 2,\n                title: \"Signal\",\n                priceScaleId: \"overlay\"\n            });\n            const histogramSeries = createIndicatorSeries(\"histogram\", {\n                color: \"#26a69a\",\n                title: \"Histogram\",\n                priceScaleId: \"overlay\",\n                base: 0\n            });\n            indicatorSeriesRefs.current.set(\"MACD\", macdSeries);\n            indicatorSeriesRefs.current.set(\"Signal\", signalSeries);\n            indicatorSeriesRefs.current.set(\"Histogram\", histogramSeries);\n        }\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(logoTimeoutId);\n            unsubscribe();\n            chart.remove();\n        };\n    }, [\n        timeframe\n    ]);\n    // Handle trading pair change\n    const handlePairChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newToken, newBaseToken)=>{\n        onPairChange(newToken, newBaseToken);\n        // Get price format configuration for the new base token\n        const priceFormat = (0,_utils_priceFormat__WEBPACK_IMPORTED_MODULE_7__.getChartPriceFormat)(newBaseToken);\n        const initialValue = priceFormat.formatter(0);\n        // Update initial price states with formatted values\n        setCurrentPrice(initialValue);\n        setPriceStats({\n            change24h: initialValue,\n            high24h: initialValue,\n            low24h: initialValue\n        });\n        const chart = chartRef.current;\n        const candlestickSeries = candlestickSeriesRef.current;\n        if (!chart || !candlestickSeries) return;\n        const loadNewData = async ()=>{\n            try {\n                // Update candlestick series price format\n                candlestickSeries.applyOptions({\n                    priceFormat: priceFormat\n                });\n                // Update price scale format\n                chart.applyOptions({\n                    localization: {\n                        priceFormatter: priceFormat.formatter\n                    }\n                });\n                // Update indicator series price formats\n                indicatorSeriesRefs.current.forEach((series)=>{\n                    series.applyOptions({\n                        priceFormat: priceFormat\n                    });\n                });\n                const data = await (0,_services_api_cryptoCompareAPI__WEBPACK_IMPORTED_MODULE_3__.getHistoricalData)(timeframe, newToken, newBaseToken);\n                historicalDataRef.current = data;\n                candlestickSeries.setData(data);\n                updatePriceStats(data);\n                if (strategy !== \"none\") {\n                    addStrategyIndicators(chart, data);\n                }\n                // Force chart to recalculate price scale\n                chart.timeScale().fitContent();\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            }\n        };\n        loadNewData();\n    }, [\n        timeframe,\n        strategy,\n        updatePriceStats,\n        onPairChange\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Update initial state format based on base token\n        setCurrentPrice(baseToken === \"BTC\" ? \"0.00000000\" : \"0.00\");\n        setPriceStats((prev)=>({\n                ...prev,\n                high24h: baseToken === \"BTC\" ? \"0.00000000\" : \"0.00\",\n                low24h: baseToken === \"BTC\" ? \"0.00000000\" : \"0.00\"\n            }));\n    }, [\n        baseToken\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TickerHeader__WEBPACK_IMPORTED_MODULE_6__.TickerHeader, {\n                token: token,\n                baseToken: baseToken,\n                exchange: exchange,\n                currentPrice: currentPrice,\n                priceStats: priceStats,\n                onExchangeChange: setSelectedExchange,\n                onPairChange: handlePairChange\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 905,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: chartContainerRef,\n                className: \"flex-1\"\n            }, void 0, false, {\n                fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n                lineNumber: 914,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"E:\\\\Programming\\\\ZugaCrypto\\\\src\\\\components\\\\Chart\\\\CandlestickChart.tsx\",\n        lineNumber: 904,\n        columnNumber: 5\n    }, this);\n}\n_s(CandlestickChart, \"XOnXbNj3z2pz0LEFha/4ZbugFw4=\");\n_c = CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Chart/CandlestickChart.tsx\n"));

/***/ })

});