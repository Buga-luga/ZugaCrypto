"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts":
/*!**********************************************!*\
  !*** ./src/services/api/cryptoCompareAPI.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHistoricalData: function() { return /* binding */ getHistoricalData; },\n/* harmony export */   isPairSupported: function() { return /* binding */ isPairSupported; },\n/* harmony export */   subscribeToPrice: function() { return /* binding */ subscribeToPrice; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_KEY = process.env.NEXT_PUBLIC_CRYPTOCOMPARE_API_KEY;\nconst BASE_URL = \"https://min-api.cryptocompare.com/data\";\n// Helper function to get the interval string for CryptoCompare API\nfunction getIntervalString(timeframe) {\n    switch(timeframe){\n        case \"1m\":\n            return \"histominute\";\n        case \"5m\":\n            return \"histominute\";\n        case \"15m\":\n            return \"histominute\";\n        case \"30m\":\n            return \"histominute\";\n        case \"1h\":\n            return \"histohour\";\n        case \"4h\":\n            return \"histohour\";\n        case \"1d\":\n            return \"histoday\";\n        case \"1w\":\n            return \"histoday\";\n        default:\n            return \"histominute\";\n    }\n}\n// Helper function to get the limit based on timeframe\nfunction getLimit(timeframe) {\n    switch(timeframe){\n        case \"1m\":\n            return 1440; // 24 hours\n        case \"5m\":\n            return 288; // 24 hours\n        case \"15m\":\n            return 96; // 24 hours\n        case \"30m\":\n            return 48; // 24 hours\n        case \"1h\":\n            return 168; // 7 days\n        case \"4h\":\n            return 180; // 30 days\n        case \"1d\":\n            return 365; // 1 year\n        case \"1w\":\n            return 52; // 1 year\n        default:\n            return 1440;\n    }\n}\n// Helper function to get the aggregate based on timeframe\nfunction getAggregate(timeframe) {\n    switch(timeframe){\n        case \"1m\":\n            return 1;\n        case \"5m\":\n            return 5;\n        case \"15m\":\n            return 15;\n        case \"30m\":\n            return 30;\n        case \"1h\":\n            return 1;\n        case \"4h\":\n            return 4;\n        case \"1d\":\n            return 1;\n        case \"1w\":\n            return 7;\n        default:\n            return 1;\n    }\n}\nasync function getHistoricalData(timeframe) {\n    let token = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"BTC\", baseToken = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"USDT\";\n    try {\n        const interval = getIntervalString(timeframe);\n        const limit = getLimit(timeframe);\n        const aggregate = getAggregate(timeframe);\n        const response = await fetch(\"\".concat(BASE_URL, \"/\").concat(interval, \"?fsym=\").concat(token, \"&tsym=\").concat(baseToken, \"&limit=\").concat(limit, \"&aggregate=\").concat(aggregate, \"&api_key=\").concat(API_KEY));\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (data.Response === \"Error\") {\n            throw new Error(data.Message);\n        }\n        return data.Data.map((d)=>({\n                time: d.time,\n                open: d.open,\n                high: d.high,\n                low: d.low,\n                close: d.close,\n                volume: d.volumefrom\n            }));\n    } catch (error) {\n        console.error(\"Error fetching historical data:\", error);\n        return [];\n    }\n}\nfunction subscribeToPrice(callback, timeframe) {\n    let token = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"BTC\", baseToken = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"USDT\";\n    let isSubscribed = true;\n    let pollInterval = null;\n    const POLL_INTERVAL = 2000; // Poll every 2 seconds\n    const fetchLatestPrice = async ()=>{\n        try {\n            const response = await fetch(\"\".concat(BASE_URL, \"/price?fsym=\").concat(token, \"&tsyms=\").concat(baseToken, \"&api_key=\").concat(API_KEY));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            if (data.Response === \"Error\") {\n                throw new Error(data.Message);\n            }\n            const price = data[baseToken];\n            if (price && !isNaN(price)) {\n                const timestamp = Math.floor(Date.now() / 1000);\n                console.log(\"Processing price update:\", {\n                    time: timestamp,\n                    value: price\n                });\n                callback({\n                    time: timestamp,\n                    value: price\n                });\n            }\n        } catch (error) {\n            console.error(\"Error fetching price:\", error);\n        }\n    };\n    // Start polling\n    const startPolling = ()=>{\n        // Fetch immediately\n        fetchLatestPrice();\n        // Then set up interval\n        pollInterval = setInterval(()=>{\n            if (isSubscribed) {\n                fetchLatestPrice();\n            }\n        }, POLL_INTERVAL);\n    };\n    // Start polling immediately\n    startPolling();\n    // Return cleanup function\n    return ()=>{\n        console.log(\"Cleaning up price subscription...\");\n        isSubscribed = false;\n        if (pollInterval) {\n            clearInterval(pollInterval);\n            pollInterval = null;\n        }\n    };\n}\n// Helper function to validate if a trading pair is supported\nasync function isPairSupported(token, baseToken) {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/price?fsym=\").concat(token, \"&tsyms=\").concat(baseToken, \"&api_key=\").concat(API_KEY));\n        if (!response.ok) {\n            return false;\n        }\n        const data = await response.json();\n        return !data.Response || data.Response !== \"Error\";\n    } catch (error) {\n        console.error(\"Error checking pair support:\", error);\n        return false;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api/cryptoCompareAPI.ts\n"));

/***/ })

});